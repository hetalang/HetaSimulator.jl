var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"API references","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [HetaSimulator] Order   = [:type, :function]","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HetaSimulator is a simulation and parameters estimation (fitting) platform for Heta modeling language. The main purpose of the platform is to establish the linkage between emerging QSP frameworks and fast computational methods (parallel simulations, automatic differentiation, etc.). HetaSimulator is inspired by the user experience of the software packages like SBMLToolbox, mrgsolve, DBSolve, dMod. From the computational point of view, it utilizes the unique features of Julia and SciML ecosystem.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"It is assumed that you have Julia v1.6 installed. Latest Julia release can be downloaded from julialang.org","category":"page"},{"location":"","page":"Home","title":"Home","text":"To install or update HetaSimulator and Heta compiler run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\r\n(@v1.6) pkg> add https://github.com/hetalang/HetaSimulator.jl.git\r\njulia> using HetaSimulator\r\njulia> heta_update() # installs \"Heta compiler\" in NodeJS","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The user of HetaSimulator typically deals with the following three types:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Model - an ODE model, containing rhs, rules, initial parameters and vector of events.\nCond - condition representing a special model's setup for simulations or fitting. This setup can include initial parameters and events settings, output variables etc. In case of fitting Cond should also include experimental data. A common usage of Cond can be model's simulation with different drugs (parameters and events setup). Different Cond's can be united to run multi-conditional simulations and fitting.\nPlatform - container for different Models and Conds.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The user can perform the following three operations with both Model, Cond and Platform","category":"page"},{"location":"","page":"Home","title":"Home","text":"sim - run a single simulation or multi-conditional simulations. \nfit - fit a model to experimental data. \nmc - run Monte-Carlo or virtual patients simulations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See documentation for detailed overview of HetaSimulator types and functions' arguments.","category":"page"},{"location":"#Basic-usage","page":"Home","title":"Basic usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A basic use-case example is provided in /cases/story_1 folder","category":"page"},{"location":"","page":"Home","title":"Home","text":"using HetaSimulator, Plots\r\n\r\nplatform = load_platform(\"$HetaSimulatorDir/cases/story_1\", rm_out=false);\r\nmodel = platform.models[:nameless]\r\n\r\n## single simulation\r\n\r\nsim(model; tspan = (0., 200.)) |> plot #1\r\n\r\n## condition simulation\r\n\r\ncond1 = Cond(model; tspan = (0., 200.), events_on=[:ss1 => false], saveat = [0.0, 150., 250.]);\r\nsim(cond1) |> plot\r\ncond2 = Cond(model; tspan = (0., 200.), events_on=[:sw1=>false, :ss1 => false], constants = [:k2 => 0.001, :k3 => 0.02]);\r\nsim(cond2) |> plot\r\ncond3 = Cond(model; tspan = (0., 200.), events_on=[:ss1 => false],constants = [:k1=>0.01]);\r\nsim(cond3) |> plot \r\n\r\nsim([:x => cond1, :y=>cond2, :z=>cond3]) |> plot\r\n\r\n## fitting\r\n\r\nmeasurements_csv = read_measurements(\"$HetaSimulatorDir/cases/story_1/measurements.csv\")\r\ncond4 = Cond(model; constants = [:k2=>0.001, :k3=>0.04], events_on=[:ss1 => false], saveat = [0.0, 50., 150., 250.]);\r\nadd_measurements!(cond4, measurements_csv; subset = Dict(:condition => :dataone))\r\nres2 = fit([cond2, cond3, cond4], [:k1=>0.1,:k2=>0.2,:k3=>0.3])\r\n\r\n## Monte-Carlo simulations\r\n\r\nmccond1 = Cond(model; tspan = (0., 200.), constants = [:k1=>0.01], saveat = [50., 80., 150.], events_on=[:ss1 => false]);\r\nmccond2 = Cond(model; tspan = (0., 200.), constants = [:k1=>0.02], saveat = [50., 100., 200.], events_on=[:ss1 => false]);\r\nmccond3 = Cond(model; tspan = (0., 200.), constants = [:k1=>0.03], saveat = [50., 100., 180.], events_on=[:ss1 => false]);\r\n\r\nmc(mccond1, [:k2=>Normal(1e-3,1e-4), :k3=>Normal(1e-4,1e-5)], 1000) |> plot\r\nmc([:mc1=>mccond1,:mc2=>mccond2,:mc3=>mccond3], [:k1=>0.01, :k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000) |> plot\r\n\r\n## Simulations and fitting with Platform interface\r\n\r\n# load conditions\r\nconditions_csv = read_conditions(\"$HetaSimulatorDir/cases/story_1/conditions.csv\")\r\nadd_conditions!(platform, conditions_csv)\r\n\r\n# load measurements\r\nmeasurements = read_measurements(\"$HetaSimulatorDir/cases/story_1/measurements.csv\");\r\nadd_measurements!(platform, measurements)\r\n\r\nsim(platform, conditions = [:three]) |> plot\r\nfit1 = fit(platform, [:k1=>0.1,:k2=>0.2,:k3=>0.3], conditions = [:dataone,:withdata2])","category":"page"}]
}
