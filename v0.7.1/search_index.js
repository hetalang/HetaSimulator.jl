var documenterSearchIndex = {"docs":
[{"location":"table-formats/parameters/#parameters","page":"Parameters tables","title":"Parameters tables","text":"","category":"section"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"Parameters tables are CSV or XLSX files which store settings for parameter estimation problem. The content of the table can be loaded into Julia environment as a DataFrame and used inside fit method.","category":"page"},{"location":"table-formats/parameters/#Format","page":"Parameters tables","title":"Format","text":"","category":"section"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"The first row is the header. The sequence of the columns may vary.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"parameter : a String representing unique identifier of model-level parameter. The corresponding parameter must be declared in the Model's namespace (@Const component).\nnominal (optional): a Float64 nominal value which will be used as an initial value for the parameter. If it is skipped then the default value from the model will be used.\nlower (optional): a Float64 value that declares the lower bound of the parameter. If skipped then the the lower bound is set to -Inf.\nupper (optional): a Float64 value that declares the upper bound of the parameter. If skipped then the upper bound is set to Inf.\nscale (optional): String which can be lin, log, logit. The scale for parameter optimization. Default value is lin.\nestimate (optional): a Boolean value: true or false or numerical values 0 or 1. Declares if the parameter should be fitted. 0 or false value sets the value for the parameter and excludes it from fitting. Default value is true.","category":"page"},{"location":"table-formats/parameters/#Usage","page":"Parameters tables","title":"Usage","text":"","category":"section"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"To load the table into Julia environment as DataFrame one should use read_parameters method. This method reads the file, checks the content and formats the data.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"parameters_csv = read_parameters(\"./parameters.csv\")","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"Currently the table can be used only in fit method.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"fit_results = fit(p, parameters_csv)","category":"page"},{"location":"table-formats/parameters/#Example","page":"Parameters tables","title":"Example","text":"","category":"section"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"Loading file parameters.csv with the following content.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"parameter nominal lower upper scale estimate\nsigma_K 0.1 1e-6 1e3 log 1\nsigma_P 0.1 1e-6 1e3 log 1\nKp_K_D 5.562383e+01 1e-6 1e3 log 1\nKp_R_D 5.562383e+01 1e-6 1e3 log 0","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"Read as DataFrame object.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"params = read_parameters(\"./parameters.csv\")\nres = fit(p, params)","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"As a result the Platform will be fitted based on all experimental data. The following parameter values will be estimated: sigma_K, sigma_P, Kp_K_D.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"These operations are equivalent to the following.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"res = fit(\n    p,\n    [:sigma_K => 0.1, :sigma_P => 0.1, :Kp_K_D => 5.562383e+01];\n    parameters = [:Kp_R_D => 5.562383e+01],\n    lbounds = [1e-6, 1e-6, 1e-6],\n    ubounds = [1e3, 1e3, 1e3],\n    scale = [:log, :log, :log]\n)","category":"page"},{"location":"table-formats/scenario/#Scenarios-tables","page":"Scenarios tables","title":"Scenarios tables","text":"","category":"section"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"Scenarios tables are CSV or XLSX files which store Scenario objects in tabular format. The content of the table can be loaded into Julia environment as a DataFrame to be included into Platform object.","category":"page"},{"location":"table-formats/scenario/#Format","page":"Scenarios tables","title":"Format","text":"","category":"section"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"The structure of the tables corresponds to Scenario properties. The first row is intended for headers which clarify the columns meaning. The sequence of columns is not important.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"id : a String representing unique identifier of Scenario if you load into Platform object. The string should be unique within the scenario set and must follow the common identifier rules: no blank spaces, no digit at the first symbol, etc.\nmodel : a String identifier of model which will be used for simulations. The default value is nameless.\ntspan : a Float64 value which are maximal simulation time point. BTW the initial time point is always 0.\nparameters.<id> (optional) : a Float64 value which updates and fixes the value of model's Const with the corresponding id. Missing value does not updates the parameter's value and is ignored.\nsaveat[] (* optional) : a set of Float64 values separated by semicolons. The values states the time points for simulated output.\nobservables[] (optional) : a set of String separated by semicolon. Model Records that will be saved as simulation results. If not set the default observables will be used (output: true property in Heta notation).\nevents_active.<id> (optional) : a Bool value which updates turns on and off events in model. The id is switcher identifier in the Heta file. If it is not set the switcher.active state from Heta model will be used.\nevents_save.<id> (optional, experimental) : a pair of Bool values divided by semicolon. This value set if it is required to save the output value before and after the event. If not set both: before and after values will be saved.","category":"page"},{"location":"table-formats/scenario/#Loading-to-Platform","page":"Scenarios tables","title":"Loading to Platform","text":"","category":"section"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"Scenario table can be loaded into Julia environment as a DataFrame using HetaSimulator.read_scenarios method. This method reads the file, checks the content and formats the data to be used inside Platform object.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"scn_csv = read_scenarios(\"./scenarios.csv\")\n\n4×7 DataFrame\n Row │ id         parameters.k1  parameters.k2  parameters.k3  saveat[]           tspan      observables[] \n     │ Symbol     Float64?       Float64?       Float64?       String?            Float64?   String?       \n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ dataone     missing               0.001           0.02  0;12;24;48;72;120      150.0  missing       \n   2 │ withdata2         0.001     missing         missing     0;12;24;48;72;120  missing    missing       \n   3 │ three             0.001           0.1       missing     missing                250.0  missing       ","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"The data frame can be loaded into platform using the HetaSimulator.add_scenarios! method.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"add_scenarios!(platform, scn_csv)\n\nscenarios(platform)\nDict{Symbol, Scenario} with 4 entries:\n  :three     => Scenario{...}\n  :withdata2 => Scenario{...} \n  :dataone   => Scenario{...}","category":"page"},{"location":"table-formats/scenario/#Example","page":"Scenarios tables","title":"Example","text":"","category":"section"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"Loading file scenarios.csv with the following content.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"id model parameters.k1 parameters.k2 parameters.k3 saveat[] tspan observables[] events_active.sw1 events_active.sw2 events_save.sw1\nscn1   0.001 0.02 0;12;24;48;72;120;150   true false true;false\nscn2 nameless 0.001    1000   true \nscn3 another_model  0.001  0;12;24;48;72;120   false  ","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"Read as DataFrame object.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"scenarios = read_scenarios(\"./scenarios.csv\")","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"Add all scenarios to Platform","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"add_scenarios!(platform, scenarios)","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"As a result the Platform will contain three scenarios: scn1, scn2, scn3.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"These operations are equivalent of manually created Scenario objects.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"scn1 = Scenario(\n  platform.models[:nameless],\n  (0., 1000.);\n  parameters = [:k2=>0.001, :k3=>0.02],\n  saveat = [0, 12, 24, 48, 72, 120, 150],\n  events_active = [:sw1=>true, :sw2=>false],\n  events_save = [:sw1=>(true,false)]\n)\npush!(platform.scenarios, :scn1=>scn1)\n\nscn2 = Scenario(\n  platform.models[:nameless],\n  (0., 1000.);\n  parameters = [:k1=>0.001],\n  events_active = [:sw2=>true]\n)\npush!(platform.scenarios, :scn2=>scn2)\n\nscn3 = Scenario(\n  platform.models[:another_model],\n  (0., 1000.);\n  parameters = [:k2=>0.001],\n    saveat = [0, 12, 24, 48, 72, 120],\n  events_active = [:sw1=>false]\n)\npush!(platform.scenarios, :scn3=>scn3)\n","category":"page"},{"location":"tutorial/intro/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"HetaSimulator was designed as a modeling, simulations and parameters estimation environment for Quantitative Systems Pharmacology (QSP) and Systems Biology (SB) projects. A user is not intended to be experienced Julia programmer but rather a researcher having biological, biophisical and bioinformatical background. We have avoided complicated user interfaces and tried to keep the available computational methods simple for the basic modeling workflow.","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"The approach implies the \"modeling platform\" term which means all the components of a model: models structure, variables, parameters, scenarios and experimental dataset. From the practical point of view \"modeling platform\" is the same as project files. The representation of modeling platform in HetaSimulator package is an object of the Platform type. This object stores Models, Scenarios and Measurements.","category":"page"},{"location":"tutorial/intro/#Architecture","page":"Introduction","title":"Architecture","text":"","category":"section"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"Model type represents one concrete namespace imported from Heta-compiler. It stores information about ODE system, initial values, events as well as default model-level parameters values. The HetaSimulator approach imply multi-model usage so simulations and parameters estimation can be done for several models simultaneously without specific preparations.","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"Scenario type stores additional conditions for simulating the model. For example, the same model can be run with or without some events, or differ by some specific parameters values like doses and others, or have some specific output variables (observables). Each Scenario is associated with a specific Model. Each model may be used in different scenarios.","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"Additionally Scenario instance is a container for the Measurement objects which describe experimental datasets. Measurements can be used for estimation of model parameters or some specific tasks like identifiability analysis and visualization. ","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"(Image: platform-scheme)","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"There is no need to create more than one Platform object because it can store any number of Models and Scenarios. The advisable workflow is: ","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"Create one Platform using load_platform method\nUpdate it by Scenarios and Measurements using formatted CSV tables or directly in code\nApply sim, mc, fit and other methods to simulate the model, estimate the parameters, etc.","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"There are basic methods that can be applied to a Platform object, for example sim, mc and fit. These methods can be applied to a particular Scenario or to the whole Platform (all scenarios in platform). The last approach is preferable.","category":"page"},{"location":"tutorial/intro/#HetaSimulator-vs-heta-compiler","page":"Introduction","title":"HetaSimulator vs heta-compiler","text":"","category":"section"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"Both heta-compiler and HetaSimulator.jl are part of the Heta project initiative. They use the same standards of model notation and can be used in the same projects. Furthermore currently heta-compiler JS code is used internally in HetaSimulator.","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"When a user installs HetaSimulator in Julia the most appropriate version of heta compiler is installed as well.","category":"page"},{"location":"tutorial/mc/#Monte-Carlo.-Statistics-calculation","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Monte-Carlo simulations in HetaSimulator can be run using the mc method. It can be applied to: a single scenario, series of scenarios and the whole platform.","category":"page"},{"location":"tutorial/mc/#Working-example","page":"Monte-Carlo. Statistics calculation","title":"Working example","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"This example uses the heta model, which can be downloaded here: index.heta","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"comp1 @Compartment .= 1.1;\ncomp2 @Compartment .= 2.2;\n\na @Species { compartment: comp1, output: true } .= 10;\nb @Species { compartment: comp1, output: true } .= 0;\nc @Species { compartment: comp1, output: true } .= 1;\nd @Species { compartment: comp2 } .= 0;\n\nr1 @Reaction { actors: a => b };\nr2 @Reaction { actors: b + c <=> d };\nr1 := k1 * a;\nr2 := k2 * b * c - k3 * d;\n\nk1 @Const = 1e-3;\nk2 @Const = 1e-4;\nk3 @const = 2.2e-2;\n\n// test\nsw1 @TimeSwitcher {start: 50};\na [sw1]= a + 1;\n\n//sw2 @TimeSwitcher {start: 100};\n//b [sw2]= 0;\n\n//sw3 @DSwitcher {trigger: a <= 9};\n//a [sw3]= a + 2;\n\n//ss1 @StopSwitcher {trigger: t > 10};","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Download the file or create index.heta with VSCode in the working directory.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Load the platform into the Julia environment. You should provide the path to the modeling platform as the first argument to load_platform.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"using HetaSimulator, Plots\nusing Distributed # to use parallel simulations\n\nplatform = load_platform(\".\")\nmodel = platform.models[:nameless]","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Model contains 3 constant(s), 8 record(s), 1 switcher(s).\n   Constants (model-level parameters): k1, k2, k3\n   Records (observables): comp1, comp2, a, b, c, d, r1, r2\n   Switchers (events): sw1","category":"page"},{"location":"tutorial/mc/#Single-scenario-simulations","page":"Monte-Carlo. Statistics calculation","title":"Single scenario simulations","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Create two scenarios such as: ","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcscn1 = Scenario(\n  model,\n  (0., 200.);\n  parameters = [:k1=>0.01],\n  saveat = [50., 80., 150.]\n)\n\nmcscn2 = Scenario(\n  model,\n  (0., 200.);\n  parameters = [:k1=>0.02],\n  saveat = [50., 100., 200.]\n)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"The scenarios updates the value of k1 parameter (@Const component in model). The observables vector is not set, so outputs will be the default set of variables: a, b, c.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Monte-Carlo simulations mc can be applied to a single scenario mcscn1. The second argument in mc is the distribution of the selected independent parameters. The format of the argument is the vector of pairs where the first element is parameter id and the second one is the distribution. You can also set a Float64 value for a parameter here and this rewrites the value in the model and leaves the parameter value fixed. The third argument is the number of Monte-Carlo simulations to run.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcsim1 = mc(mcscn1, [:k1=>Uniform(1e-3,1e-2), :k2=>Normal(1e-3,1e-4), :k3=>Normal(1e-4,1e-5)], 100)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"We can limit the variables for visualization with vars argument in plot.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"plot(mcsim1, vars=[:b])","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig01)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Monte-Carlo results can also be transformed into DataFrame.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"DataFrame(mcsim1, vars=[:a, :b])","category":"page"},{"location":"tutorial/mc/#Multiple-scenarios-simulations","page":"Monte-Carlo. Statistics calculation","title":"Multiple scenarios simulations","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"In the same way as it was shown for sim method we can run mc with multiple scenarios. The returned object will be of type Vector{Pair{Symbol,MCResult}}.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcsim2 = mc(\n    [:mc1=>mcscn1,:mc2=>mcscn2],\n    [:k1=>0.01, :k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)],\n    100\n  )\nplot(mcsim2)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig02)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Results of MC simulations can be transformed into DataFrame too.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mc_df2 = DataFrame(mcsim2)","category":"page"},{"location":"tutorial/mc/#Monte-Carlo-simulations-of-the-whole-platform","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo simulations of the whole platform","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Simulation scenarios for mc can also be loaded from tabular files.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Create scenarios.csv file in the same directory and fill it with the data or download it here: scenarios.csv","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig03)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Load it as a scenarios table.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"scn_csv = read_scenarios(\"./scenarios.csv\")\nadd_scenarios!(platform, scn_csv)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Apply mc to the platform to run MC simulations with all Scenarios in the platform.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcplat = mc(\n    platform,\n    [:k1=>0.01, :k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)],\n    100\n  )\nplot(mcplat)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig04)","category":"page"},{"location":"tutorial/mc/#Using-pre-generated-parameters-set","page":"Monte-Carlo. Statistics calculation","title":"Using pre-generated parameters set","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"In many practical cases it will be useful to pre-generate parameters values and run simulations in two steps. To do it one needs to","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Create a DataFrame with parameters values\nUse it as the second argument in mc method.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Parameter sets can be created using the DataFrame constructor.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcvecs0 = DataFrame(k1=0.01, k2=rand(Normal(1e-3,1e-4), 50), k3=rand(Uniform(1e-4,1e-2), 50))","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Or parameters values can be loaded from CSV file.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"The file can be downloaded here: params.csv","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig05)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcvecs = read_mcvecs(\"./params.csv\")","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"100×3 DataFrame\n Row │ k1          k2           k3\n     │ Float64     Float64      Float64     \n─────┼──────────────────────────────────────\n   1 │ 0.00904655  0.00109494   0.00938817\n   2 │ 0.00342413  0.000952441  0.00274764\n  ⋮  │     ⋮            ⋮            ⋮\n 100 │ 0.00318838  0.00106162   0.000996487\n                             97 rows omitted","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"This DataFrame can be used as the second argument in mc.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcv1 = mc(\n  mcscn1,\n  mcvecs\n)\nplot(mc1)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig06)","category":"page"},{"location":"tutorial/mc/#Monte-Carlo-statistics","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo statistics","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Monte-Carlo results can be used to calculate some characteristics which will be called \"statistics\".","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"There are some standard methods taken from SciMLBase.jl (see more here https://docs.sciml.ai/DiffEqDocs/stable/features/ensemble/#Example-4:-Using-the-Analysis-Tools).","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"See below several methods that calculate statistics for some particular time point.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"timestep_mean(mcv1,2)\ntimepoint_mean(mcv1,80)\n\n# median\ntimestep_median(mcv1,2)\ntimepoint_median(mcv1,80)\n\n# meanvar\ntimestep_meanvar(mcv1,2)\ntimepoint_meanvar(mcv1,80)\n\n# meancov\ntimestep_meancov(mcv1,2,3)\ntimepoint_meancov(mcv1,80.,150.)\n\n# meancor\ntimestep_meancor(mcv1,2,3)\ntimepoint_meancor(mcv1,80.,150.)\n\n# quantile\ntimestep_quantile(mcv1,0.95,2)\ntimepoint_quantile(mcv1,0.95,80.)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"The next methods calculate statistics for all time points.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"timeseries_steps_mean(mcv1) # Computes the mean at each time step\ntimeseries_steps_median(mcv1) # Computes the median at each time step\ntimeseries_steps_quantile(mcv1,0.95) # Computes the quantile q at each time step\ntimeseries_steps_meanvar(mcv1) # Computes the mean and variance at each time step\ntimeseries_steps_meancov(mcv1) # Computes the covariance matrix and means at each time step\ntimeseries_steps_meancor(mcv1) # Computes the correlation matrix and means at each time step","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"And finally there is an example of statistics summary and visualization.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"# Ensemble Summary\nens = EnsembleSummary(mcsim1; quantiles=[0.05,0.95])\nplot(ens)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig07)","category":"page"},{"location":"tutorial/mc/#Final-remarks","page":"Monte-Carlo. Statistics calculation","title":"Final remarks","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"If you are going to use \"statistics\" methods you should always set saveat argument in Scenario.","category":"page"},{"location":"basics/solvers/#Solver-choice","page":"Solver choice","title":"Solver choice","text":"","category":"section"},{"location":"basics/solvers/#Page-under-development.-Information-will-be-updated","page":"Solver choice","title":"Page under development. Information will be updated","text":"","category":"section"},{"location":"basics/solvers/#ODE-solver-choice","page":"Solver choice","title":"ODE solver choice","text":"","category":"section"},{"location":"basics/solvers/","page":"Solver choice","title":"Solver choice","text":"HetaSimulator.jl relies on DifferentialEquations.jl packages, which provide access to 300+ ODE solvers.  These solvers can be used in HetaSimulator simulation and parameters estimation functions (sim, fit, etc.), provided via alg keyword argument (for example, see sim).  One can also set relative and absolute tolerances (reltol, abstol) and other stepsize related settings via relevant keyword arguments. See DiffEqDocs for details.","category":"page"},{"location":"basics/solvers/","page":"Solver choice","title":"Solver choice","text":"If no solver is provided the default one AutoTsit5(Rosenbrock23()) will be used with reltol=1e-3 and abstol=1e-6 for simulation problems and reltol=1e-6 and abstol=1e-8 for parameters estimation.","category":"page"},{"location":"basics/solvers/","page":"Solver choice","title":"Solver choice","text":"The following DiffEq Docs page provides general advice on how to choose a solver suitable for your ODE system.  For many ODE systems the following simplified guideline is sufficient:","category":"page"},{"location":"basics/solvers/","page":"Solver choice","title":"Solver choice","text":"If your system is small (~10 ODEs) go with the default solver \nIf the system is large and stiff choose FBDF() or QNDF()\nIf FBDF() fails to solve the system check the model and try it again :)\nIf FBDF() still fails to solve the system or the integration takes too long try CVODE_BDF()*","category":"page"},{"location":"basics/solvers/","page":"Solver choice","title":"Solver choice","text":"*You should be cautious when using CVODE_BDF(). In many cases it is the fastest solver, however the accuracy of the solution is often the tradeoff. You shouldn't use it with tolerances higher than ~ reltol=1e-4 and abstol=1e-7.  ","category":"page"},{"location":"tutorial/fit/#Fitting.-Measurements","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"","category":"section"},{"location":"tutorial/fit/#Under-development!-Be-sure-you-have-the-latest-**HetaSimulator.jl**-version.","page":"Fitting. Measurements","title":"Under development! Be sure you have the latest HetaSimulator.jl version.","text":"","category":"section"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"fit method can be used to estimate model parameters based on experimental data. Typically the method is applied to the whole Platform but it can also be used with the selected Scenarios.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"Be sure you have the latest HetaSimulator.jl version.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"] # switch to Pkg mode\nadd HetaSimulator","category":"page"},{"location":"tutorial/fit/#Working-example","page":"Fitting. Measurements","title":"Working example","text":"","category":"section"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"This example uses the heta model, which can be downloaded here: index.heta","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"// Compartments\nVol0 @Compartment .= 1;\nVol1 @Compartment .= 6.3;\nVol2 @Compartment .= 10.6;\n\n// Species\nA0 @Species {compartment: Vol0, isAmount: true, output: true} .= 0;\nC1 @Species {compartment: Vol1, output: true} .= 0;\nC2 @Species {compartment: Vol2, output: true} .= 0;\n\n// Reactions\nv_abs @Reaction {actors: A0 = C1} := kabs * A0;\nv_el @Reaction {actors: C1 =} := Vol1 * (kel * C1); // Vol1 * (kmax * C1 / (Km + C1));\nv_distr @Reaction {actors: C1 = C2} := Q * (C1 - C2);\n\n// Parameters\ndose @Const = 20;\nkabs @Const = 20;\nkel @Const = 0.5;\nQ @Const = 1.0;\n// kmax @Const = 3e3;\n// Km @Const = 9e3;\n\n// single dose event\nsw1 @TimeSwitcher {start: 0};\nA0 [sw1]= dose;\n\n// multiple dose event, default off\nsw2 @TimeSwitcher {start: 0, period: 24, active: false};\nA0 [sw2]= dose;\n\n// parameters for fitting\nsigma1 @Const = 0.1;\nsigma2 @Const = 0.1;\nsigma3 @Const = 0.1;","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"Download the file or create  index.heta with VSCode in the working directory.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"Load the platform into the Julia environment. You should provide the path to the modeling platform as the first argument to load_platform. We will use the same working directory where the index.heta file is located.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"using HetaSimulator, Plots\n\np = load_platform(\".\")","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"The following table describes 4 scenarios.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"(Image: fig01)","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"The file can be downloaded here: scenarios.csv","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"Load scenarios into the platform.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"scn_df = read_scenarios(\"./scenarios.csv\")\nadd_scenarios!(p, scn_df)","category":"page"},{"location":"tutorial/fit/#Load-measurements","page":"Fitting. Measurements","title":"Load measurements","text":"","category":"section"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"Experimental data can be used for both visualization and parameters estimation. To read more about measurements tables format see the documentation.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"(Image: fig02)","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"The measurements file can be downloaded here: measurements.csv. The dataset includes C1 observable measurements with unknown variance.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"The measurement table can be loaded into the Platform using read_measurements and add_measurements! functions.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"measurements_df = read_measurements(\"./measurements.csv\")","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"90×5 DataFrame\n Row │ t         measurement  prob.mean  prob.sigma  scenario \n     │ Float64   Float64      String     String      Symbol   \n─────┼────────────────────────────────────────────────────────\n   1 │  0.08333    0.0686283  C1         sigma1      dose_1\n   2 │  0.08333    0.0684679  C1         sigma1      dose_1\n  ⋮  │    ⋮           ⋮           ⋮          ⋮          ⋮\n  89 │ 24.0        1.036      C1         sigma3      dose_100\n  90 │ 24.0        0.724612   C1         sigma3      dose_100\n                                               86 rows omitted","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"add_measurements!(p, measurements_df)\n\n# display platform content\np","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"Platform with 1 model(s), 4 scenario(s), 90 measurement(s)\n   Models: nameless\n   Scenarios: dose_1, dose_10, dose_100, multiple_15","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"We can plot simulation results together with measured values.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"# simulate all\nres = sim(p)","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"4-element Vector{Pair{Symbol, SimResult}}\n    :dose_1 => 80x3 SimResult with status :Success.\n    :dose_10 => 100x3 SimResult with status :Success.\n    :dose_100 => 124x3 SimResult with status :Success.\n    :multiple_15 => 668x3 SimResult with status :Success.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"# plot all default\nplot(res)","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"(Image: fit-fig03)","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"One can use the additional yscale, ylim and other Plots keyword arguments to change how the results are displayed. ","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"# plot C1, C2 in log scale\nplot(res, vars=[:C1,:C2], yscale=:log10, ylim=(1e-3, 1e3))","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"(Image: fit-fig04)","category":"page"},{"location":"tutorial/fit/#Fitting","page":"Fitting. Measurements","title":"Fitting","text":"","category":"section"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"Before we run the optimization procedure we set the initial (nominal) values for the parameters selected for fitting.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"sigma1, sigma2, sigma3 parameters are not included in the model code. They describe the variability of measurement error for the scenarios: dose_1, dose_10 and dose_100.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"# fitted parameters\nto_fit = [\n    :kabs => 8.0,\n    :Q => 4.0,\n    :kel => 2.2,\n    :sigma1 => 0.1,\n    :sigma2 => 0.1,\n    :sigma3 => 0.1,\n]\nres_optim = fit(p, to_fit) # default fitting","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"┌ Warning: Scenario \":multiple_15\" has no measurements. It will be excluded from fitting.\n└ @ HetaSimulator y:\\HetaSimulator.jl\\src\\fit.jl:77\nFitResult with status :XTOL_REACHED\n   Status: XTOL_REACHED\n   Optimal values: [:kabs => 18.868605026704916, :Q => 4.043662480774219, :kel => 0.17104243648378176, :sigma1 => 0.020347955494158528, :sigma2 => 0.31561050699802246, :sigma3 => 0.5716026958426483]\n   OF value: 140.96503722971997\n   OF count: 8612","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"The scenario multiple_15 does not include any measurement. That's why we see the warning message here. This is not an error.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"The optimal value of the parameters can be obtained with optim method applied to FitResult.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"# optimal parameters\noptim(res_optim)","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":" 6-element Vector{Pair{Symbol, Float64}}:\n   :kabs => 18.868605026704916\n      :Q => 4.043662480774219\n    :kel => 0.17104243648378176\n :sigma1 => 0.020347955494158528\n :sigma2 => 0.31561050699802246\n :sigma3 => 0.5716026958426483","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"To display the simulations with the updated parameters values we can use parameters argument in sim.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"# check fitting quality \nres = sim(p, parameters = optim(res_optim))\nplot(res, yscale=:log10, vars=[:C1,:C2], ylims=(1e-3,1e2))","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"(Image: fig05)","category":"page"},{"location":"tutorial/fit/#Fitting-with-parameters-table","page":"Fitting. Measurements","title":"Fitting with parameters table","text":"","category":"section"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"The parameters setup that is used in fit can also be loaded from tabular format. The description of tabular format can be found in documentation.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"For example we will use the following table. It can be downloaded here: parameters.csv","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"(Image: fig06)","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"The table can be loaded with read_parameters method.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"# read parameters from table\nparams_df = read_parameters(\"./parameters.csv\")","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"6×6 DataFrame\n Row │ parameter  scale   lower    upper    nominal  estimate \n     │ Symbol     Symbol  Float64  Float64  Float64  Bool     \n─────┼────────────────────────────────────────────────────────\n   1 │ kabs       lin         1.0    100.0      8.0      true\n   2 │ kel        log         0.0     60.0      2.2      true\n   3 │ Q          log10       1.0     80.0      4.0      true\n   4 │ sigma1     lin         0.0     10.0      0.1      true\n   5 │ sigma2     lin         0.0     10.0      0.1      true\n   6 │ sigma3     lin         0.0     10.0      0.1      true","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"As before we can use this as a setup DataFrame for parameters estimation.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"res_optim = fit(p, params_df)","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"┌ Warning: Scenario \":multiple_15\" has no measurements. It will be excluded from fitting.\n└ @ HetaSimulator \nFitResult with status :FTOL_REACHED\n   Status: FTOL_REACHED\n   Optimal values: [:kabs => 8.669590504032879, :kel => 0.2299120380231296, :Q => 3.386457652767808, :sigma1 => 0.010105725225267037, :sigma2 => 0.09951673713071268, :sigma3 => 0.6024808584834973]\n   OF value: -101.7645013649068\n   OF count: 417","category":"page"},{"location":"tutorial/fit/#Additional-optimization-specific-options","page":"Fitting. Measurements","title":"Additional optimization-specific options","text":"","category":"section"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"Internally HetaSimulator uses NLopt library. One can choose the optimization algorithm as well as additional options.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"Read more about NLopt algorithms choice: https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"res_optim = fit(\n    p, \n    params_df, \n    fit_alg = :LN_SBPLX, \n    ftol_abs = 1e-5, \n    ftol_rel = 0, \n    maxeval = 10^6\n)\noptim(res_optim)","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"There are several optimization related arguments, which are available for a user.  To learn more read about fit method in API documentation.","category":"page"},{"location":"tutorial/fit/","page":"Fitting. Measurements","title":"Fitting. Measurements","text":"fit_alg : fitting algorithm. Default is :LN_NELDERMEAD\nftol_abs : absolute tolerance on function value. Default is 0.0\nftol_rel : relative tolerance on function value. Default is 1e-4\nxtol_rel : relative tolerance on optimization parameters. Default is 0.0\nxtol_rel : absolute tolerance on optimization parameters. Default is 0.0\nmaxeval : maximum number of function evaluations. Default is 1e4\nmaxtime : maximum optimization time (in seconds). Default is 0","category":"page"},{"location":"api/#API-references","page":"API","title":"API references","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [HetaSimulator]\nOrder   = [:type, :function]","category":"page"},{"location":"api/#DataFrames.DataFrame-Tuple{HetaSimulator.SimResult}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(s::Simulation; \n  vars=observables(s), parameters_output::Vector{Symbol}=Symbol[], iter::Union{Int,Nothing}=nothing)\n\nConverts simulation results of type SimResult, MCResult, etc  to DataFrame.\n\nExample: DataFrame(s)\n\nArguments:\n\ns : simulation results of type SimResult, MCResult or Vector containing them\nparameters_output : parameters provided as kwarg parameters to sim or mc functions, which should be included in DataFrame. Default is empty\niter : Int iteration id, which should be included in DataFrame. Default is nothing\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.FitResult","page":"API","title":"HetaSimulator.FitResult","text":"struct FitResult{L<:Real, I}\n  obj::L\n  optim::Vector{Pair{Symbol,Float64}}\n  status::Symbol\n  numevals::I\nend\n\nResult of fit.\n\nUse optim method to get optimal values.\n\nUse object method to get optimal objective function.\n\nUse status to get status.\n\nThe optimal parameters can be saved in heta file, see save_as_heta method.\n\n\n\n\n\n","category":"type"},{"location":"api/#HetaSimulator.MCResult","page":"API","title":"HetaSimulator.MCResult","text":"struct MCResult{S,C} <: AbstractResult\n  sim::S\n  saveat::Bool\n  scenario::C\nend\n\nStructure storing results of [mc]{@ref} method applied for one Scenario.\n\nTo convert into tabular format, use DataFrame method.\n\nThe base visulaization can be done with plot method.\n\n\n\n\n\n","category":"type"},{"location":"api/#HetaSimulator.Model","page":"API","title":"HetaSimulator.Model","text":"struct Model{IF,OF,EV,SG,EA, MM} <: AbstractModel\n  init_func::IF\n  ode_func::OF\n  events::EV\n  saving_generator::SG\n  records_output::AbstractVector{Pair{Symbol,Bool}}\n  constants::NamedTuple\n  events_active::EA\n  mass_matrix::MM\nend\n\nStructure storing core properties of ODE model. This represent the content of one namespace from a Heta platform.\n\nTo get list of model content use methods: constants(model), records(model), switchers(model).\n\nTo get the default model options use methods:  events_active(model), events_save(model), observables(model). These values can be rewritten by a [Scenario]{@ref}.\n\n\n\n\n\n","category":"type"},{"location":"api/#HetaSimulator.Platform","page":"API","title":"HetaSimulator.Platform","text":"struct Platform{M,C}\n  models::Dict{Symbol,M}     # dictionary storing Models\n  scenarios::Dict{Symbol,C} # dictionary storing Scenarios\nend\n\nThe main storage representing a modeling platform. Typically HetaSimulator works with one platform object which can include several models and scenarios.\n\nUsually a Platform is created based on Heta formatted files using [load_platform]{@ref}.\n\nTo get the platform content use methods: models(platform), `scenarios(platform).\n\n\n\n\n\n","category":"type"},{"location":"api/#HetaSimulator.Scenario","page":"API","title":"HetaSimulator.Scenario","text":"struct Scenario{F,P,M} <: AbstractScenario     init_func::F     prob::P     measurements::M     tags::AbstractVector{Symbol}     group::Union{Symbol,Nothing}     parameters::NamedTuple   end\n\nType representing simulation conditions, i.e. model variant with updated parameters and outputs.\n\nTo get the internal properties use methods: tspan(scenario), parameters(scenario), measurements(scenario)\n\n\n\n\n\n","category":"type"},{"location":"api/#HetaSimulator.Scenario-Union{Tuple{N}, Tuple{Model, Any}} where N<:Number","page":"API","title":"HetaSimulator.Scenario","text":"Scenario(\n  model::Model,\n  tspan;\n  measurements::Vector{AbstractMeasurementPoint}=AbstractMeasurementPoint[],\n  observables::Union{Nothing,Vector{Symbol}}=nothing,\n  parameters::Vector{Pair{Symbol,Float64}} = Pair{Symbol,Float64}[],\n  events_active::Union{Nothing, Vector{Pair{Symbol,Bool}}} = Pair{Symbol,Bool}[],\n  events_save::Union{Tuple,Vector{Pair{Symbol, Tuple{Bool, Bool}}}} = (true,true),\n  saveat::Union{Nothing,AbstractVector} = nothing,\n\n  save_scope::Bool = true,\n)\n\nBuilds simulation scenario of type Scenario\n\nExample: Scenario(model, (0., 200.))\n\nArguments:\n\nmodel : model of type Model\ntspan : time span for the ODE problem\nmeasurements : Vector of measurements. Default is empty Vector{AbstractMeasurementPoint}\nobservables : names of output observables. Overwrites default model's values. Default is nothing\ntags :\ngroup :\nparameters : Vector of Pairs containing parameters' names and values. Overwrites default model's values. Default is empty vector.\nevents_active : Vector of Pairs containing events' names and true/false values. Overwrites default model's values. Default is empty Vector{Pair}\nevents_save : Tuple or Vector{Tuple} marking whether to save solution before and after event. Default is (true,true) for all events\nsaveat : time points, where solution should be saved. Default nothing values stands for saving solution at timepoints reached by the solver \nsave_scope : should scope be saved together with solution. Default is true\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.SimResult","page":"API","title":"HetaSimulator.SimResult","text":"struct SimResult{S, C<:Scenario} <: AbstractResult\n  sim::S\n  scenario::C \nend\n\nStructure storing results from [sim]{@ref} method applied for one [Scenario]{@ref}.\n\nTo get the content use methods: status(results), times(results), vals(results), parameters(results), observables(results).\n\nThe results can be transformed using DataFrame method or visualized using plot method.\n\n\n\n\n\n","category":"type"},{"location":"api/#HetaSimulator.add_measurements!-Tuple{Platform, DataFrame}","page":"API","title":"HetaSimulator.add_measurements!","text":"add_measurements!(\n  platform::Platform,\n  df::DataFrame;\n  kwargs...\n)\n\nAdds measurements to Scenario\n\nArguments:\n\nplatform : platform of Platform type\ndf : DataFrame with measurements, typically obtained with read_measurements function\nsubset : subset of measurements which will be added to the Scenario. Default Pair{Symbol, Symbol}[] adds all measurements from the df\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.add_measurements!-Tuple{Scenario, DataFrame}","page":"API","title":"HetaSimulator.add_measurements!","text":"add_measurements!(\n  scenario::Scenario,\n  df::DataFrame;\n  kwargs...\n)\n\nAdds measurements to Scenario\n\nArguments:\n\nscenario : simulation scenario of type Scenario\ndf : DataFrame with measurements, typically obtained with read_measurements function\nsubset : subset of measurements which will be added to the Scenario. Default Pair{Symbol, Symbol}[] adds all measurements from the df\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.add_scenarios!-Tuple{Platform, DataFrame}","page":"API","title":"HetaSimulator.add_scenarios!","text":"add_scenarios!(\n  platform::Platform,\n  df::DataFrame;\n  subset::AbstractVector{P} = Pair{Symbol, Symbol}[]\n) where P <: Pair{Symbol, Symbol}\n\nAdds a new Scenario to the Platform\n\nArguments:\n\nplatform : platform of Platform type\ndf : DataFrame with scenarios setup, typically obtained with read_scenarios function\nsubset : subset of scenarios which will be added to the platform. Default Pair{Symbol, Symbol}[] adds all scenarios from the df\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.estimator-Tuple{Platform, Any}","page":"API","title":"HetaSimulator.estimator","text":"function estimator(\n  platform::Platform,\n  parameters_fitted;\n  scenarios::Union{AbstractVector{Symbol}, Nothing} = nothing, # all if nothing\n  kwargs... \n)\n\nGenerates likelihood estimator function for parameter identification and analysis.    It is the interface for Platform.   See more detailes in base estimator method.\n\nArguments:\n\nplatform : platform of Platform type\nparameters_fitted : optimization parameters and their initial values\nscenarios : vector of scenarios identifiers of type Symbol. Default is nothing\nkwargs... : other arguments supported by estimator, see base method.\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.estimator-Union{Tuple{C}, Tuple{AbstractArray{Pair{Symbol, C}, 1}, DataFrame}} where C<:HetaSimulator.AbstractScenario","page":"API","title":"HetaSimulator.estimator","text":"function estimator(\n  scenario_pairs::AbstractVector{Pair{Symbol, C}},\n  parameters_fitted::DataFrame;\n  kwargs...\n) where C<:AbstractScenario\n\nGenerates likelihood estimator function for parameter identification and analysis.    It is the interface for parameters from DataFrame.   See more detailes in base estimator method.\n\nArguments:\n\nscenario_pairs : vector of pairs containing names and scenarios of type Scenario\nparameters_fitted : DataFrame with optimization parameters setup and their initial values, see read_parameters\nkwargs... : other arguments supported by estimator, see base method.\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.estimator-Union{Tuple{C}, Tuple{AbstractVector{C}, Any}} where C<:HetaSimulator.AbstractScenario","page":"API","title":"HetaSimulator.estimator","text":"function estimator(\n  scenarios::AbstractVector{C},\n  parameters_fitted;\n  kwargs...\n) where {C<:AbstractScenario}\n\nGenerates likelihood estimator function for parameter identification and analysis.    It is the interface for scenarios in vector.   See more detailes in base estimator method.\n\nArguments:\n\nscenarios : vector of scenarios of type Scenario\nparameters_fitted : optimization parameters and their initial values\nkwargs... : other arguments supported by estimator, see base method.\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.estimator-Union{Tuple{P}, Tuple{C}, Tuple{AbstractArray{Pair{Symbol, C}, 1}, Vector{Pair{Symbol, Float64}}}} where {C<:HetaSimulator.AbstractScenario, P<:Pair}","page":"API","title":"HetaSimulator.estimator","text":"function estimator(\n  scenario_pairs::AbstractVector{Pair{Symbol, C}},\n  parameters_fitted::Vector{Pair{Symbol,Float64}};\n  parameters::Union{Nothing, Vector{P}}=nothing,\n  alg=DEFAULT_ALG,\n  reltol=DEFAULT_FITTING_RELTOL,\n  abstol=DEFAULT_FITTING_ABSTOL,\n  parallel_type=EnsembleSerial(),\n  kwargs... # other arguments to sim\n) where {C<:AbstractScenario, P<:Pair}\n\nGenerates likelihood estimator function for parameter identification and analysis.   It corresponds to -2ln(L) as a function depending on parameter set.\n\nExample: estimator([:x=>scn2, :y=>scn3, :z=>scn4], [:k1=>0.1,:k2=>0.2,:k3=>0.3])\n\nArguments:\n\nscenario_pairs : vector of pairs containing names and scenarios of type Scenario\nparameters_fitted : parameters and their nominal values that will be used as default\nparameters : paramters, which overwrite both Model and Scenario parameters. Default is nothing\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-6\nabstol : relative tolerance. Default is 1e-8\nparallel_type : parallel setup. See SciML docs for details. Default is no parallelism: EnsembleSerial()\nkwargs... : other ODE solver related arguments supported by SciMLBase.solve. See SciML docs for details\n\nReturns:\n\nfunction(x:Vector{Float64}=last.(parameters_fitted))\n\nThe method returns anonimous function which depends on parameters vector in the same order as in parameters_fitted.   This function is ready to be passed to optimizer routine or identifiability analysis.\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.fit-Tuple{Platform, Any}","page":"API","title":"HetaSimulator.fit","text":"fit(platform::Platform,\n  parameters_fitted;\n  scenarios::Union{AbstractVector{Symbol}, Nothing} = nothing,\n  kwargs...\n) where C<:AbstractScenario\n\nFit parameters to experimental measurements. Returns FitResult type.\n\nExample:\n\nfit(platform, [:k1=>0.1,:k2=>0.2,:k3=>0.3];scenarios=[:scn2,:scn3])\n\nArguments:\n\nplatform : platform of Platform type\nparameters_fitted : optimization parameters and their initial values\nscenarios : vector of scenarios identifiers of type Symbol. Default is nothing\nkwargs... : other ODE solver and fit related arguments supported by fit(scenario_pairs::Vector{<:Pair}, parameters_fitted::Vector{<:Pair}\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.fit-Union{Tuple{C}, Tuple{AbstractArray{Pair{Symbol, C}, 1}, DataFrame}} where C<:HetaSimulator.AbstractScenario","page":"API","title":"HetaSimulator.fit","text":"fit(\n  scenario_pairs::AbstractVector{Pair{Symbol, C}},\n  parameters_fitted::DataFrame;\n  kwargs...\n) where C<:AbstractScenario\n\nFit parameters to experimental measurements. Returns FitResult type.\n\nArguments:\n\nscenario_pairs : vector of pairs containing names and scenarios of type Scenario\nparameters_fitted : DataFrame with optimization parameters setup and their initial values, see read_parameters\nkwargs... : other ODE solver and fit arguments supported by fit(scenario_pairs::Vector{<:Pair}, parameters_fitted::Vector{<:Pair}\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.fit-Union{Tuple{C}, Tuple{AbstractVector{C}, Any}} where C<:HetaSimulator.AbstractScenario","page":"API","title":"HetaSimulator.fit","text":"fit(\n  scenarios::AbstractVector{C},\n  parameters_fitted;\n  kwargs...\n) where C<:AbstractScenario\n\nFit parameters to experimental measurements. Returns FitResult type.\n\nExample:\n\nfit([scn2, scn3, scn4], [:k1=>0.1,:k2=>0.2,:k3=>0.3])\n\nArguments:\n\nscenarios : vector of scenarios of type Scenario\nparameters_fitted : optimization parameters and their initial values\nkwargs... : other ODE solver and fit related arguments supported by fit(scenario_pairs::Vector{<:Pair}, parameters_fitted::Vector{<:Pair}\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.fit-Union{Tuple{P}, Tuple{C}, Tuple{AbstractArray{Pair{Symbol, C}, 1}, Vector{Pair{Symbol, Float64}}}} where {C<:HetaSimulator.AbstractScenario, P<:Pair}","page":"API","title":"HetaSimulator.fit","text":"fit(\n  scenario_pairs::AbstractVector{Pair{Symbol, C}},\n  parameters_fitted::Vector{Pair{Symbol,Float64}};\n  parameters::Union{Nothing, Vector{P}}=nothing,\n  alg=DEFAULT_ALG,\n  reltol=DEFAULT_FITTING_RELTOL,\n  abstol=DEFAULT_FITTING_ABSTOL,\n  parallel_type=EnsembleSerial(),\n  ftol_abs = 0.0,\n  ftol_rel = 1e-4, \n  xtol_rel = 0.0,\n  xtol_abs = 0.0, \n  fit_alg = :LN_NELDERMEAD,\n  maxeval = 10000,\n  maxtime = 0.0,\n  lbounds = fill(0.0, length(parameters_fitted)),\n  ubounds = fill(Inf, length(parameters_fitted)),\n  scale = fill(:lin, length(parameters_fitted)),\n  progress::Symbol = :minimal,\n  kwargs... \n) where {C<:AbstractScenario, P<:Pair}\n\nFit parameters to experimental measurements. Returns FitResult type.\n\nExample: fit([:x=>scn2, :y=>scn3, :z=>scn4], [:k1=>0.1,:k2=>0.2,:k3=>0.3])\n\nArguments:\n\nscenario_pairs : vector of pairs containing names and scenarios of type Scenario\nparameters_fitted : optimization parameters and their initial values\nparameters : parameters, which overwrite both Model and Scenario parameters. Default is nothing\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-6\nabstol : relative tolerance. Default is 1e-8\nparallel_type : parallel setup. See SciML docs for details. Default is no parallelism: EnsembleSerial()\nftol_abs : absolute tolerance on function value. See NLopt.jl docs for details. Default is 0.0\nftol_rel : relative tolerance on function value. See NLopt.jl docs for details. Default is 1e-4\nxtol_rel : relative tolerance on optimization parameters. See NLopt.jl docs for details. Default is 0.0\nxtol_abs : absolute tolerance on optimization parameters. See NLopt.jl docs for details. Default is 0.0\nfit_alg : fitting algorithm. See NLopt.jl docs for details. Default is :LN_NELDERMEAD\nmaxeval : maximum number of function evaluations. See NLopt.jl docs for details. Default is 1e4\nmaxtime : maximum optimization time (in seconds). See NLopt.jl docs for details. Default is 0\nlbounds : lower parameters bounds. See NLopt.jl docs for details. Default is fill(0.0, length(parameters_fitted))\nubounds : upper parameters bounds. See NLopt.jl docs for details. Default is fill(Inf, length(parameters_fitted))\nscale   : scale of the parameters (supports :lin, :direct, :log, :log10) to be used during fitting. Default is fill(:lin, length(parameters_fitted)).             :direct value is a synonym of :lin.\nprogress : progress mode display. One of three values: :silent, :minimal, :full. Default is :minimal\nkwargs... : other solver related arguments supported by SciMLBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.heta-Tuple{}","page":"API","title":"HetaSimulator.heta","text":"heta(;version::Bool=false, help::Bool=false)\n\nRun heta command in console.\n\nArguments:\n\nversion: true if only heta-compiler version  is required\nhelp: true if CLI help wanted\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.heta_build-Tuple{AbstractString}","page":"API","title":"HetaSimulator.heta_build","text":"heta_build(\n  target_dir::AbstractString;\n  declaration::String = \"platform\",\n  units_check::Bool = false,\n  log_mode::String = \"error\",\n  debug::Bool = false\n  dist_dir::String = \"dist\",\n  meta_dir::String = \"meta\",\n  source::String = \"index.heta\",\n  type::String = \"heta\"\n  export::String = nothing\n)\n\nBuilds the models from Heta-based platform\n\nSee heta comiler docs for details: https://hetalang.github.io/#/heta-compiler/cli-references?id=running-build-with-cli-options\n\nArguments:\n\ntarget_dir : path to a Heta platform directory\ndeclaration : path to declaration file. Default is \"platform\"\nunits_check : if set to true units will be checked for the consistancy\nlog_mode : log mode. Default is \"error\"\ndebug : turn on debug mode. Default is false\ndist_dir : directory path, where to write distributives to. Default is \"dist\"\nmeta_dir : meta directory path. Default is \"meta\"\nsource : path to the main heta module. Default is \"index.heta\"\ntype : type of the source file. Default is \"heta\"\nexport : export the model to the specified format: Julia,JSON, {format:SBML,version:L3V1},JSON\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.heta_help-Tuple{String}","page":"API","title":"HetaSimulator.heta_help","text":"heta_help(command::String)\n\nDisplay help for heta-compiler CLI\n\nArguments:\n\ncommand: command to display\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.heta_init-Tuple{String}","page":"API","title":"HetaSimulator.heta_init","text":"heta_init(dir::String; force::Bool=false, silent::Bool=false)\n\nRun initialization of the platform\n\nArgument:\n\ndir: platform directory\nforce: if true then replace files and directories\nsilent: if true use default options without prompt\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.heta_version-Tuple{}","page":"API","title":"HetaSimulator.heta_version","text":"heta_version()\n\nDisplay heta-compiler version\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.load_jlmodel-Tuple{AbstractString}","page":"API","title":"HetaSimulator.load_jlmodel","text":"load_jlmodel(  \n  model_jl::AbstractString; \n  rm_out::Bool = false\n)\n\nLoads prebuild julia model without Platform\n\nArguments:\n\nmodel_jl : path to Julia model file\nrm_out : should the file with Julia model be removed after the model is loaded. Default is false\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.load_jlplatform-Tuple{AbstractString}","page":"API","title":"HetaSimulator.load_jlplatform","text":"load_jlplatform(  \n  model_jl::AbstractString; \n  rm_out::Bool = false\n)\n\nLoads prebuild julia model as part of Platform\n\nArguments:\n\nmodel_jl : path to Julia model file\nrm_out : should the file with Julia model be removed after the model is loaded. Default is false\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.load_platform-Tuple{AbstractString}","page":"API","title":"HetaSimulator.load_platform","text":"load_platform(  \n  target_dir::AbstractString;\n  rm_out::Bool = true, \n  dist_dir::String = \".\",\n  source::String = \"index.heta\",\n  type::String = \"heta\",\n  kwargs...\n)\n\nConverts heta model to Julia and outputs Platform type.\n\nSee heta comiler docs for details: https://hetalang.github.io/#/heta-compiler/cli-references?id=running-build-with-cli-options\n\nArguments:\n\ntarget_dir : path to a Heta platform directory\nrm_out : should the file with Julia model be removed after the model is loaded. Default is true\ndist_dir : directory path, where to write distributives to. Default is \".\"\nkwargs : other arguments supported by heta_build\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc!-Tuple{HetaSimulator.MCResult}","page":"API","title":"HetaSimulator.mc!","text":"mc!(mcres::M; \n  success_status::Vector{Symbol}=[:Success,:Terminated]\n  kwargs...\n) where M <: Union{MCResult, Vector{MCResult}, Vector{Pair}}\n\nRe-run failed Monte-Carlo simulations with single Scenario. Updates MCResult type.\n\nExample: mc!(mcres)\n\nArguments:\n\nmcres : Monte-Carlo result of type MCResult\nsuccess_status : Vector of success statuses. Default is [:Success,:Terminated]\nkwargs : other solver related arguments supported by mc(scenario::Scenario, parameters_variation::Vector, num_iter::Int64)\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Tuple{Union{Vector{Pair{Symbol, Scenario}}, Vector{Scenario}, Platform, Scenario}, DataFrame}","page":"API","title":"HetaSimulator.mc","text":"mc(scenario::Scenario,\n  parameters_variation::DataFrame,\n  num_iter::Int;\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single scenario Scenario. Returns MCResult type.\n\nExample: mc(scn1, DataFrame(k2=rand(3),k3=rand(3)), 1000)\n\nArguments:\n\nscenario : simulation scenario of type Scenario\nparameters_variation : DataFrame with pre-generated parameters.\nnum_iter : number of Monte-Carlo iterations \nkwargs : other solver related arguments supported by mc(scenario::Scenario, parameters_variation::Vector, num_iter::Int64)\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{PP}, Tuple{CP}, Tuple{Vector{CP}, Vector{PP}, Int64}} where {CP<:Pair, PP<:Pair}","page":"API","title":"HetaSimulator.mc","text":"mc(scenario_pairs::Vector{<:Pair},\n  parameters_variation::Vector{<:Pair},\n  num_iter::Int64;\n  verbose=false,\n  alg=DEFAULT_ALG,\n  reltol=DEFAULT_SIMULATION_RELTOL,\n  abstol=DEFAULT_SIMULATION_ABSTOL,\n  parallel_type=EnsembleSerial(),\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single Scenario. Returns Vector{MCResult} type.\n\nExample: mc([:c1=>scn1,:c2=>scn2], [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\nscenario_pairs : vector of pairs containing names and scenarios of type Scenario\nparameters_variation : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nverbose : print iteration progress. Default is false\nprogress_bar : show progress bar. Default is false\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-3\nabstol : relative tolerance. Default is 1e-6\noutput_func : the function determines what is saved from the solution to the output array. Defaults to saving the solution itself\nreduction_func : this function determines how to reduce the data in each batch. Defaults to appending the data from the batches\nparallel_type : parallel setup. See SciML docs for details. Default is no parallelism: EnsembleSerial()\nkwargs : other solver related arguments supported by SciMLBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{P}, Tuple{C}, Tuple{Vector{C}, Vector{P}, Int64}} where {C<:HetaSimulator.AbstractScenario, P<:Pair}","page":"API","title":"HetaSimulator.mc","text":"mc(scenario_pairs::Vector{<:AbstractScenario},\n  parameters_variation::Vector{<:Pair},\n  num_iter::Int64;\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single scenario. Returns Vector{MCResult} type.\n\nExample: mc([scn1,scn2], [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\nscenario_pairs : vector of scenarios of type Scenario\nparameters_variation : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nkwargs : other solver related arguments supported by mc(scenario_pairs::Vector{<:Pair}, parameters_variation::Vector, num_iter::Int64)\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{P}, Tuple{Platform, Vector{P}, Int64}} where P<:Pair","page":"API","title":"HetaSimulator.mc","text":"mc(platform::Platform, \n  parameters_variation::Vector{<:Pair},\n  num_iter::Int64;\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single Scenario. Returns Vector{MCResult} type.\n\nExample: mc(platform, [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\nplatform : platform of Platform type\nparameters_variation : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nkwargs : other solver related arguments supported by mc(scenario_pairs::Vector{<:Pair}, parameters_variation::Vector, num_iter::Int64)\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{P}, Tuple{Scenario, Vector{P}, Int64}} where P<:Pair","page":"API","title":"HetaSimulator.mc","text":"mc(scenario::Scenario,\n  parameters_variation::Vector{<:Pair},\n  num_iter::Int;\n  verbose=false,\n  alg=DEFAULT_ALG,\n  reltol=DEFAULT_SIMULATION_RELTOL,\n  abstol=DEFAULT_SIMULATION_ABSTOL,\n  parallel_type=EnsembleSerial(),\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single Scenario. Returns MCResult type.\n\nExample: mc(scenario, [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\nscenario : simulation scenario of type Scenario\nparameters_variation : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nverbose : print iteration progress. Default is false\nprogress_bar : show progress bar. Default is false\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-3\nabstol : relative tolerance. Default is 1e-6\noutput_func : the function determines what is saved from the solution to the output array. Defaults to saving the solution itself\nreduction_func : this function determines how to reduce the data in each batch. Defaults to appending the data from the batches\nparallel_type : parallel setup. See SciML docs for details. Default is no parallelism: EnsembleSerial()\nkwargs : other solver related arguments supported by SciMLBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.read_mcvecs-Tuple{String}","page":"API","title":"HetaSimulator.read_mcvecs","text":"read_mcvecs(filepath::String)\n\nRead table with pre-generated parameters for Monte-Carlo simulations. Typically used for virtual patients simulations\n\nArguments:\n\nfilepath: path to the file with pre-generated parameters\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.read_measurements","page":"API","title":"HetaSimulator.read_measurements","text":"read_measurements(filepath::String, sheet=1; kwargs...)\n\nReads table file with measurements to DataFrame\n\nArguments:\n\nfilepath : path to table file. Supports \".csv\" and \".xlsx\" files\nsheet : number of sheet in case of \".xlsx\" file. Default is 1\nkwargs... : other arguments supported by CSV.File or XLSX.readtable\n\n\n\n\n\n","category":"function"},{"location":"api/#HetaSimulator.read_parameters-Tuple{String}","page":"API","title":"HetaSimulator.read_parameters","text":"read_parameters(filepath::String; kwargs...)\n\nReads parameters csv file and output DataFrame\n\nArguments:\n\nfilepath : path to valid parameters csv file\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.read_scenarios","page":"API","title":"HetaSimulator.read_scenarios","text":"read_scenarios(filepath::String, sheet=1; kwargs...)\n\nReads table file with scenarios to DataFrame\n\nArguments:\n\nfilepath : path to table file. Supports \".csv\" and \".xlsx\" files\nsheet : number of sheet in case of \".xlsx\" file. Default is 1\nkwargs : other arguments supported by CSV.File or XLSX.readtable\n\n\n\n\n\n","category":"function"},{"location":"api/#HetaSimulator.save_as_heta-Tuple{String, Any}","page":"API","title":"HetaSimulator.save_as_heta","text":"saveasheta(filepath::String, fr::FitResult)\n\nSave fitting results in the Heta-formatted file.\n\nArguments\n\nfilepath : file to save. The \".heta\" extension is usually used.\nfr : fitting results.\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.save_results-Tuple{String, HetaSimulator.AbstractResult}","page":"API","title":"HetaSimulator.save_results","text":"save_results(filepath::String, sim::AbstractResult)\n\nSave results as csv file\n\nArguments:\n\nfilepath: path and name of the file to write to\nsim: simulation results of AbstractResult type\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.sim-Tuple{Platform}","page":"API","title":"HetaSimulator.sim","text":"sim(platform::Platform; \n  scenarios::Union{AbstractVector{Symbol}, AbstractVector{InvertedIndex{Symbol}}, Nothing} = nothing,\n  kwargs...) where {C<:AbstractScenario}\n\nSimulate scenarios included in platform. Returns Vector{Pair}.\n\nExample: sim(platform)\n\nArguments:\n\nplatform : platform of Platform type\nscenarios : Vector containing names of scenarios included in platform. Default value nothing stands for all scenarios in the platform \nkwargs... : other kwargs supported by sim(scenario_pairs::Vector{Pair})\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.sim-Union{Tuple{AbstractVector{C}}, Tuple{C}} where C<:HetaSimulator.AbstractScenario","page":"API","title":"HetaSimulator.sim","text":"sim(scenarios::AbstractVector{C}; kwargs...) where {C<:AbstractScenario}\n\nSimulate multiple scenarios. Returns Vector{Pair}.\n\nExample: sim([scn1, scn2, scn3])\n\nArguments:\n\nscenarios : Vector containing names and scenarios of type Scenario\nkwargs : other kwargs supported by sim(scenario_pairs::Vector{Pair})\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.sim-Union{Tuple{Scenario}, Tuple{P}} where P<:Pair","page":"API","title":"HetaSimulator.sim","text":"sim(scenario::Scenario; \n  parameters::Vector{P}=Pair{Symbol, Float64}[],\n  alg=DEFAULT_ALG, \n  reltol=DEFAULT_SIMULATION_RELTOL,\n  abstol=DEFAULT_SIMULATION_ABSTOL,\n  kwargs...)\n\nSimulate single Scenario. Returns SimResult type.\n\nExample: Scenario(model, (0., 200.); saveat = [0.0, 150.]) |> sim\n\nArguments:\n\nscenario : simulation scenario of type Scenario\nparameters : parameters overwrite both Model and Scenario parameters. Default is empty vector.\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-3\nabstol : relative tolerance. Default is 1e-6\nkwargs... : other solver related arguments supported by SciMLBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.sim-Union{Tuple{Vector{P}}, Tuple{P}} where P<:Pair","page":"API","title":"HetaSimulator.sim","text":"sim(scenario_pairs::Vector{P}; \n  parameters::Vector{Pair{Symbol, Float64}}=Pair{Symbol, Float64}[],\n  alg=DEFAULT_ALG, \n  reltol=DEFAULT_SIMULATION_RELTOL, \n  abstol=DEFAULT_SIMULATION_ABSTOL,\n  parallel_type=EnsembleSerial(),\n  kwargs...) where P<:Pair\n\nSimulate multiple scenarios. Returns Vector{Pair}.\n\nExample: sim([:x => scn1, :y=>scn2, :z=>scn3])\n\nArguments:\n\nscenario_pairs : vector of pairs containing names and scenarios of type Scenario\nparameters : parameters, which overwrite both Model and Scenario parameters. Default is empty vector.\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-3\nabstol : relative tolerance. Default is 1e-6\nparallel_type : type of multiple simulations parallelism. Default is no parallelism. See SciML docs for details\nkwargs... : other solver related arguments supported by SciMLBase.solve. See SciML docs for de     #updateinitvalues(scni.prob, scni.initfunc, parametersnt) tails\n\n\n\n\n\n","category":"method"},{"location":"tutorial/gsa/#Global-Sensitivity-Analysis","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"","category":"section"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"This tutorial describes methods of Global Sensitivity Analysis (GSA) by using HetaSimulator together with GlobalSensitivity package. The content is based on GlobalSensitivity tutorial. Current version of the tutorial is based on HetaSimulator v0.7.0 and GlobalSensitivity v2.7.0","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"In order to run GSA we need to install GlobalSensitivity package in addition to HetaSimulator and Plots. We will also use QuasiMonteCarlo package for sampling.","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"julia> ]\n(gsa) pkg> add GlobalSensitivity QuasiMonteCarlo","category":"page"},{"location":"tutorial/gsa/#Working-example","page":"Global Sensitivity Analysis","title":"Working example","text":"","category":"section"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"All GSA methods are illustrated by one-compartment Ethanol PK Model.  Download the following files to your working directory:","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"wget https://raw.githubusercontent.com/insysbio/alco/main/src/index.heta\nwget https://raw.githubusercontent.com/insysbio/alco/main/src/mod1.heta\nwget https://raw.githubusercontent.com/insysbio/alco/main/src/mod2.heta\nwget https://raw.githubusercontent.com/insysbio/alco/main/src/mod3.heta\nwget https://raw.githubusercontent.com/insysbio/alco/main/src/qsp-units.heta\nwget https://raw.githubusercontent.com/insysbio/alco/main/data-mumenthaler-2000/scenarios.csv","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"Load the platform into the Julia environment. You should provide the path to the index.heta file as the first argument to load_platform. We will use the same working directory where the index.heta file is located.","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"using HetaSimulator, GlobalSensitivity, Plots\n\np = load_platform(\".\")\n\nscen = read_scenarios(\"scenarios.csv\")\nadd_scenarios!(p, scen)","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"According to Model1 scenario we will study the sensitivity of BrAC observable (breath alcohol concentration) to four parameters (:k_a, :Vd, :Vmax, :Km).","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"scn1 = scenarios(p)[:scn1]\ns = sim(scn1)\nplot(s, vars=[:BrAC])","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"(Image: plot-default)","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"To run GSA we need to define a function which takes in parameter values and outputs an observable. The observable can be any function of timeseries (e.g. mean, maximum, minimum, AUC, value at a certain timepoint). We can also define vector output to study sensitivity of different observables or an observed variable at different timepoints.","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"Let's have a look at some examples of such functions. ","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"pnames = [:k_a, :Vd, :Vmax, :Km]\nnump = length(pnames)\n\n# Concentration value at t=8 hours\nfunction C8hours_func(params)\n  sol = sim(scn1; parameters= pnames .=> params)\n  return sol(8.0,:BrAC)\nend\n\n# Concentration values at two timepoints t=4,8 hours\nfunction C8hours_func(params)\n  sol = sim(scn1; parameters= pnames .=> params)\n  return sol.([4.0, 8.0],:BrAC)\nend","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"In this tutorial we will observe maximum alcohol concentration in the compartment.","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"function Cmax_func(params)\n  sol = sim(scn1; parameters= pnames .=> params)\n  brac = sol.(times(sol),:BrAC)\n  return maximum(brac)\nend","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"Now we define parameters bounds based mean/sd values reported in the original paper Ethanol Pharmacokinetics in White Women. Parameters bound imply Uniform distribution. Usage of other distributions (Normal, LogNormal, etc) for parameters sampling will be demonstrated later in the tutorial.","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"bounds = [[0.01, 0.5], [0.01, 1.], [0.01, 0.5], [0.01, 5.0]]","category":"page"},{"location":"tutorial/gsa/#GSA-Methods","page":"Global Sensitivity Analysis","title":"GSA Methods","text":"","category":"section"},{"location":"tutorial/gsa/#Regression/Correlation-coefficients-method","page":"Global Sensitivity Analysis","title":"Regression/Correlation coefficients method","text":"","category":"section"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"RegressionGSA method details","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"The least computationally demanding method to estimate global sensitivities is to compute correlation/regression coefficients. This method is based on the assumption, that the output can be approximated by a linear model of parameters (e.g. BrACmax = a1*k_a + a2∗Vd + a3∗Vmax + a4∗Km). This assumption is reasonable if the output is monotonic in each of the input parameters, otherwise the reported coefficients can be missleading. ","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"The number of samples required by the method should be larger than 2^P (where P is the number of input parameters). 2^P is the bare minimum and a reasonable number of samples for a model of four-five parameters is 1000-5000.","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"Usually Standard Regression Coefficients (SRC) and Partial Correlation Coefficients (PCC) are considered.","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"nsamples = 1000\nreg_sens = GlobalSensitivity.gsa(Cmax_func, RegressionGSA(true), bounds, samples = nsamples)\n\np = plot(layout=(2,1), size=(400,600))\nheatmap!(p[1],\n    reg_sens.partial_correlation, fc =cgrad([:blue, :orange]),\n    yticks=false, xticks = (1:nump, String.(pnames)),\n    title = \"Partial correlation\")\n\nheatmap!(p[2],\n    reg_sens.standard_regression,fc =cgrad([:blue, :orange]),\n    yticks=false, xticks = (1:nump, String.(pnames)),\n    title = \"Standard correlation\")\np","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"(Image: plot-regression)","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"(Note!) Regression-based GSA can also be applied to the results of multiple simulations provided to gsa() function as Matrices. See GlobalSensitivity docs. This allows us generate parameters in advance from pre-defined Distributions.","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"# Matrix of input parameters\nX = zeros(length(pnames), nsamples)\nX[1,:] .= rand(LogNormal(-3.08, 0.77), nsamples) # k_a\nX[2,:] .= rand(Uniform(0.01, 1.), nsamples) # Vd\nX[3,:] .= rand(Uniform(0.01, 0.5), nsamples) # Vmax\nX[4,:] .= rand(LogNormal(0.46, 0.49), nsamples) # Km\n\n# output max concentration values\nY = [Cmax_func(X[:, i]) for i in 1:size(X,2)]'\n\nreg_sens = GlobalSensitivity.gsa(X, Y, RegressionGSA(true))","category":"page"},{"location":"tutorial/gsa/#Sobol-(and-eFAST)-method","page":"Global Sensitivity Analysis","title":"Sobol (and eFAST) method","text":"","category":"section"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"Sobol method details","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"Sobol method is the GSA method of variance decomposition based on mathematical result by I.M. Sobol. Variance of the output is decomposed into contributions from each parameter and their interactions. Two indices are used to measure these contributions. The contribution of each parameter is represented by first-order index and the contribution of the parameter together with all its interactions with other parameters is represented by total-order index. ","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"The requirement for the number of samples is the same as for Correlatin/Regression coefficients method: The number of samples required by the method should be larger than 2^P (where P is the number of input parameters).","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"nsamples = 1000\nsobol_sens1 = GlobalSensitivity.gsa(Cmax_func, Sobol(), bounds, samples = nsamples)\n\np = plot(layout=(2,1), size=(400,600), xticks = (1:nump, String.(pnames)))\nbar!(p[1], 1:nump, sobol_sens1.S1, title = \"Sobol First order indeces\", label=false)\nbar!(p[2], 1:nump, sobol_sens1.ST, title = \"Sobol Total order indeces\", label=false)\np","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"(Image: plot-sobol1)","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"(Note 1 !) It is recommended to use low-discrepancy sequence instead of a pure Monte-Carlo to effectively sample the search space . One can choose SobolSample(), LatinHypercubeSample(), HaltonSample() or other quasi-Monte Carlo samplers from QuasiMonteCarlo package. ","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"using QuasiMonteCarlo\n\nlb = [b[1] for b in bounds]\nub = [b[2] for b in bounds]\nsampler = SobolSample()\nA,B = QuasiMonteCarlo.generate_design_matrices(nsamples,lb,ub,sampler)\n\nsobol_sens2 = GlobalSensitivity.gsa(Cmax_func, Sobol(), A, B)","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"(Note 2 !) To ensure the convergence of Sobol indices and choose reasonable sample size it is useful to set different sample sizes and monitor (plot) how the indices' values stabilize with the increase of sample size. ","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"(Note 3 !) As of GlobalSensitivity@v2.7.0 Sobol() implementation supports  Uniform input ranges and not parameters' distributions. If you prefer to input parameters' distributions you can choose eFAST(), which is based on Sobol() method. Please refer to the eFAST docs for detailed example.","category":"page"},{"location":"tutorial/gsa/#Morris-method-(Elementary-effects-method)","page":"Global Sensitivity Analysis","title":"Morris method (Elementary effects method)","text":"","category":"section"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"Morris method details","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"Morris method estimates parameters' contribution to the output be computing individual \"elementary effects\" (EE), which are local sensitivities at different points in the parameters space. The method runs multiple trajectories through the grid of points in parameter space, computes EEs and outputs mean and std of EE per parameter. The sensitivities are calculated per parameter, so the method doesn't take into account interactions between parameters. Morris method doesn't have a strong mathematical foundation (as Sobol method). Due to its simplicity, it is commonly used as a pre-scan method with all the input parameters of interest. Parameters identified as noninfluential can be then fixed to run computationally demanding but more reliable variance-based methods (Sobol(), eFAST())","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"The requirement for the number of samples is the same as for Correlatin/Regression coefficients method: The number of samples required by the method should be larger than 2^P (where P is the number of input parameters).","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"The number of estimated points in the parameter space is controlled by total_num_trajectory and num_trajectory arguments. See Morris method docs for details. ","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"morris_sens = GlobalSensitivity.gsa(Cmax_func, Morris(total_num_trajectory=5000,num_trajectory=600), bounds)\n\nbar(1:nump, morris_sens.means_star[1,:], title = \"Morris method\", label=false)","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"(Image: plot-morris)","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"(Note 1 !) Morris method also outputs std of EE per parameter: morris_sens.variances. High std reported by Morris method can be a marker of parameters interaction or high nonlinearity between the parameters and the output. ","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"(Note 2 !) As in Sobol() method it useful to set different number of trajectories and monitor how the mean values stabilize with the increase of sample size. ","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"(Note 3 !) As of GlobalSensitivity@v2.7.0 Morris() implementation doesn't support generate_design_matrices interface (see Sobol method notes), so only default sampling scheme (Monte-Carlo) can be used.","category":"page"},{"location":"tutorial/gsa/#Parallel-setup","page":"Global Sensitivity Analysis","title":"Parallel setup","text":"","category":"section"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"It is natural to speed-up GSA methods (e.g. Sobol method) by running simulations in parallel. To do so we need to rewrite Cmax_func and use batch keyword argument in the gsa() function.","category":"page"},{"location":"tutorial/gsa/","page":"Global Sensitivity Analysis","title":"Global Sensitivity Analysis","text":"function Cmax_batch_func(params_batch)\n    batch_size = size(params_batch,2)\n    sol = mc(scn1, pnames .=> [params_batch[i,:] for i in eachindex(pnames)], batch_size; parallel_type=EnsembleDistributed())\n    \n    out = zeros(batch_size)\n    for i in eachindex(out)\n        brac = sol[i].(times(sol[i]),:BrAC)\n        out[i] = maximum(brac)\n    end\n    return out\n  end\n\n  sobol_sens = GlobalSensitivity.gsa(Cmax_batch_func, Sobol(), A, B, batch=true)","category":"page"},{"location":"basics/distributed/#Parallel-simulations","page":"Parallel simulations","title":"Parallel simulations","text":"","category":"section"},{"location":"basics/distributed/","page":"Parallel simulations","title":"Parallel simulations","text":"HetaSimulator supports parallel simulations on a single machine and in a distributed (cluster) environment. It can be achieved by setting up Julia workers. Distributed package can be used to start workers on a local machine and ClusterManagers package supports a number of job queue systems (SGE, PBS, HTCondor, etc). In the following examples we will use Distributed package to start workers. HetaSimulator implementation of parallel simulations relies on SciML Ensemble Simulations features and inherits EnsembleAlgorithms choice. Parallelization algorithm is defined by parallel_type keyword argument. Currently it supports the following options:","category":"page"},{"location":"basics/distributed/","page":"Parallel simulations","title":"Parallel simulations","text":"EnsembleSerial() - No parallelism. The default. \nEnsembleThreads() - This uses multithreading. It's local (single computer, shared memory) parallelism only.\nEnsembleDistributed() - Uses pmap internally. It will use as many processors as you have Julia processes.","category":"page"},{"location":"basics/distributed/#Parallelization-types","page":"Parallel simulations","title":"Parallelization types","text":"","category":"section"},{"location":"basics/distributed/#Simulating-Scenarios-in-Parallel","page":"Parallel simulations","title":"Simulating Scenarios in Parallel","text":"","category":"section"},{"location":"basics/distributed/","page":"Parallel simulations","title":"Parallel simulations","text":"Assuming we have loaded a number of Scenarios: scn1, scn2, scn3 we parallelize simulation or fitting procedures. ","category":"page"},{"location":"basics/distributed/","page":"Parallel simulations","title":"Parallel simulations","text":"using Distributed\naddprocs(2)\n@everywhere using HetaSimulator\n\ns = sim([scn1, scn2, scn3], parallel_type=EnsembleDistributed())\nf = fit([scn1, scn2, scn3], [:k1=>0.1,:k2=>0.2,:k3=>0.3], parallel_type=EnsembleDistributed())","category":"page"},{"location":"basics/distributed/#Parallel-Monte-Carlo-Simulations","page":"Parallel simulations","title":"Parallel Monte Carlo Simulations","text":"","category":"section"},{"location":"basics/distributed/","page":"Parallel simulations","title":"Parallel simulations","text":"We can run parallel Monte-Carlo (Ensemble) simulations with parameters taken from distributions or from a pre-generated DataFrame. Parallel setup can work both with parameters vectors and scenarios.  Let's assume we have loaded a number of Scenarios: scn1, scn2, scn3 and a DataFrame df with parameters vectors (as rows).","category":"page"},{"location":"basics/distributed/","page":"Parallel simulations","title":"Parallel simulations","text":"using Distributed\naddprocs(2)\n@everywhere using HetaSimulator\n\ns1 = mc(scn1, df, 150, parallel_type=EnsembleDistributed())\ns2 = mc([scn1, scn2, scn3], [:k2=>Normal(1e-3,1e-4), :k3=>Normal(1e-4,1e-5)], 150, parallel_type=EnsembleDistributed())","category":"page"},{"location":"tutorial/sim/#Scenario.-Simulation","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"","category":"section"},{"location":"tutorial/sim/#Working-example","page":"Scenario. Simulation","title":"Working example","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"As an example we will use a simple two-compartment pharmacokinetic model stored in a single .heta file. It is expected that the model code will be placed into \"index.heta\" file located in the working directory.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The heta model file can be downloaded here: index.heta","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"// Compartments\nVol0 @Compartment .= 1;\nVol1 @Compartment .= 6.3;\nVol2 @Compartment .= 10.6;\n\n// Species\nA0 @Species {compartment: Vol0, isAmount: true, output: true} .= 0;\nC1 @Species {compartment: Vol1, output: true} .= 0;\nC2 @Species {compartment: Vol2, output: true} .= 0;\n\n// Reactions\nv_abs @Reaction {actors: A0 = C1} := kabs * A0;\nv_el @Reaction {actors: C1 =} := Vol1 * (kel * C1); // Vol1 * (kmax * C1 / (Km + C1));\nv_distr @Reaction {actors: C1 = C2} := Q * (C1 - C2);\n\n// Parameters\ndose @Const = 20;\nkabs @Const = 20;\nkel @Const = 0.5;\nQ @Const = 1.0;\n\n// single dose event\nsw1 @TimeSwitcher {start: 0};\nA0 [sw1]= dose;\n\n// multiple dose event, default off\nsw2 @TimeSwitcher {start: 0, period: 24, active: false};\nA0 [sw2]= dose;","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The modeling platform includes only one namespace nameless which is the default one. After loading the model into Julia a single Model with id :nameless is available.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"using HetaSimulator, Plots\n\n# create Platform from the project files\n# \"index.heta\" file inside is the default entry point\np = load_platform(\".\")","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"No declaration file, running with defaults...\n[info] Builder initialized in directory \"Y:\\HetaSimulator.jl\\docs\\src\\tutorial\\sim-files\".\n[info] Compilation of module \"index.heta\" of type \"heta\"...\n[info] Reading module of type \"heta\" from file \"Y:\\HetaSimulator.jl\\docs\\src\\tutorial\\sim-files\\index.heta\"...\n[info] Setting references in elements, total length 52\n[info] Checking for circular references in Records.\n[warn] Units checking skipped. To turn it on set \"unitsCheck: true\" in declaration.\n[info] Checking unit's terms.\n[warn] \"Julia only\" mode\n[info] Exporting to \"Y:\\HetaSimulator.jl\\docs\\src\\tutorial\\sim-files\\_julia\" of format \"Julia\"...\nCompilation OK!\nLoading platform... OK!\nPlatform with 1 model(s), 0 scenario(s), 0 measurement(s)\n   Models: nameless\n   Scenarios: ","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# get the default model\nmodel = models(p)[:nameless]","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Model contains 4 constant(s), 9 record(s), 2 switcher(s).\n   Constants (model-level parameters): dose, kabs, kel, Q\n   Records (observables): Vol0, Vol1, Vol2, A0, C1, C2, v_abs, v_el, v_distr\n   Switchers (events): sw1, sw2","category":"page"},{"location":"tutorial/sim/#Creating-scenarios","page":"Scenario. Simulation","title":"Creating scenarios","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Scenario in HetaSimulator is a type, which stores a model together with simulation settings like time-range, output variables, parameters values, active or inactive events, etc.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The scenario-based approach is used to store pre-defined model's options: dose values, experimental measurements, data saving options, initial values etc., which can be applied to one or multiple models. The Scenario also stores Measurement points which are used for parameters estimation and visualization.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Scenario is created from default options passed from the model and user defined options coming from tabular inputs or set manually in the code.","category":"page"},{"location":"tutorial/sim/#Manual-creation-of-Scenario","page":"Scenario. Simulation","title":"Manual creation of Scenario","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Scenario objects can be created directly in Julia code.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"This code will create a Scenario for simulating the default model in time range from 0 to 10. Other options will be taken from the default :nameless model:","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"output records (observables) will be taken from Records marked with {output: true} in heta code.\nall switchers (events) will be active if {active: true} is set in heta code.\nconstant (model-level parameters) values will be the same as stated in the heta file.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# minimal scenario\nscenario0 = Scenario(model, (0, 10))","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Scenario for tspan=(0.0, 10.0)\n   Time range (tspan): (0.0, 10.0) \n   Parameters: dose, kabs, kel, Q\n   Number of measurement points: 0","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The results of simulation can be visualized with plot.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"res0 = sim(scenario0)\nplot(res0)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"(Image: fig01)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"We can also update some of the model default options in Scenario. In the next example we update the simulation conditions stored in the Scenario:","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Update the value of parameter dose = 100.\nUse multiple-dose event sw2 instead of a single dose.\nUpdate simulation time span to (0, 1000).\nOutput all species: C1, C2, and variable v_el.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The Scenario can be created with the following code:","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# creating scenario\nscenario1 = Scenario(\n    model,\n    (0.,50.);\n    parameters = [:dose=>100.],\n    observables = [:C1, :C2, :v_el]\n)\nres1 = sim(scenario1)\nplot(res1)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"(Image: fig02)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"To read more about available options see API docs for Scenario function.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"It is necessary to mention that scenario0 and scenario1 are not automatically loaded to the Platform p. To add them into p one can use the following syntax.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# push all into `scenarios` dictionary\nadd_scenarios!(p, [:scn0 => scenario0, :scn1 => scenario1])","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"where :scn0 and :scn are identifiers of the scenarios.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Now the model includes both of them.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"p","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Platform with 1 model(s), 2 scenario(s), 0 measurement(s)\n   Models: nameless\n   Scenarios: scn0, scn1","category":"page"},{"location":"tutorial/sim/#Import-scenarios-from-CSV-tables","page":"Scenario. Simulation","title":"Import scenarios from CSV tables","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The most simple way to populate a platform with scenarios is to create a scenario file in tabular CSV format.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Create file scenarios.csv file inside the working directory with the following content or download it here: scenarios.csv.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"(Image: fig03)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The table can be created in Excel, saved as a CSV file and then loaded with the read_scenarios function as a DataFrame.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"scenarios_df = read_scenarios(\"scenarios.csv\")","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"4×4 DataFrame\n Row │ id           parameters.dose  events_active.sw1  events_active.sw2 \n     │ Symbol       Int64            Bool               Bool\n─────┼────────────────────────────────────────────────────────────────────\n   1 │ dose_1                     1               true              false\n   2 │ dose_10                   10               true              false\n   3 │ dose_100                 100               true              false\n   4 │ multiple_15               15              false               true","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The function reads the content of CSV file, checks if all the components are present in the model and stores the content in scenarios_df variable of DataFrame type. CSV files can be created with any other tool. User can also load tables from XLSX files using the same syntax.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The DataFrame describing a Scenario should be loaded into the Platform object.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"add_scenarios!(p, scenarios_df)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"As we can see all 4 scenarios from the table have been added.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"p","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Platform with 1 model(s), 6 scenario(s), 0 measurement(s)       \n   Models: nameless\n   Scenarios: scn0, scn1, dose_1, dose_10, dose_100, multiple_15","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The particular scenario loaded directly into Platform can be obtained using the following syntax.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"scenario2 = scenarios(p)[:dose_1]","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Scenario for tspan=(0.0, 50.0)\n   Time range (tspan): (0.0, 50.0)\n   Parameters: dose, kabs, kel, Q\n   Number of measurement points: 0","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"See more about scenario tables in tabular CSV format.","category":"page"},{"location":"tutorial/sim/#Single-scenario-simulations","page":"Scenario. Simulation","title":"Single scenario simulations","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The base sim method is applied to a Scenario object. This object can be created directly using Scenario constructor or taken from the Platform object.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The result of sim function execution is the solution of the relevant ODE system with parameters (1) stored as defaults in the Model, (2) overwritten in the Scenario object and (3) overwritten by passing parameters keyword arguments to sim function. ","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"res2 = sim(scenario2)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"315x3 SimResult with status :Success.\n    Solution status: Success\n    Time points (times): 0.0, 0.0, 0.0, 4.999950000250002e-7, 5.499945000275002e-6, 5.549944500277502e-5, 0.0005554944450277752, 0.0031405418644452152, 0.007928302918050478, 0.014985582147596817, ...\n    Observables (outputs): C1, C2, v_el\n    Parameters:","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"sim method applied to a single Scenario returns an object of HetaSimulator.SimResult type.  The method supports additional keyword arguments which can set the integration method, solver options, etc. For more information see sim","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The results can be visualized using plot function. ","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# plot all\nplot(res2)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"(Image: fig04)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The figure displays all simulated points and all output variables declared in the observables of the scenario. One can select the observables to display. One can use the additional yscale, ylim and other Plots keyword arguments to change how the results are displayed. ","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# plot C1, C2\nplot(res2, vars = [:C1, :C2])","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"(Image: fig05)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The results can be transformed into a DataFrame object for further analysis and saving.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# for all observables\nres_df = DataFrame(res1)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"315×5 DataFrame\n Row │ t             C1           C2           v_el          scope  \n     │ Float64       Float64      Float64      Float64       Symbol \n─────┼──────────────────────────────────────────────────────────────\n   1 │  0.0          0.0          0.0           0.0          start_\n   2 │  0.0          0.0          0.0           0.0          ode_\n   3 │  0.0          0.0          0.0           0.0          sw2\n   4 │  4.99995e-7   0.000158728  3.74355e-12   0.000499992  ode_\n  ⋮  │      ⋮             ⋮            ⋮            ⋮          ⋮\n 312 │ 49.4347       6.63602      1.77171      20.9035       ode_\n 313 │ 49.6571       5.79124      1.86371      18.2424       ode_\n 314 │ 49.8827       5.05502      1.93842      15.9233       ode_\n 315 │ 50.0          4.71407      1.97083      14.8493       ode_\n                                                    307 rows omitted","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"As in plot method one can select what observables to put into the DataFrame by the optional vars argument.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# for C1, C2\nres_df = DataFrame(res1, vars = [:C1, :C2])","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"To save the table the CSV format can be used.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"using CSV\n\n# save to file\nCSV.write(\"export_df.csv\", res_df)","category":"page"},{"location":"tutorial/sim/#Multiple-scenario-simulations","page":"Scenario. Simulation","title":"Multiple scenario simulations","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"One can simulate multiple scenarios simultaneously.  sim can be applied to all or selected Scenarios in a platform.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# all scenarios\nres_mult = sim(p)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Progress: 100%[==================================================] Time: 0:00:01        \n6-element Vector{Pair{Symbol, SimResult}}\n    :scn0 => 84x3 SimResult with status :Success.\n    :scn1 => 315x3 SimResult with status :Success.\n    :dose_1 => 81x3 SimResult with status :Success.\n    :dose_10 => 100x3 SimResult with status :Success.\n    :dose_100 => 124x3 SimResult with status :Success.\n    :multiple_15 => 227x3 SimResult with status :Success.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The result of sim method applied to a platform will be a Vector{Pair{Symbol,SimResult}} type with symbolic scenario identifiers corresponding to simulation results. To obtain the particular simulation result one can use numerical or symbol indexing.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# to get 2d result\nres_mult[2][2]","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"315x3 SimResult with status :Success.\n    Solution status: Success\n    Time points (times): 0.0, 0.0, 0.0, 4.999950000250002e-7, 5.499945000275002e-6, 5.549944500277502e-5, 0.0005554944450277752, 0.0031405418644452152, 0.007928302918050478, 0.014985582147596817, ...\n    Observables (outputs): C1, C2, v_el\n    Parameters: ","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# get results for multiple_15 Scenario\nres_mult[:multiple_15][2]","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"227x3 SimResult with status :Success.\n    Solution status: Success\n    Time points (times): 0.0, 0.0, 0.0, 3.3331111185190124e-6, 3.666422230370913e-5, 0.00036997533415561033, 0.003174221862346261, 0.008946283182509052, 0.01702472658406691, 0.028016975164716275, ...\n    Observables (outputs): A0, C1, C2\n    Parameters: ","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"To simulate only the selected scenarios from the Platform one can use scenarios argument.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"res_selected = sim(p, scenarios = [:dose_1, :dose_10, :dose_100])","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The results of multiple simulations can be visualized all together using plot method.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# plot everything\nplot(res_selected, yscale=:log10, ylims=(1e-3,1e2))","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"(Image: fig07)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The generated figure includes all scenarios titled with scenario identifier. The additional keyword arguments as vars and plot options can be used in the plot function as well.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"sim results for multiple scenarios can be converted into DataFrame.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# convert everything into DataFrame\nres_selected_df = DataFrame(res_selected)\nCSV.write(\"res_selected_df.csv\", res_selected_df)","category":"page"},{"location":"tutorial/sim/#Final-remarks","page":"Scenario. Simulation","title":"Final remarks","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"A typical workflow for simulation of a modeling platforms in HetaSimulator.jl consists of the following steps: ","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Load heta-based models into the Platform object; \nCreate scenarios using Scenario constructor or from CSV tables and add them to the Platform; \nRun sim method with the whole platform or with the selected scenarios; \nDisplay results with plot or convert them into DataFrame.\nModel and Scenario objects are \"immutable\". This means a user cannot update their parts directly. User can only create new Scenarios and apply add_scenarios! method using the same identifiers. This replaces the previously created scenarios with the same ids.\nTo update a model structure one should include changes into the heta model code and repeat all the steps.\nIn many cased Julia chain syntax can be useful. The following code creates the default scenario, runs simulation and plots the result - all in one line.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Scenario(models(p)[:nameless], (0, 100)) |> sim |> plot","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"plot method for SimResult gives only the default visualization. For more complicated visualization one can transform results into a DataFrame and plot them manually.\nFor multiple simulations of the Monte-Carlo type one should use mc method instead of sim method. Scenario is not the same as single simulation task in Monte-Carlo.","category":"page"},{"location":"table-formats/measurement/#measurement","page":"Measurements tables","title":"Measurements tables","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Measurements tables are CSV or XLSX files which store Measurement data in tabular format. The content of the tables can be loaded into Julia environment as a DataFrame and added to the Platform object.","category":"page"},{"location":"table-formats/measurement/#Format","page":"Measurements tables","title":"Format","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"The structure of tables corresponds to Measurements type properties. The first row is the header. The sequence of columns may vary.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"scenario : a String value with Scenario identifier.\nt : a Float64 value equal to the time point of measured value\nmeasurement : a Float64 measured value\nscope (optional): a String value which states a scope of simulation. Possible values are ode_ or event identifier if the value was saved after applying the event. Default value is ode_\nprob.<id> : a set of options to characterize the probability distribution. The supported ids depend on the distribution type. For normal and lognormal distributions the available headers are:\nprob.type (optional) : a String declaring probability type. normal is default.\nprob.mean : Float64 value or String representing @Const or @Record id in the model. The value represents mean parameter in normal distribution.\nprob.sigma : Float64 value or String representing @Const or @Record id in the model. The value represents sigma (standard deviation) parameter in normal distribution.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Currently two probability types are available: normal, lognormal. This distributions can be used for the relevant types of error models.","category":"page"},{"location":"table-formats/measurement/#prob.type:-normal","page":"Measurements tables","title":"prob.type: normal","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Each row in the table will be transformed into the corresponding component of log-likelihood function -2ln(L).","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Lambda = sum_i left( ln(probsigma_i^2) + frac(probmean_i - measurement_i)^2probsigma_i^2right)","category":"page"},{"location":"table-formats/measurement/#prob.type:-lognormal","page":"Measurements tables","title":"prob.type: lognormal","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Each row in the table will be transformed into the corresponding component of log-likelihood function -2ln(L).","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Lambda = sum_i left( ln(probsigma_i^2) + frac(ln(probmean_i) - ln(measurement_i))^2probsigma_i^2right)","category":"page"},{"location":"table-formats/measurement/#Loading-to-Platform","page":"Measurements tables","title":"Loading to Platform","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Measurement table can be loaded into Julia environment as a DataFrame using HetaSimulator.read_measurements method. This method reads the file, checks the content and formats the data to be used inside the Platform object.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"measurements = read_measurements(\"measurements.csv\")\n\n32×7 DataFrame\n Row │ t        measurement  scope   prob.mean  prob.sigma  scenario  prob.type \n     │ Float64  Float64      Symbol  String     Float64     Symbol     Symbol    \n─────┼───────────────────────────────────────────────────────────────────────────\n   1 │     2.0     8.46154   ode_    a                1.0   dataone    normal\n   2 │     4.0     7.33333   ode_    a                1.2   dataone    normal\n   3 │     6.0     6.47059   ode_    a                2.2   dataone    normal\n  ⋮  │    ⋮          ⋮         ⋮         ⋮          ⋮           ⋮          ⋮","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"The data frame can be loaded into platform using the HetaSimulator.add_measurements! method.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"add_measurements!(platform, measurements)","category":"page"},{"location":"table-formats/measurement/#Example","page":"Measurements tables","title":"Example","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Loading file measurements.csv with the following content.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"t measurement scope prob.mean prob.sigma scenario\n2 8.461539334 ode_ a 1 dataone\n4 7.333333812 ode_ a 1.2 dataone\n6 6.470591567 ode_ a 2.2 dataone","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Read as DataFrame object.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"measurements = read_measurements(\"./measurements.csv\")","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Add all measurements to Platform","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"add_measurements!(platform, measurements)","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"As a result the Platform will contain three measurements.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"These operations are equivalent to manually created Measurement objects.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"# dataone = Scenario(...)\n\nm1 = NormalMeasurementPoint(2, 8.461539334, :ode, :a, 1)\nm2 = NormalMeasurementPoint(4, 7.333333812, :ode, :a, 1.2)\nm3 = NormalMeasurementPoint(6, 6.470591567, :ode, :a, 2.2)\n\npush!(dataone.measurements, m1)\npush!(dataone.measurements, m2)\npush!(dataone.measurements, m3)","category":"page"},{"location":"basics/overview/#Quick-start","page":"Quick start","title":"Quick start","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The general HetaSimulator workflow is:","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Write a model (modeling platform) in Heta format\nLoad the platform into Julia environment\nCreate simulation conditions by adding scenarios\nSimulate the model and estimate the parameters with: sim, mc, fit\nAnalyze the results","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The particular workflow may be iterative, i.e. the model can be re-simulated multiple times with new parameters values or structural updates. ","category":"page"},{"location":"basics/overview/#Writing-model-in-the-Heta-format","page":"Quick start","title":"Writing model in the Heta format","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Heta is a modeling language for quantitative systems pharmacology (QSP) and systems biology (SB). It is a DSL (domain-specific language) describing dynamic model or multiple models in process-description format. Heta compiler converts it into variety of formats including Julia code, which can be loaded to Julia/HetaSimulator environment.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"HetaSimulator supports all features of the Heta language. One can organize modeling project with re-used modules (files), include any number of models into a single platform with the namespaces mechanism. The platform can use the declaration file platform.yml or can be loaded directly from the heta file.  All Heta modules: Heta code, tables, SBML and JSON can be loaded as a modeling platform and compiled into ODE-based mathematical representation.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To read more about Heta-based modeling platforms and Heta compiler visit the homepage https://hetalang.github.io/#/.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"As an example we will use a simple pharmacokinetic model stored in single .heta file. It is expected that the model code will be placed into \"index.heta\" file located in a directory my_example or something like that.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"// Compartments\nVol0 @Compartment .= 1;\nVol1 @Compartment .= 6.3;\nVol2 @Compartment .= 10.6;\n\n// Species\nA0 @Species {compartment: Vol0, isAmount: true, output: true} .= 0;\nC1 @Species {compartment: Vol1, output: true} .= 0;\nC2 @Species {compartment: Vol2, output: true} .= 0;\n\n// Reactions\nv_abs @Reaction {actors: A0 = C1} := kabs * A0;\nv_el @Reaction {actors: C1 =} := Vol1 * (kel * C1); // Vol1 * (kmax * C1 / (Km + C1));\nv_distr @Reaction {actors: C1 = C2} := Q * (C1 - C2);\n\n// Parameters\ndose @Const = 20;\nkabs @Const = 20;\nkel @Const = 0.5;\nQ @Const = 1.0;\n\n// single dose event\nsw1 @TimeSwitcher {start: 0};\nA0 [sw1]= dose;\n\n// multiple dose event, default off\nsw2 @TimeSwitcher {start: 0, period: 24, active: false};\nA0 [sw2]= dose;","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The model describes a typical two-compartment model with single or multiple dose depending on which event is active. Take a note that the component of the model is create without any namespace statement. This means they have the default namespace attribute nameless. This code is equivalent to the following system of ODE.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"beginaligned\nfracddtA_0 = - v_abs\nfracddt(C_1 cdot Vol_1) = v_abs - v_el - v_distr\nfracddt(C_2 cdot Vol_2) = v_distr\n\nA_0(0) = 0\nC_1(0) = 0\nC_2(0) = 0\nv_abs(t) = kabs cdot A_0\nv_el(t) = Vol_1 cdot (kel cdot C_1)\nv_distr(t) = Q cdot (C_1 - C_2)\nendaligned\n\ntextevent at  t = 0\n\nA_0 = dose","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Where parameters are","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"beginaligned\ndose = 20\nkabs = 10\nkel = 02\nQ  = 32\nVol_1 = 63\nVol_2 = 106\nendaligned","category":"page"},{"location":"basics/overview/#Loading-platform-from-the-Heta-format","page":"Quick start","title":"Loading platform from the Heta format","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"HetaSimulator loads modeling platform into Platform type object that is a container for all models simulation settings and experimental data. When you load a platform from Heta it includes only models converted from concrete namespaces. The scenario storage is empty and will be populated manually or imported from tables.","category":"page"},{"location":"basics/overview/#Loading-with-internal-compiler","page":"Quick start","title":"Loading with internal compiler","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"When HetaSimulator is installed and internal Heta compiler is installed the platform can be loaded with load_platform.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"using HetaSimulator, Plots\n\np = load_platform(\"./my_example\")","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"No declaration file, running with defaults...\n[info] Builder initialized in directory \"Y:\\my_example\".\n[info] Compilation of module \"index.heta\" of type \"heta\"...\n[info] Reading module of type \"heta\" from file \"Y:\\my_example\\index.heta\"...\n[info] Setting references in elements, total length 50\n[info] Checking for circular references in Records.\n[warn] Units checking skipped. To turn it on set \"unitsCheck: true\" in declaration.\n[info] Checking unit's terms.\n[warn] \"Julia only\" mode\n[info] Exporting to \"Y:\\my_example\\_julia\" of format \"Julia\"...\nCompilation OK!\nLoading platform... OK!\n\nPlatform with 1 model(s), 0 scenario(s), 0 measurement(s)\n   Models: nameless\n   Scenarios:    ","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The first argument of load_platform declares the absolute or relative path to the platform directory. If you use another file name (not index.heta) you can declare it with source argument.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"p = load_platform(\"./my_example\", source = \"another_name.heta\")","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"You can also load the model from another formats like SBML.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"p = load_platform(\"./another_project\", source = \"model.xml\", type = \"SBML\")","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The list of additional arguments is approximately the same as CLI options heta build command in Heta compiler. For the full arguments list see load_platform references.","category":"page"},{"location":"basics/overview/#Loading-pre-compiled-platform","page":"Quick start","title":"Loading pre-compiled platform","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Alternatively you can use files generated with stand-alone Heta compiler.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To do so the model code should be build with --export Julia options.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"...\nsw2 @TimeSwitcher {start: 0, period: 24, active: false};\nA0 [sw2]= dose;","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Running the code with the console command heta build --export Julia my_project produces the file my_example/dist/julia/model.jl which can be loaded with load_jlplatform method.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"p = load_jlplatform(\"./my_example/dist/julia/model.jl\")","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Loading platform... OK!\nPlatform with 1 model(s), 0 scenario(s), 0 measurement(s)\n   Models: nameless\n   Scenarios:   ","category":"page"},{"location":"basics/overview/#Creating-scenarios","page":"Quick start","title":"Creating scenarios","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Scenario in HetaSimulator is an object which stores a model together with additional settings and options. It sets the saving time point, time span, specific parameters' values, active and inactive events, etc.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The scenario-based approach is used to store pre-defined model's options: dose values, experimental scenarios, saving options, initial values and other settings, which can be applied for one or multiple models. The Scenario also stores Measurement points which are used for parameters estimation and visualization.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Scenario is created from the default or user defined options. It can be imported from Scenario and Measurement tables or set directly in Julia code.","category":"page"},{"location":"basics/overview/#Import-from-CSV-tables","page":"Quick start","title":"Import from CSV tables","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The most simple way to populate a platform with scenarios is to create a separate Scenario file in tabular CSV format.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Create file scenarios.csv file inside my_example with the following content.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"id parameters.dose events_active.sw1 events_active.sw2\ndose_1 1 true false\ndose_10 10 true false\ndose_100 100 true false\nmultiple_15 15 false true","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The table can be loaded with the read_scenarios function.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"scn_df = read_scenarios(\"./my_example/scenarios.csv\")","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"4×4 DataFrame\n Row │ id           parameters.dose  events_active.sw1  events_active.sw2 \n     │ Symbol       Int64            Bool               Bool\n─────┼────────────────────────────────────────────────────────────────────\n   1 │ dose_1                     1               true              false\n   2 │ dose_10                   10               true              false\n   3 │ dose_100                 100               true              false\n   4 │ multiple_15               15              false               true","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The function reads the content of CSV file, checks components present in the model and stores scenario table in scn_df variable of DataFrame format.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The scenario table should be loaded into Platform object.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"add_scenarios!(p, scn_df)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"As we can see all 4 scenarios were added from the table .","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"p\nPlatform with 1 model(s), 4 scenario(s), 0 measurement(s)\n   Models: nameless\n   Scenarios: dose_1, dose_10, dose_100, multiple_15","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To get the particular scenario you can use the following syntax.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"scenario1 = scenarios(p)[:dose_1]\nScenario for tspan=(0.0, 48.0)\n   Time range (tspan): (0.0, 48.0)\n   Parameters: dose, kabs, kel, Q, sigma1, sigma2, sigma3\n   Number of measurement points: 0","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"See more about scenario tables in tabular CSV format.","category":"page"},{"location":"basics/overview/#Import-from-Excel-tables","page":"Quick start","title":"Import from Excel tables","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Instead of using CSV tables one can use XLSX file and load scenario table in the same manner.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"scn_df = read_scenarios(\"./my_example/scenarios.xlsx\")","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"4×4 DataFrame\n Row │ id           parameters.dose  events_active.sw1  events_active.sw2 \n     │ Symbol       Int64            Bool               Bool\n─────┼────────────────────────────────────────────────────────────────────\n   1 │ dose_1                     1               true              false\n   2 │ dose_10                   10               true              false\n   3 │ dose_100                 100               true              false\n   4 │ multiple_15               15              false               true","category":"page"},{"location":"basics/overview/#Manual-creation","page":"Quick start","title":"Manual creation","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Scenario objects can be created and loaded without any tables.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"For example we need to create scenarios with the default model ","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"dose = 100\nevent sw2 is active \nsimulation time is from 0 to 1000\nwe need to observe all species: A0, C1, C2, and all reactions: v_abs, v_el, v_distr","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Scenario can be created with the following code","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"# to get the default model\nmodel = models(p)[:nameless] \n# creating scenario\nnew_scenario = Scenario(\n    model,\n    (0.,1000.);\n    parameters = [:dose=>100.],\n    events_active = [:sw1=>false, :sw1=>true],\n    observables = [:A0, :C1, :C2, :v_abs, :v_el, :v_distr]\n    ) ","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Scenario for tspan=(0.0, 1000.0)\n   Time range (tspan): (0.0, 1000.0)\n   Parameters: dose, kabs, kel, Q, sigma1, sigma2, sigma3\n   Number of measurement points: 0","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"See more options in API docs section for Scenario function.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To load it into Platform container use the following syntax.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"push!(scenarios(p), :multiple_100=>new_scenario)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"where multiple_100 is an identifier of the scenario in the dictionary.","category":"page"},{"location":"basics/overview/#Creating-measurements","page":"Quick start","title":"Creating measurements","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Measurement in HetaSimulator is a representation of experimentally measured values. Each Measurement is associated with some particular scenario, observable variable and fixed time point.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"All measurements in the platform are used to calculate the log-likelihood function when required. Measurements are stored inside Scenario objects.","category":"page"},{"location":"basics/overview/#Import-from-CSV-tables-2","page":"Quick start","title":"Import from CSV tables","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"User can load measurement points from one or several tables which follow table format.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Create measurements.csv file inside my_example with the following structure.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Full file can be downloaded from here: measurements.csv","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"t measurement prob.mean prob.sigma scenario\n0.08333 0.0686283 C1 sigma1 dose_1\n0.08333 0.0684679 C1 sigma1 dose_1\n0.08333 0.0726338 C1 sigma1 dose_1\n0.25 0.119397 C1 sigma1 dose_1\n0.25 0.137662 C1 sigma1 dose_1\n0.25 0.120412 C1 sigma1 dose_1\n0.5 0.131784 C1 sigma1 dose_1\n... ... ... ... ...","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The table can be loaded with the read_measurements function.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"measurements_df = read_measurements(\"./cases/story_3/measurements.csv\")\n90×5 DataFrame\n Row │ t         measurement  prob.mean  prob.sigma  scenario \n     │ Float64   Float64      String     String      Symbol    \n─────┼─────────────────────────────────────────────────────────\n   1 │  0.08333    0.0686283  C1         sigma1      dose_1\n   2 │  0.08333    0.0684679  C1         sigma1      dose_1\n   3 │  0.08333    0.0726338  C1         sigma1      dose_1\n   4 │  0.25       0.119397   C1         sigma1      dose_1\n   5 │  0.25       0.137662   C1         sigma1      dose_1\n  ⋮  │    ⋮           ⋮           ⋮          ⋮           ⋮\n  87 │ 12.0        2.189      C1         sigma3      dose_100\n  88 │ 24.0        0.877502   C1         sigma3      dose_100\n  89 │ 24.0        1.036      C1         sigma3      dose_100\n  90 │ 24.0        0.724612   C1         sigma3      dose_100\n                                                81 rows omitted","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The function reads the content of CSV file, checks components present in the model and stores the measurements in measurements_df variable of DataFrame format.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"add_measurements! can be used to load measurements into Platform container. The function converts all rows into a series of Measurements and links them with scenarios declared in scenario field of the Platform.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"add_measurements!(p, measurements_df)","category":"page"},{"location":"basics/overview/#Import-from-Excel-tables-2","page":"Quick start","title":"Import from Excel tables","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Instead of using CSV tables one can fill the XLSX file and load measurements table in the same manner.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"measurements_df = read_measurements(\"./my_example/measurements.xlsx\")","category":"page"},{"location":"basics/overview/#Solving-problems","page":"Quick start","title":"Solving problems","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Three main problem types that can currently be solved with HetaSimulator:","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Simulation of time-dependence for selected observables for one or several scenarios using sim method.\nMonte-Carlo type simulations that perform repeated simulations based on pre-set parameters distributions with mc method.\nFitting or parameters estimation problem that optimizes the values of the selected model-level parameters (@Const) to reach the minimal discrepancy between simulations and experimental data using fit method.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Each method returns the solution of its specific type: SimResult, MCResult and FitResult or vector types that include them.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The methods can be applied on different levels: Platform, Scenario or Vector of scenarios to select all scenarios in the platform, some of them or the default one. Some important \"target vs method\" variants are shown in the next table.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Target Method Results Comments\nPlatform sim Vector{Pair{Symbol,SimResult}} All or selected list of scenarios in model will be simulated\nScenario sim SimResult Only target scenario will be simulated\nPlatform mc Vector{Pair{Symbol,MCResult}} All or selected list of scenarios in model will be simulated multiple times.\nScenario mc MCResult Target scenario will be simulated multiple times\nPlatform fit FitResult All or selected list of scenarios together their measurements will be used to optimize the parameters.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"This page provides an example of applying these methods to the Platform type only","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"See more information for each method in the tutorials: sim, mc explanations, fit explanations.","category":"page"},{"location":"basics/overview/#Simulation","page":"Quick start","title":"Simulation","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"See more details about sim method in sim method tutorial.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"On the previous steps we have created the platform p and populated it with 4 scenarios and measurement points.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Without additional preparations we can simulate the platform which means running all 4 scenarios and combining all results into one output object.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"res = sim(p)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"5-element Vector{Pair{Symbol, SimResult}}\n    :dose_1 => 80x3 SimResult with status :Success.\n    :dose_10 => 100x3 SimResult with status :Success.\n    :dose_100 => 124x3 SimResult with status :Success.\n    :multiple_15 => 668x3 SimResult with status :Success.\n    :multiple_100 => 163x6 SimResult with status :Success.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The whole solution includes SimResults for relevant Scenario identifiers.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The results can be visualized using default plot method.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"plot(res)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"(Image: sim1)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The whole solution can also be transformed into DataFrame.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"res_df = DataFrame(res)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"1031×6 DataFrame\n  Row │ t             A0            C1           C2           scope   scenario   \n      │ Float64       Float64       Float64      Float64      Symbol  Symbol      \n──────┼───────────────────────────────────────────────────────────────────────────\n    1 │  0.0           0.0          0.0          0.0          ode_    multiple_15\n    2 │  0.0          15.0          0.0          0.0          sw2     multiple_15\n    3 │  3.33311e-6   14.999        0.000158714  2.49537e-11  ode_    multiple_15\n    4 │  3.66642e-5   14.989        0.00174525   3.0187e-9    ode_    multiple_15\n  ⋮   │      ⋮             ⋮             ⋮            ⋮         ⋮          ⋮\n 1029 │ 45.1252       -3.9532e-26   0.0292381    0.108637     ode_    dose_100\n 1030 │ 47.5238        3.29325e-27  0.0247767    0.0920607    ode_    dose_100\n 1031 │ 48.0          -6.75365e-28  0.0239764    0.089087     ode_    dose_100\n                                                                 1024 rows omitted","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"User can work with the solution component by using indexing by component number, like here res[1] or by scenario id res[:dose_1].","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Any component can also be transformed into DataFrame.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"res_df1 = DataFrame(res[1])","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"702×6 DataFrame\n Row │ t              A0            C1           C2           scope   scenario   \n     │ Float64        Float64       Float64      Float64      Symbol  Symbol      \n─────┼────────────────────────────────────────────────────────────────────────────\n   1 │   0.0           0.0          0.0          0.0          ode_    multiple_15\n   2 │   0.0          15.0          0.0          0.0          sw2     multiple_15\n   3 │   3.33311e-6   14.999        0.000158714  2.49537e-11  ode_    multiple_15\n   4 │   3.66642e-5   14.989        0.00174525   3.0187e-9    ode_    multiple_15\n  ⋮  │       ⋮             ⋮             ⋮            ⋮         ⋮          ⋮\n 700 │ 168.0           2.79899e-18  0.0232934    0.0865488    ode_    multiple_15\n 701 │ 168.0           2.79899e-18  0.0232934    0.0865488    ode_    multiple_15\n 702 │ 168.0          15.0          0.0232934    0.0865488    sw2     multiple_15\n                                                                  695 rows omitted","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"A single SimResult can also be selected for visualization.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"plot(res[1])","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"(Image: sim2)","category":"page"},{"location":"basics/overview/#Monte-Carlo","page":"Quick start","title":"Monte-Carlo","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Monte-Carlo method runs simulation many times combining all results into single MCResult object. You should set the distribution of parameters and the number of iterations.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"mc_res = mc(p, [:kabs=>Normal(10.,1e-1), :kel=>Normal(0.2,1e-3)], 1000)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"5-element Vector{Pair{Symbol, MCResult}}\n    :dose_1 => 1000x?x71 MCResult with status :Success x 1000\n    :dose_10 => 1000x?x88 MCResult with status :Success x 1000\n    :dose_100 => 1000x?x155 MCResult with status :Success x 1000\n    :multiple_15 => 1000x?x583 MCResult with status :Success x 1000\n    :multiple_100 => 1000x?x238 MCResult with status :Success x 1000","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To transform all results into DataFrame","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"mc_df = DataFrame(mc_res)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"946000×7 DataFrame\n    Row │ iter   t             A0           C1           C2           scope   scenario   \n        │ Int64  Float64       Float64      Float64      Float64      Symbol  Symbol      \n────────┼─────────────────────────────────────────────────────────────────────────────────\n      1 │     1   0.0           0.0         0.0          0.0          ode_    multiple_15 \n      2 │     1   0.0          15.0         0.0          0.0          sw2     multiple_15\n      3 │     1   6.67001e-6   14.999       0.000158714  4.99357e-11  ode_    multiple_15\n      4 │     1   7.33701e-5   14.989       0.00174525   6.04082e-9   ode_    multiple_15\n      5 │     1   0.000740371  14.8894      0.0175505    6.13689e-7   ode_    multiple_15\n      6 │     1   0.00602741   14.1231      0.139042     3.99353e-5   ode_    multiple_15\n   ⋮    │   ⋮         ⋮             ⋮            ⋮            ⋮         ⋮          ⋮\n 945996 │  1000  46.6664        4.55058e-7  0.247023     0.484307     ode_    dose_100\n 945997 │  1000  47.0172        4.55058e-7  0.243049     0.476516     ode_    dose_100\n 945998 │  1000  47.3681        4.55059e-7  0.239139     0.46885      ode_    dose_100\n 945999 │  1000  47.719         4.55058e-7  0.235292     0.461307     ode_    dose_100\n 946000 │  1000  48.0           1.28404e-7  0.232256     0.455355     ode_    dose_100\n                                                                       945989 rows omitted","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To plot everything use plot","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"plot(mc_res)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"(Image: fig3)","category":"page"},{"location":"basics/overview/#Fitting","page":"Quick start","title":"Fitting","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The following steps are required to run the parameters estimation problem:","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Be sure that measurement points are loaded in a proper way: referred Scenarios exist, the proper error model is chosen.\nIf required add distribution-related noise parameters into the model code, like sigma etc.\nSelect a set of parameters which will be fitted and set initial values for them.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"For the presented example we use normal distribution of measurement error with unknown variance parameters sigma1, sigma2, sigma3 for doses 1, 10 and 100.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"We need to add this unknown parameters into the Heta code and update the initial model:","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"...\nA0 [sw2]= dose;\n\n// parameters for fitting\nsigma1 @Const = 0.1;\nsigma2 @Const = 0.1;\nsigma3 @Const = 0.1;","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Take a note that the model compilation and loading Scenarios  and Measurements should be repeated because p object was rebuild.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"p = load_platform(\"$HetaSimulatorDir/cases/story_3\")\n\nscn_df = read_scenarios(\"$HetaSimulatorDir/cases/story_3/scenarios.csv\")\nadd_scenarios!(p, scn_df)\n\nmeasurements_df = read_measurements(\"$HetaSimulatorDir/cases/story_3/measurements.csv\")\nadd_measurements!(p, measurements_df)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To check simulated vs measured results the standard plot method can be used.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"res0 = sim(p)\nplot(res0, yscale=:log, ylims=(1e-3,1e2))","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"(Image: sim4)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Now let's run fitting.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"to_fit = [\n    :kabs => 8.0,\n    :Q => 4.0,\n    :kel => 2.2,\n    :sigma1 => 0.1,\n    :sigma2 => 0.1,\n    :sigma3 => 0.1,\n]\nfit_res = fit(p, to_fit)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"FitResult with status :XTOL_REACHED\n   Status: XTOL_REACHED\n   Optimal values: [:kabs => 18.868605026704916, :Q => 4.043662480774219, :kel => 0.17104243648378176, :sigma1 => 0.020347955494158528, :sigma2 => 0.31561050699802246, :sigma3 => 0.5716026958426483]\n   OF value: 140.96503722972034\n   OF count: 8612","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To get the list of optimal parameters values we should use optim function.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"optim(fit_res)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"6-element Vector{Pair{Symbol, Float64}}:\n   :kabs => 18.868605026704916\n      :Q => 4.043662480774219\n    :kel => 0.17104243648378176\n :sigma1 => 0.020347955494158528        \n :sigma2 => 0.31561050699802246\n :sigma3 => 0.5716026958426483","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"You can simulate and plot results with the following code.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"res_optim = sim(p, parameters = optim(fit_res))\nplot(res_optim, yscale=:log, ylims=(1e-3,1e2))","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"(Image: sim5)","category":"page"},{"location":"","page":"Home","title":"Home","text":"HetaSimulator is an open-source simulation and parameters estimation (fitting) platform for the Heta modeling language.  The main purpose of the package is to establish the linkage between emerging QSP frameworks and fast computational methods (parallel simulations, automatic differentiation, etc.).","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Heta language is a domain-specific modeling language (DSL) for dynamic models used in quantitative systems pharmacology (QSP) and systems biology (SB). Heta models can be translated into variety of formats like Simbiology, Matlab, mrgsolve, DBSolve and many others.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides the Julia-based simulation engine for Heta-based models and modeling platforms. Users can simulate QSP models in heta format as well as ODE systems in general form using HetaSimulator without additional tools.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main features of the package are","category":"page"},{"location":"","page":"Home","title":"Home","text":"rich capabilities for estimating parameters' values based on experimental datasets\nworking with multiple models including multi-scenarios fitting\nparallel simulations\nstoring data and scenarios in the unified formats\ndatasets and scenarios import from CSV/Excel tables \nfull Heta standard support\nstoring models, scenarios and data in the Platform object for easy management of platform components\nutilizing the features of open-source projects like Julia and SciML ecosystem.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"It is assumed that you have Julia installed.  The latest Julia release can be downloaded from julialang.org","category":"page"},{"location":"","page":"Home","title":"Home","text":"To install or update HetaSimulator run the code below in Julia environment:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\n(@v1.10) pkg> add HetaSimulator","category":"page"},{"location":"","page":"Home","title":"Home","text":"Internally HetaSimulator installs Heta compiler as an artifact. ","category":"page"},{"location":"#Basic-usage","page":"Home","title":"Basic usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Create a model in Heta format or use your Heta-based platform. Here we will use an example model with two species and one reaction.","category":"page"},{"location":"","page":"Home","title":"Home","text":"// index.heta file in directory \"my_project\"\ncomp1 @Compartment .= 1.5;\n\ns1 @Species {compartment: comp1, output: true} .= 12;\ns2 @Species {compartment: comp1, output: true} .= 0;\n\nr1 @Reaction {actors: s1 => s2, output: true} := k1 * s1 * comp1;\n\nk1 @Const = 1e-3;","category":"page"},{"location":"","page":"Home","title":"Home","text":"To read more about Heta Heta specifications","category":"page"},{"location":"","page":"Home","title":"Home","text":"using HetaSimulator, Plots\n\n# set the absolute or relative path to the project directory\nplatform = load_platform(\"./my_project\")\n# wait for the platform compilation...\n\n# get the default Heta model\nmodel = platform.models[:nameless]\n\n# single simulation and plot\nresults = Scenario(model, (0., 1200.)) |> sim\nplot(results)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Plot)","category":"page"},{"location":"","page":"Home","title":"Home","text":"# transform results to data frame\ndf = DataFrame(results)\n...\n9×4 DataFrame\n Row │ t             s1        s2           scope  \n     │ Float64       Float64   Float64      Symbol \n─────┼─────────────────────────────────────────────\n   1 │    0.0555525  11.9993   0.000666611  ode_\n   2 │    0.611077   11.9927   0.00733069   ode_","category":"page"},{"location":"#Architecture","page":"Home","title":"Architecture","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The user of HetaSimulator typically deals with the following three types:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Model - an ODE model, containing rhs, rules, initial parameters and vector of events.\nScenario - scenario representing a specific model's setup for simulations or fitting. This setup can include initial parameters and events, output variables etc. In case of fitting Scenario should also include experimental data. A common usage of Scenario can be model's simulation with different drugs (parameters and events setup). Different Scenario's can be united to run multi-scenarios simulations and fitting.\nPlatform - container for different Models and Scenarios.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The user can perform the following three operations with both Model, Scenario and Platform","category":"page"},{"location":"","page":"Home","title":"Home","text":"sim - run a single or multi-scenarios simulations. \nfit - fit a model to experimental data. \nmc - run Monte-Carlo or virtual patients simulations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See documentation for detailed overview of HetaSimulator types and functions' arguments.","category":"page"},{"location":"#Getting-help","page":"Home","title":"Getting help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Read the docs\nUse Gitter Chatroom.\nUse Issue Tracker","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is distributed under the terms of the MIT License.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copyright 2020-2024, InSysBio LLC","category":"page"},{"location":"#Authors-and-history","page":"Home","title":"Authors and history","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Ivan Borisov\nEvgeny Metelkin","category":"page"}]
}
