#= 
    This code was generated by heta-compiler 
=#
function get_MTKmodel()

  ### Define independent and dependent variables

  @variables t
  __ruleVariables__ = @variables S(t) P(t) r1(t)
  __dynamicVariables__ = @variables _S_(t) _P_(t)

  ### Define potential algebraic variables

  ### Define parameters (constants and statics)
  __constParameters__ = @parameters Vmax Km
  __staticParameters__ = @parameters default_comp

  ### Define an operator for the differentiation w.r.t. time
  __D__ = Differential(t)

  ### ODE Equations ###
  __eqs__ = [
    # extended rules
    S ~ _S_/ default_comp,
    P ~ _P_/ default_comp,
    r1 ~ Vmax * S / (Km + S) * default_comp,

    # ODEs
    __D__(_S_) ~ -r1, # dS/dt
    __D__(_P_) ~ r1, # dP/dt
  ]

  ### Continious events ###

  ### Discrete events ###

  ### Initialization ###

  __constValues__ = [
    Vmax => 0.1,
    Km => 2.5,
  ]

  __init__ = [
    default_comp => 1e+0,
    S => 1e+1,
    P => 0e+0,
    r1 => Vmax * S / (Km + S) * default_comp,
  ]

  __amountsInit__ = [
      _S_ => S * default_comp,
      _P_ => P * default_comp,
  ]

  ### ODESystem definition ###
  __sys__ = ODESystem(__eqs__, t, [__dynamicVariables__; __ruleVariables__], [__constParameters__; __staticParameters__],
    name = :mm,
    discrete_events = [],
    defaults = [__constValues__; __init__; __amountsInit__]
  )

  return structural_simplify(__sys__), __amountsInit__, __constValues__
end

__model__ = get_MTKmodel()