#= 
    This code was generated by heta-compiler 
=#

function __get_nameless_model__()

### Define independent and dependent variables ###

@variables t
__ruleVariables__ = @variables x1(t) x2(t) r1(t) x3(t) cond1(t)
__dynamicVariables__ = @variables _x1_(t) _x2_(t)

### Define potential algebraic variables ###

### Define parameters (constants and statics) ###
__constParameters__ = @parameters k1
__staticParameters__ = @parameters comp1 p1 _x3_

### Define an operator for the differentiation w.r.t. time
__D__ = Differential(t)

### ODE Equations ###
__eqs__ = [
  # extended rules
  x1 ~ _x1_/ comp1,
  x2 ~ _x2_/ comp1,
  r1 ~ k1 * x1 * comp1,
  x3 ~ _x3_/ comp1,
  cond1 ~ 6e+0 - x1,

  # ODEs
  __D__(_x1_) ~ -r1, # dx1/dt
  __D__(_x2_) ~ r1, # dx2/dt
]

### TIME EVENTS ###

### C EVENTS ###
__sw1_condition__ = [cond1 ~ 0.0]

### STOP EVENTS ###

### EVENTS ASSIGNMENTS ###
function _sw1_affect_func_(__integrator__)
    t = __integrator__.t
    (comp1,p1,x3_,) = __integrator__.p[1:]
    __constants__ = __integrator__.p[NaN:NaN]
    (x1_,x2_,) = __integrator__.u

    # Heta rules
    x2 = x2_ / comp1
    x1 = x1_ / comp1
    
    # recalculated values
    (x1,p1,) = (x1 + 1e+1,x1 * 2e+0,)
    
    # save results
    __integrator__.u[[1,]] = [
        x1*comp1,
    ]
    __integrator__.p[[2,]] = [
        p1,
    ]
end


### Initialization ###

__constValues__ = [
  k1 => 0.01,
]

__init__ = [
  comp1 => 1e+0,
  x1 => 1e+1,
  x2 => 0e+0,
  r1 => k1 * x1 * comp1,
  p1 => 1e+1,
  x3 => 12.12,
  cond1 => 6e+0 - x1,
]

__amountsInit__ = [
    _x1_ => x1 * comp1,
    _x2_ => x2 * comp1,
    _x3_ => x3 * comp1,
]

### ODESystem definition ###
__sys__ = ODESystem(__eqs__, t, [__dynamicVariables__; __ruleVariables__], [__constParameters__; __staticParameters__],
  name = :nameless,
  discrete_events = [],
  defaults = [__constValues__; __init__; __amountsInit__]
)

return (
  structural_simplify(__sys__),
  [__constValues__; __init__; __amountsInit__],
  NamedTuple{()}([]),
  NamedTuple{(:sw1, )}([(__sw1_condition__, __sw1_affect__, false), ]),
  NamedTuple{()}([]),
)

end # function __get_nameless_model__

__model__ = __get_nameless_model__()