#= 
    This code was generated by heta-compiler 0.6.6
    
=#

__platform__ = (function()

### create default constants
nameless_constants_num_ = NamedTuple{(
  :k1,
)}(Float64[
  0.01,
])

### create default observables
nameless_records_output_ = NamedTuple{(
  :comp1,:A,:B,:r1,
)}(Bool[
  false,false,false,false,
])

### create default events
nameless_events_active_ = NamedTuple{(
  
)}(Bool[
  
])

### initialization of ODE variables and Records
function nameless_init_func_(cons)
    #(k1,) = cons

    # Heta initialize
    t = 0.0 # initial time
    B = 0.0
    A = 10.0
    comp1 = 1.0
    r1 = cons[1] * A * comp1
    
    # save results

    return (
        Float64[
            A * comp1,
            B * comp1,
        ],
        Float64[
            comp1,
        ]
    )
end

### calculate RHS of ODE
function nameless_ode_func_(du, u, p, t)
    cons = p.constants
    (comp1,) = p.static
    (A_,B_,) = u 

    # Heta rules
    B = B_ / comp1
    A = A_ / comp1
    r1 = cons[1] * A * comp1
    
    #p.static .= [comp1,]
    du .= [
      -r1,  # dA_/dt
      2*r1,  # dB_/dt
    ]
end

### output function
function nameless_saving_generator_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (comp1,) = integrator.p.static
        (A_,B_,) = u

        # Heta rules
        B = B_ / comp1
        A = A_ / comp1
        r1 = cons[1] * A * comp1
        
        # force amount

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### TIME EVENTS ###

### D EVENTS ###

### STOP EVENTS ###

### event assignments


### MODELS ###

nameless_model_ = (
  nameless_init_func_,
  nameless_ode_func_,
  NamedTuple{(
  )}([
  ]),
  NamedTuple{(
  )}([
  ]),
  NamedTuple{(
  )}([
  ]),
  nameless_saving_generator_,
  nameless_constants_num_,
  nameless_events_active_,
  nameless_records_output_
)

### OUTPUT ###

return (
  (
    nameless = nameless_model_,
  ),
  (),
  "0.6.6"
)

end
)()