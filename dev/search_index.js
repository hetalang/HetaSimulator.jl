var documenterSearchIndex = {"docs":
[{"location":"table-formats/parameters/#Parameters-tables","page":"Parameters tables","title":"Parameters tables","text":"","category":"section"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"Parameters tables are CSV or XLSX files which store settings for parameter identification problems. The content of the table can be loaded into Julia environment as a DataFrame to be used inside fit method.","category":"page"},{"location":"table-formats/parameters/#Format","page":"Parameters tables","title":"Format","text":"","category":"section"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"The first row is intended for headers which clarify the columns meaning. The sequence of columns is not important.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"id : a String representing unique identifier of constant. The corresponding constant must be declared in Model's namespace (@Const component).\nvalue (optional): a Float64 nominal value which will be used as an initial value for the parameter. If the value is skipped than the default value from model will be used.\nlower (optional): a Float64 value that declares the lower bound of the parameter. If skipped than the parameter value will not be limited.\nupper (optional): a Float64 value that declares the upper bound of the parameter. If skipped than the parameter value will not be limited.\nscale (optional): String which can be direct, log, logit. Using the option user can select the space for parameter optimization. Default value is direct.\nestimate (optional): a Boolean value: true or false or numerical values 0 or 1 which declares if the parameter should be fitted. 0 or false value just states the numerical value but the parameter will not be fitted. Default value is true.","category":"page"},{"location":"table-formats/parameters/#Usage","page":"Parameters tables","title":"Usage","text":"","category":"section"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"To load the table into Julia environment as DataFrame one should use read_parameters method. This method reads the file, checks the content and formats the data.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"parameters_csv = read_parameters(\"./parameters.csv\")","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"Currently the table can be used only in fit method.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"fit_results = fit(p, parameters_csv)","category":"page"},{"location":"table-formats/parameters/#Example","page":"Parameters tables","title":"Example","text":"","category":"section"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"Loading file parameters.csv with the following content.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"id value lower upper scale estimate\nsigma_K 0.1 1e-6 1e3 log 1\nsigma_P 0.1 1e-6 1e3 log 1\nKp_K_D 5.562383e+01 1e-6 1e3 log 1\nKp_R_D 5.562383e+01 1e-6 1e3 log 0","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"Read as DataFrame object.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"params = read_scenarios(\"./parameters.csv\")\nres = fit(p, params)","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"As a result the Platform will be fitted based on all experimental data using three parameters: sigma_K, sigma_P, Kp_K_D in log space.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"These operations are equivalent to the following.","category":"page"},{"location":"table-formats/parameters/","page":"Parameters tables","title":"Parameters tables","text":"params = [\n    :sigma_K = [:value => 0.1, :lower => 1e-6, :upper => 1e3, :scale => :log, :estimate => true],\n    :sigma_P = [:value => 0.1, :lower => 1e-6, :upper => 1e3, :scale => :log, :estimate => true],\n    :Kp_K_D = [:value => 5.562383e+01, :lower => 1e-6, :upper => 1e3, :scale => :log, :estimate => true],\n    :Kp_R_D = [:value => 5.562383e+01, :lower => 1e-6, :upper => 1e3, :scale => :log, :estimate => false]\n]\nres = fit(p, params)","category":"page"},{"location":"api/#API-references","page":"API","title":"API references","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [HetaSimulator]\nOrder   = [:type, :function]","category":"page"},{"location":"api/#HetaSimulator.MCResults","page":"API","title":"HetaSimulator.MCResults","text":"struct MCResults{S,C} <: AbstractResults\n  sim::S\n  saveat::Bool\n  scenario::C\nend\n\nStructure storing results of [mc]{@ref} method applied for one Scenario.\n\n\n\n\n\n","category":"type"},{"location":"api/#HetaSimulator.Model","page":"API","title":"HetaSimulator.Model","text":"struct Model{IF,OF,EV,SG,C,EA} <: AbstractModel\n  init_func::IF\n  ode_func::OF\n  events::EV\n  saving_generator::SG\n  records_output::AbstractVector{Pair{Symbol,Bool}}\n  constants::C\n  events_active::EA\nend\n\nStructure storing core properties of ODE model. This represent the content of one namespace from a Heta platform.\n\n\n\n\n\n","category":"type"},{"location":"api/#HetaSimulator.Platform","page":"API","title":"HetaSimulator.Platform","text":"struct Platform{M,C}\n  models::Dict{Symbol,M}     # dictionary storing Models\n  scenarios::Dict{Symbol,C} # dictionary storing Scenarios\nend\n\nThe main storage representing a modeling platform. Typically HetaSimulator works with one platform object which can include several models and scenarios.\n\nUsually a Platform is created based on Heta formatted files using [load_platform]{@ref}.\n\n\n\n\n\n","category":"type"},{"location":"api/#HetaSimulator.Scenario-Tuple{Model}","page":"API","title":"HetaSimulator.Scenario","text":"Scenario(model::Model;\n  measurements::Vector{AbstractMeasurementPoint}=AbstractMeasurementPoint[],\n  observables::Union{Nothing,Vector{Symbol}}=nothing,\n  parameters::Vector{Pair{Symbol,Float64}} = Pair{Symbol,Float64}[],\n  events_active::Union{Nothing, Vector{Pair{Symbol,Bool}}} = Pair{Symbol,Bool}[],\n  events_save::Union{Tuple,Vector{Pair{Symbol, Tuple{Bool, Bool}}}} = (true,true), \n  saveat::Union{Nothing,AbstractVector} = nothing,\n  tspan::Union{Nothing,Tuple} = nothing,\n  save_scope::Bool = true,\n)\n\nBuilds simulation scenario of type Scenario Example: Scenario(model; tspan = (0., 200.), saveat = [0.0, 150., 250.])\n\nArguments:\n\nmodel : model of type Model\nmeasurements : Vector of measurements. Default is empty Vector{AbstractMeasurementPoint}\nobservables : names of output observables. Overwrites default model's values. Default is nothing\nparameters : Vector of Pairs containing constants' names and values. Overwrites default model's values. Default is empty vector.\nevents_active : Vector of Pairs containing events' names and true/false values. Overwrites default model's values. Default is empty Vector{Pair}\nevents_save : Tuple or Vector{Tuple} marking whether to save solution before and after event. Default is (true,true) for all events\nsaveat : time points, where solution should be saved. Default nothing values stands for saving solution at timepoints reached by the solver \ntspan : time span for the ODE problem\nsave_scope : should scope be saved together with solution. Default is true\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.SimResults","page":"API","title":"HetaSimulator.SimResults","text":"struct SimResults{S, C<:Scenario} <: AbstractResults\n  sim::S\n  scenario::C \nend\n\nStructure storing results from [sim]{@ref} method applied for one [Scenario]{@ref}.\n\n\n\n\n\n","category":"type"},{"location":"api/#HetaSimulator.add_measurements!-Tuple{Platform, DataFrame}","page":"API","title":"HetaSimulator.add_measurements!","text":"add_measurements!(\n  platform::Platform,\n  df::DataFrame;\n  kwargs...\n)\n\nAdds measurements to Scenario\n\nArguments:\n\nplatform : platform of Platform type\ndf : DataFrame with measurements, typically obtained with read_measurements function\nsubset : subset of measurements which will be added to the Scenario. Default Pair{Symbol, Symbol}[] adds all measurements from the df\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.add_measurements!-Tuple{Scenario, DataFrame}","page":"API","title":"HetaSimulator.add_measurements!","text":"add_measurements!(\n  scenario::Scenario,\n  df::DataFrame;\n  kwargs...\n)\n\nAdds measurements to Scenario\n\nArguments:\n\nscenario : simulation scenario of type Scenario\ndf : DataFrame with measurements, typically obtained with read_measurements function\nsubset : subset of measurements which will be added to the Scenario. Default Pair{Symbol, Symbol}[] adds all measurements from the df\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.add_scenarios!-Tuple{Platform, DataFrame}","page":"API","title":"HetaSimulator.add_scenarios!","text":"add_scenarios!(\n  platform::Platform,\n  df::DataFrame;\n  subset::AbstractVector{P} = Pair{Symbol, Symbol}[]\n) where P <: Pair{Symbol, Symbol}\n\nAdds a new Scenario to the Platform\n\nArguments:\n\nplatform : platform of Platform type\ndf : DataFrame with scenarios setup, typically obtained with read_scenarios function\nsubset : subset of scenarios which will be added to the platform. Default Pair{Symbol, Symbol}[] adds all scenarios from the df\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.fit-Tuple{Platform, Any}","page":"API","title":"HetaSimulator.fit","text":"fit(platform::Platform,\n  params;\n  scenarios::Union{AbstractVector{Symbol}, Nothing} = nothing,\n  kwargs...\n) where C<:AbstractScenario\n\nFit parameters to experimental measurements. Returns FitResults type.\n\nExample: fit(platform, [:k1=>0.1,:k2=>0.2,:k3=>0.3];scenarios=[:scn2,:scn3])\n\nArguments:\n\nplatform : platform of Platform type\nparams : optimization parameters and their initial values\nscenarios : vector of scenarios of type Scenario or nothing to fit all scenarios. Default is nothing\nkwargs : other solver related arguments supported by fit(scenario_pairs::Vector{<:Pair}, params::Vector{<:Pair}\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.fit-Union{Tuple{C}, Tuple{AbstractArray{Pair{Symbol, C}, 1}, DataFrame}} where C<:HetaSimulator.AbstractScenario","page":"API","title":"HetaSimulator.fit","text":"fit(scenario_pairs::AbstractVector{Pair{Symbol, C}},\n  params_df::DataFrame;\n  kwargs...\n) where C<:AbstractScenario\n\nFit parameters to experimental measurements. Returns FitResults type.\n\nArguments:\n\nscenario_pairs : vector of pairs containing names and scenarios of type Scenario\nparams : DataFrame with optimization parameters setup and their initial values\nkwargs : other solver related arguments supported by fit(scenario_pairs::Vector{<:Pair}, params::Vector{<:Pair}\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.fit-Union{Tuple{C}, Tuple{AbstractVector{C}, Any}} where C<:HetaSimulator.AbstractScenario","page":"API","title":"HetaSimulator.fit","text":"fit(scenarios::AbstractVector{C},\n  params;\n  kwargs...\n) where C<:AbstractScenario\n\nFit parameters to experimental measurements. Returns FitResults type.\n\nExample: fit([scn2, scn3, scn4], [:k1=>0.1,:k2=>0.2,:k3=>0.3])\n\nArguments:\n\nscenarios : vector of scenarios of type Scenario\nparams : optimization parameters and their initial values\nkwargs : other solver related arguments supported by fit(scenario_pairs::Vector{<:Pair}, params::Vector{<:Pair}\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.fit-Union{Tuple{P}, Tuple{C}, Tuple{AbstractArray{Pair{Symbol, C}, 1}, Vector{Pair{Symbol, Float64}}}} where {C<:HetaSimulator.AbstractScenario, P<:Pair}","page":"API","title":"HetaSimulator.fit","text":"fit(scenario_pairs::AbstractVector{Pair{Symbol, C}},\n  params::Vector{Pair{Symbol,Float64}};\n  alg=DEFAULT_ALG,\n  reltol=DEFAULT_FITTING_RELTOL,\n  abstol=DEFAULT_FITTING_ABSTOL,\n  parallel_type=EnsembleSerial(),\n  ftol_abs = 0.0,\n  ftol_rel = 1e-4, \n  xtol_rel = 0.0,\n  xtol_abs = 0.0, \n  fit_alg = :LN_NELDERMEAD,\n  maxeval = 10000,\n  maxtime = 0.0,\n  lbounds = fill(0.0, length(params)),\n  ubounds = fill(Inf, length(params)),\n  kwargs... \n) where C<:AbstractScenario\n\nFit parameters to experimental measurements. Returns FitResults type.\n\nExample: fit([:x=>scn2, :y=>scn3, :z=>scn4], [:k1=>0.1,:k2=>0.2,:k3=>0.3])\n\nArguments:\n\nscenario_pairs : vector of pairs containing names and scenarios of type Scenario\nparams : optimization parameters and their initial values\nparameters_upd : constants, which overwrite both Model and Scenario constants. Default is nothing\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-6\nabstol : relative tolerance. Default is 1e-8\nparallel_type : parallel setup. See SciML docs for details. Default is no parallelism: EnsembleSerial()\nftol_abs : absolute tolerance on function value. See NLopt.jl docs for details. Default is 0.0\nftol_rel : relative tolerance on function value. See NLopt.jl docs for details. Default is 1e-4\nxtol_rel : relative tolerance on optimization parameters. See NLopt.jl docs for details. Default is 0.0\nxtol_rel : absolute tolerance on optimization parameters. See NLopt.jl docs for details. Default is 0.0\nfit_alg : fitting algorithm. See NLopt.jl docs for details. Default is :LN_NELDERMEAD\nmaxeval : maximum number of function evaluations. See NLopt.jl docs for details. Default is 1e4\nmaxtime : maximum optimization time (in seconds). See NLopt.jl docs for details. Default is 0\nlbounds : lower parameters bounds. See NLopt.jl docs for details. Default is fill(0.0, length(params))\nubounds : upper parameters bounds. See NLopt.jl docs for details. Default is fill(Inf, length(params))\nscale   : scale of the parameters (supports :lin, :log, :log10) to be used during fitting. Default is fill(:lin, length(params))\nkwargs : other solver related arguments supported by DiffEqBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.heta_build-Tuple{AbstractString}","page":"API","title":"HetaSimulator.heta_build","text":"heta_build(\n  heta_index::AbstractString;\n  declaration::String = \"platform\",\n  skip_export::Bool = false,\n  log_mode::String = \"error\",\n  debug::Bool = false,\n  julia_only::Bool = false,\n  dist_dir::String = \"dist\",\n  meta_dir::String = \"meta\",\n  source::String = \"index.heta\",\n  type::String = \"heta\"\n)\n\nBuilds the model from Heta-based reactions\n\nSee heta comiler docs for details: https://hetalang.github.io/#/heta-compiler/cli-references?id=running-build-with-cli-options\n\nArguments:\n\nheta_index : path to heta.index file\ndeclaration : path to declaration file. Default is \"platform\"\nskip_export : if set to true no files will be created. Default is false\nlog_mode : log mode. Default is \"error\"\ndebug : turn on debug mode. Default is false\njulia_only : export only julia-based model. Default is false\ndist_dir : directory path, where to write distributives to. Default is \"dist\"\nmeta_dir : meta directory path. Default is \"meta\"\nsource : path to the main heta module. Default is \"index.heta\"\ntype : type of the source file. Default is \"heta\"\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.heta_update-Tuple{}","page":"API","title":"HetaSimulator.heta_update","text":"heta_update(version::String)\n\nInstalls heta-compiler from NPM.\n\nArguments:\n\nversion : heta compiler version. If the value is not provided, heta_update installs the latest version of heta compiler \n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.load_jlmodel-Tuple{AbstractString}","page":"API","title":"HetaSimulator.load_jlmodel","text":"load_jlmodel(  \n  model_jl::AbstractString; \n  rm_out::Bool = false\n)\n\nLoads prebuild julia model without Platform\n\nArguments:\n\nmodel_jl : path to Julia model file\nrm_out : should the file with Julia model be removed after the model is loaded. Default is false\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.load_jlplatform-Tuple{AbstractString}","page":"API","title":"HetaSimulator.load_jlplatform","text":"load_jlplatform(  \n  model_jl::AbstractString; \n  rm_out::Bool = false\n)\n\nLoads prebuild julia model as part of Platform\n\nArguments:\n\nmodel_jl : path to Julia model file\nrm_out : should the file with Julia model be removed after the model is loaded. Default is false\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.load_platform-Tuple{AbstractString}","page":"API","title":"HetaSimulator.load_platform","text":"load_platform(  \n  heta_index::AbstractString;\n  rm_out::Bool = true,\n  julia_only::Bool = true, \n  dist_dir::String = \".\",\n  source::String = \"index.heta\",\n  type::String = \"heta\",\n  kwargs...\n)\n\nConverts heta model to Julia and outputs Platform type.\n\nSee heta comiler docs for details: https://hetalang.github.io/#/heta-compiler/cli-references?id=running-build-with-cli-options\n\nArguments:\n\nheta_index : path to heta.index file\nrm_out : should the file with Julia model be removed after the model is loaded. Default is true\njulia_only : export only julia-based model. Default is true\ndist_dir : directory path, where to write distributives to. Default is \".\"\nkwargs : other arguments supported by heta_build\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Tuple{Scenario, DataFrame}","page":"API","title":"HetaSimulator.mc","text":"mc(scenario::Scenario,\n  params::DataFrame,\n  num_iter::Int64;\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single scenario Scenario. Returns MCResults type.\n\nExample: mc(scn1, DataFrame(k2=rand(3),k3=rand(3)), 1000)\n\nArguments:\n\nscenario : simulation scenario of type Scenario\nparams : DataFrame with pre-generated parameters.\nnum_iter : number of Monte-Carlo iterations \nkwargs : other solver related arguments supported by mc(scenario::Scenario, params::Vector, num_iter::Int64)\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{PP}, Tuple{CP}, Tuple{Vector{CP}, Vector{PP}, Int64}} where {CP<:Pair, PP<:Pair}","page":"API","title":"HetaSimulator.mc","text":"mc(scenario_pairs::Vector{<:Pair},\n  params::Vector{<:Pair},\n  num_iter::Int64;\n  verbose=false,\n  alg=DEFAULT_ALG,\n  reltol=DEFAULT_SIMULATION_RELTOL,\n  abstol=DEFAULT_SIMULATION_ABSTOL,\n  parallel_type=EnsembleSerial(),\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single Scenario. Returns Vector{MCResults} type.\n\nExample: mc([:c1=>scn1,:c2=>scn2], [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\nscenario_pairs : vector of pairs containing names and scenarios of type Scenario\nparams : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nverbose : print iteration progress. Default is false\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-3\nabstol : relative tolerance. Default is 1e-6\nparallel_type : parallel setup. See SciML docs for details. Default is no parallelism: EnsembleSerial()\nkwargs : other solver related arguments supported by DiffEqBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{P}, Tuple{C}, Tuple{Vector{C}, Vector{P}, Int64}} where {C<:HetaSimulator.AbstractScenario, P<:Pair}","page":"API","title":"HetaSimulator.mc","text":"mc(scenario_pairs::Vector{<:AbstractScenario},\n  params::Vector{<:Pair},\n  num_iter::Int64;\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single scenario. Returns Vector{MCResults} type.\n\nExample: mc([scn1,scn2], [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\nscenario_pairs : vector of scenarios of type Scenario\nparams : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nkwargs : other solver related arguments supported by mc(scenario_pairs::Vector{<:Pair}, params::Vector, num_iter::Int64)\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{P}, Tuple{Model, Vector{P}, Int64}} where P<:Pair","page":"API","title":"HetaSimulator.mc","text":"mc(model::Model,\n  params::Vector{<:Pair},\n  num_iter::Int64;\n  measurements::Vector{AbstractMeasurementPoint} = AbstractMeasurementPoint[],\n  events_active::Union{Nothing, Vector{Pair{Symbol,Bool}}} = Pair{Symbol,Bool}[],\n  events_save::Union{Tuple,Vector{Pair{Symbol, Tuple{Bool, Bool}}}}=(true,true), \n  observables::Union{Nothing,Vector{Symbol}} = nothing,\n  saveat::Union{Nothing,AbstractVector} = nothing,\n  tspan::Union{Nothing,Tuple} = nothing,\n  save_scope::Bool=false,\n  time_type::DataType=Float64,\n  kwargs...\n)\n\nRun Monte-Carlo simulations with Model. Returns MCResults type.\n\nExample: mc(model, [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\nmodel : model of type Model\nparams : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nmeasurements : Vector of measurements. Default is empty vector \nevents_active : Vector of Pairs containing events' names and true/false values. Overwrites default model's values. Default is empty vector \nevents_save : Tuple or Vector{Tuple} marking whether to save solution before and after event. Default is (true,true) for all events\nobservables : names of output observables. Overwrites default model's values. Default is empty vector\nsaveat : time points, where solution should be saved. Default nothing values stands for saving solution at timepoints reached by the solver \ntspan : time span for the ODE problem\nsave_scope : should scope be saved together with solution. Default is false\nkwargs : other solver related arguments supported by mc(scenario::Scenario, params::Vector, num_iter::Int64)\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{P}, Tuple{Platform, Vector{P}, Int64}} where P<:Pair","page":"API","title":"HetaSimulator.mc","text":"mc(platform::Platform, \n  params::Vector{<:Pair},\n  num_iter::Int64;\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single Scenario. Returns Vector{MCResults} type.\n\nExample: mc(platform, [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\nplatform : platform of Platform type\nparams : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nkwargs : other solver related arguments supported by mc(scenario_pairs::Vector{<:Pair}, params::Vector, num_iter::Int64)\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{P}, Tuple{Scenario, Vector{P}, Int64}} where P<:Pair","page":"API","title":"HetaSimulator.mc","text":"mc(scenario::Scenario,\n  params::Vector{<:Pair},\n  num_iter::Int64;\n  verbose=false,\n  alg=DEFAULT_ALG,\n  reltol=DEFAULT_SIMULATION_RELTOL,\n  abstol=DEFAULT_SIMULATION_ABSTOL,\n  parallel_type=EnsembleSerial(),\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single Scenario. Returns MCResults type.\n\nExample: mc(scenario, [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\nscenario : simulation scenario of type Scenario\nparams : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nverbose : print iteration progress. Default is false\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-3\nabstol : relative tolerance. Default is 1e-6\nparallel_type : parallel setup. See SciML docs for details. Default is no parallelism: EnsembleSerial()\nkwargs : other solver related arguments supported by DiffEqBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.read_mcvecs-Tuple{String}","page":"API","title":"HetaSimulator.read_mcvecs","text":"read_mcvecs(filepath::String)\n\nRead table with pre-generated parameters for Monte-Carlo simulations. Typically used for virtual patients simulations\n\nArguments:\n\nfilepath: path to the file with pre-generated parameters\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.read_measurements","page":"API","title":"HetaSimulator.read_measurements","text":"read_measurements(filepath::String, sheet=1; kwargs...)\n\nReads table file with measurements to DataFrame\n\nArguments:\n\nfilepath : path to table file. Supports \".csv\" and \".xlsx\" files\nsheet : number of sheet in case of \".xlsx\" file. Default is 1\nkwargs : other arguments supported by CSV.File\n\n\n\n\n\n","category":"function"},{"location":"api/#HetaSimulator.read_scenarios","page":"API","title":"HetaSimulator.read_scenarios","text":"read_scenarios(filepath::String, sheet=1; kwargs...)\n\nReads table file with scenarios to DataFrame\n\nArguments:\n\nfilepath : path to table file. Supports \".csv\" and \".xlsx\" files\nsheet : number of sheet in case of \".xlsx\" file. Default is 1\nkwargs : other arguments supported by CSV.File\n\n\n\n\n\n","category":"function"},{"location":"api/#HetaSimulator.save_results-Tuple{String, HetaSimulator.AbstractResults}","page":"API","title":"HetaSimulator.save_results","text":"save_results(filepath::String, sim::AbstractResults)\n\nSave results as csv file\n\nArguments:\n\nfilepath: path and name of the file to write to\nsim: simulation results of AbstractResults type\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.sim-Tuple{Platform}","page":"API","title":"HetaSimulator.sim","text":"sim(platform::Platform; \n  scenarios::Union{AbstractVector{Symbol}, Nothing} = nothing,\n  kwargs...) where {C<:AbstractScenario}\n\nSimulate scenarios included in platform. Returns Vector{Pair}.\n\nExample: sim(platform)\n\nArguments:\n\nplatform : platform of Platform type\nscenarios : Vector containing names of scenarios included in platform. Default value nothing stands for all scenarios in the platform \nkwargs... : other kwargs supported by sim(scenario_pairs::Vector{Pair})\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.sim-Union{Tuple{AbstractVector{C}}, Tuple{C}} where C<:HetaSimulator.AbstractScenario","page":"API","title":"HetaSimulator.sim","text":"sim(scenarios::AbstractVector{C}; kwargs...) where {C<:AbstractScenario}\n\nSimulate multiple scenarios. Returns Vector{Pair}.\n\nExample: sim([scn1, scn2, scn3])\n\nArguments:\n\nscenarios : Vector containing names and scenarios of type Scenario\nkwargs : other kwargs supported by sim(scenario_pairs::Vector{Pair})\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.sim-Union{Tuple{Scenario}, Tuple{P}} where P<:Pair","page":"API","title":"HetaSimulator.sim","text":"sim(scenario::Scenario; \n  parameters_upd::Union{Nothing, Vector{P}}=nothing,\n  alg=DEFAULT_ALG, \n  reltol=DEFAULT_SIMULATION_RELTOL, \n  abstol=DEFAULT_SIMULATION_ABSTOL,\n  kwargs...)\n\nSimulate single Scenario. Returns SimResults type.\n\nExample: Scenario(model; tspan = (0., 200.), saveat = [0.0, 150., 250.]) |> sim\n\nArguments:\n\nscenario : simulation scenario of type Scenario\nparameters_upd : constants, which overwrite both Model and Scenario constants. Default is nothing\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-3\nabstol : relative tolerance. Default is 1e-6\nkwargs... : other solver related arguments supported by DiffEqBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.sim-Union{Tuple{Vector{P}}, Tuple{P}} where P<:Pair","page":"API","title":"HetaSimulator.sim","text":"sim(scenario_pairs::Vector{P}; \n  parameters_upd::Union{Nothing, Vector}=nothing,\n  alg=DEFAULT_ALG, \n  reltol=DEFAULT_SIMULATION_RELTOL, \n  abstol=DEFAULT_SIMULATION_ABSTOL,\n  parallel_type=EnsembleSerial(),\n  kwargs...) where P<:Pair\n\nSimulate multiple scenarios. Returns Vector{Pair}.\n\nExample: sim([:x => scn1, :y=>scn2, :z=>scn3])\n\nArguments:\n\nscenario_pairs : vector of pairs containing names and scenarios of type Scenario\nparameters_upd : constants, which overwrite both Model and Scenario constants. Default is nothing\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-3\nabstol : relative tolerance. Default is 1e-6\nparallel_type : type of multiple simulations parallelism. Default is no parallelism. See SciML docs for details\nkwargs... : other solver related arguments supported by DiffEqBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"table-formats/measurement/#Measurements-tables","page":"Measurements tables","title":"Measurements tables","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Measurements tables are CSV or XLSX files which store Measurement objects in tabular format. The content of the table can be loaded into Julia environment as a DataFrame to be included into Platform object.","category":"page"},{"location":"table-formats/measurement/#Format","page":"Measurements tables","title":"Format","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"The structure of tables corresponds to Measurements properties. The first row is intended for headers which clarify the columns meaning. The sequence of columns is not important.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"scenario : a String value representing identifier of Scenario.\nt : a Float64 value equal to time point of measured value\nmeasurement : a Float64 measured value\nscope (optional): a String value which states a scope of simulation to be compared with measurements. Default value is ode_\nprob.<id> : a set of options to characterize the probability distribution. The supported ids depend on distribution type. For normal and lognormal distributions the available headers are:\nprob.type (optional) : a String declaring probability type. normal is default.\nprob.mean : Float64 value or String representing @Const or @Record id in model. The value represents parameter mean in normal distribution.\nprob.sigma : Float64 value or String representing @Const or @Record id in model. The value represents parameter sigma (standard deviation) in normal distribution.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Currently two base probability types are available: normal, lognormal. This distributions can be used for creating different types of error models.","category":"page"},{"location":"table-formats/measurement/#prob.type:-normal","page":"Measurements tables","title":"prob.type: normal","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Each row in the table will be transformed into a component of log-likelihood function -2ln(L).","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Lambda = sum_i left( ln(probsigma_i^2) + frac(probmean_i - measurement_i)^2probsigma_i^2right)","category":"page"},{"location":"table-formats/measurement/#prob.type:-lognormal","page":"Measurements tables","title":"prob.type: lognormal","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Each row in the table will be transformed into a component of log-likelihood function -2ln(L).","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Lambda = sum_i left( ln(probsigma_i^2) + frac(ln(probmean_i) - ln(measurement_i))^2probsigma_i^2right)","category":"page"},{"location":"table-formats/measurement/#Loading-to-Platform","page":"Measurements tables","title":"Loading to Platform","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Measurement table can be loaded into Julia environment as a DataFrame using HetaSimulator.read_measurements method. This method reads the file, checks the content and formats the data to be used inside Platform object.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"measurements = read_measurements(\"measurements.csv\")\n\n32×7 DataFrame\n Row │ t        measurement  scope   prob.mean  prob.sigma  scenario  prob.type \n     │ Float64  Float64      Symbol  String     Float64     Symbol     Symbol    \n─────┼───────────────────────────────────────────────────────────────────────────\n   1 │     2.0     8.46154   ode_    a                1.0   dataone    normal\n   2 │     4.0     7.33333   ode_    a                1.2   dataone    normal\n   3 │     6.0     6.47059   ode_    a                2.2   dataone    normal\n  ⋮  │    ⋮          ⋮         ⋮         ⋮          ⋮           ⋮          ⋮","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"The data frame can be loaded into platform using the HetaSimulator.add_measurements! method.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"add_measurements!(platform, measurements)","category":"page"},{"location":"table-formats/measurement/#Example","page":"Measurements tables","title":"Example","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Loading file measurements.csv with the following content.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"t measurement scope prob.mean prob.sigma scenario\n2 8.461539334 ode_ a 1 dataone\n4 7.333333812 ode_ a 1.2 dataone\n6 6.470591567 ode_ a 2.2 dataone","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Read as DataFrame object.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"measurements = read_measurements(\"./measurements.csv\")","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Add all measurements to Platform","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"add_measurements!(platform, measurements)","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"As a result the Platform will contain three measurements.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"These operations are equivalent of manually created Measurement objects.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"# dataone = Scenario(...)\n\nm1 = NormalMeasurementPoint(2, 8.461539334, :ode, :a, 1)\nm2 = NormalMeasurementPoint(4, 7.333333812, :ode, :a, 1.2)\nm3 = NormalMeasurementPoint(6, 6.470591567, :ode, :a, 2.2)\n\npush!(dataone.measurements, m1)\npush!(dataone.measurements, m2)\npush!(dataone.measurements, m3)","category":"page"},{"location":"tutorial/intro/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"HetaSimulator was designed as a modeling environment for Quantitative Systems Pharmacology (QSP) and Systems Biology (SB) projects. The endpoint users are not experienced Julia users but rather researchers having biological, biophisical and bioinformatical background. We avoided complex user interfaces and limit the number of different methods for the base modeling workflow.","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"The approach implies the \"modeling platform\" term that means everything helpful for modeling: models structure, variables, parameters, scenarios and experimental dataset. From the practical point of view \"modeling platform\" is the same as project files. The representation of modeling platform in the HetaSimulator package is object of the Platform type. This object stores Models, Scenarios and Measurements.","category":"page"},{"location":"tutorial/intro/#Architecture","page":"Introduction","title":"Architecture","text":"","category":"section"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"Model type represents one concrete namespace imported from Heta-compiler. It stores information about ODE system, initialization of initial values, events as well as default values of constants. The HetaSimulator approach imply multi-model usage so simulations and optimizations can be done for several models simultaneously without specific preparations.","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"Scenario type stores additional setting for running ODE solution and tasks. For example the same model can be run with or without some events, or differ by some specific constant values like doses and others, or has some specific output variables (observables). Each Scenario is associated with a specific Model. Each model may be referenced by any number of scenarios.","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"Additionally Scenario instance is a container for the Measurement objects which describe experimental datasets. They can be used for identification of model parameters or some specific tasks like identifiability analysis and visualization. ","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"(Image: platform-scheme)","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"There is no need to create more than one Platform object because it can store any number of Models and Scenarios. The advisable workflow is (1) to create one Platform using load_platform method, (2) update it by Scenarios and Measurements using formatted CSV tables and (3) apply different methods depending on your goals.","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"There are base methods that can be applied for a platform object, for example sim, mc and fit. These methods can be applied for a particular Scenario or for the whole platform (all scenarios in platform). The last approach is preferable.","category":"page"},{"location":"tutorial/intro/#HetaSimulator-vs-Heta-compiler","page":"Introduction","title":"HetaSimulator vs Heta-compiler","text":"","category":"section"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"Both Heta compiler and HetaSimulator.jl are part of the Heta project initiative. They uses the same standards of model and notation and can be applied in the same projects. Furthermore currently the heta-simulator JS code is used internally in HetaSimulator.","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"The latest stable version of heta-compieler can be obtained using the command","category":"page"},{"location":"tutorial/intro/","page":"Introduction","title":"Introduction","text":"heta_update()","category":"page"},{"location":"basics/overview/#Quick-start","page":"Quick start","title":"Quick start","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The general workflow for HetaSimulator is","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Writing a modeling platform in the Heta format\nLoading platform into Julia environment\nCreating model's settings and data adding scenarios and measurements\nSolve problems using the methods: sim, mc, fit\nAnalyze the results","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The particular workflow may be iterative, i.e. include updates to the model and re-simulation based on estimated parameters or model structure updates. It depend on the user's needs.","category":"page"},{"location":"basics/overview/#Writing-model-in-the-Heta-format","page":"Quick start","title":"Writing model in the Heta format","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Heta is a modeling language for quantitative systems pharmacology and systems biology. It is a DSL (domain-specific language) describing dynamic model or models in process-description format. Heta compiler converts it into variety of files including \"Julia\" format which can be loaded to Julia/HetaSimulator environment.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"HetaSimulator supports all features of the Heta language. So one can organize modeling project as re-used modules (files), include any number of models into single platform with the namespaces mechanism. The platform can use the declaration file platform.json or can be loaded from single file.  All Heta modules: Heta code, tables, SBML and JSON can be loaded as a modeling platform and compiled into ODE-based mathematical representation.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To read more about Heta-based modeling platforms and Heta compiler visit the homepage https://hetalang.github.io/#/.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"As an example we will use a model describing a simple pharmacokinetic model stored in single .heta file. It is expected that the model code will be placed into \"index.heta\" file located in a directory my_example or something like that.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"// Compartments\nVol0 @Compartment .= 1;\nVol1 @Compartment .= 6.3;\nVol2 @Compartment .= 10.6;\n\n// Species\nA0 @Species {compartment: Vol0, isAmount: true, output: true} .= 0;\nC1 @Species {compartment: Vol1, output: true} .= 0;\nC2 @Species {compartment: Vol2, output: true} .= 0;\n\n// Reactions\nv_abs @Reaction {actors: A0 = C1} := kabs * A0;\nv_el @Reaction {actors: C1 =} := Vol1 * (kel * C1); // Vol1 * (kmax * C1 / (Km + C1));\nv_distr @Reaction {actors: C1 = C2} := Q * (C1 - C2);\n\n// Parameters\ndose @Const = 20;\nkabs @Const = 20;\nkel @Const = 0.5;\nQ @Const = 1.0;\n\n// single dose event\nsw1 @TimeSwitcher {start: 0};\nA0 [sw1]= dose;\n\n// multiple dose event, default off\nsw2 @TimeSwitcher {start: 0, period: 24, active: false};\nA0 [sw2]= dose;","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The model describes a typical two-compartment model with single or multiple dose depending on which event is active. Take a note that the component of the model is create without any namespace statement. This means they have the default namespace attribute nameless. This code is equivalent to the following system of ODE.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"beginaligned\nfracddtA_0 = - v_abs\nfracddt(C_1 cdot Vol_1) = v_abs - v_el - v_distr\nfracddt(C_2 cdot Vol_2) = v_distr\n\nA_0(0) = 0\nC_1(0) = 0\nC_2(0) = 0\nv_abs(t) = kabs cdot A_0\nv_el(t) = Vol_1 cdot (kel cdot C_1)\nv_distr(t) = Q cdot (C_1 - C_2)\nendaligned\n\ntextevent at  t = 0\n\nA_0 = dose","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Where parameters are","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"beginaligned\ndose = 20\nkabs = 10\nkel = 02\nQ  = 32\nVol_1 = 63\nVol_2 = 106\nendaligned","category":"page"},{"location":"basics/overview/#Loading-platform-from-the-Heta-format","page":"Quick start","title":"Loading platform from the Heta format","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"HetaSimulator loads modeling platform into Platform type object that is a container for all models simulation settings and experimental data. When you load a platform from Heta it includes only models converted from concrete namespaces. The scenario storage is empty and will be populated manually or imported from tables.","category":"page"},{"location":"basics/overview/#Loading-with-internal-compiler","page":"Quick start","title":"Loading with internal compiler","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"When HetaSimulator is installed and internal Heta compiler is installed the platform can be loaded with the method load_platform.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"using HetaSimulator, Plots\n\np = load_platform(\"./my_example\")","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"No declaration file, running with defaults...\n[info] Builder initialized in directory \"Y:\\HetaSimulator.jl\\cases\\story_3\".\n[info] Compilation of module \"index.heta\" of type \"heta\"...\n[info] Reading module of type \"heta\" from file \"Y:\\HetaSimulator.jl\\cases\\story_3\\index.heta\"...\n[info] Setting references in elements, total length 50\n[info] Checking for circular references in Records.\n[warn] Units checking skipped. To turn it on set \"unitsCheck: true\" in declaration.\n[info] Checking unit's terms.\n[warn] \"Julia only\" mode\n[info] Exporting to \"Y:\\HetaSimulator.jl\\cases\\story_3\\_julia\" of format \"Julia\"...\nCompilation OK!\nLoading platform... OK!\n+---------------------------------------------------------------------------\n| Platform contains:\n|   1 model(s): nameless. Use `models(platform)` for details.\n|   0 scenario(s): . Use `scenarios(platform)` for details.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The first argument of load_platform declares the absolute or relative path to the platform directory. If you use another file name (not index.heta) you can declare it with source argument.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"p = load_platform(\"./my_example\", source = \"another_name.heta\")","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"You can also load the model from another formats like SBML.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"p = load_platform(\"./another_project\", source = \"model.xml\", type = \"SBML\")","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The list of additional arguments is approximately the same as CLI options of heta build command of Heta compilers. For the full list see load_platform references.","category":"page"},{"location":"basics/overview/#Loading-pre-compiled-platform","page":"Quick start","title":"Loading pre-compiled platform","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Alternatively you can use files generated with stand-alone Heta compiler.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To do so the model code should be updated with the following statement.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"...\nsw2 @TimeSwitcher {start: 0, period: 24, active: false};\nA0 [sw2]= dose;\n\n#export {format: Julia, filepath: julia_platform};","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Running the code with the console command heta build my_project produces the file my_example/dist/julia_platform/model.jl which can be loaded with load_jlplatform method.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"p = load_jlplatform(\"./my_example/dist/julia_platform/model.jl\")","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Loading platform... OK!\n+---------------------------------------------------------------------------\n| Platform contains:\n|   1 model(s): nameless. Use `models(platform)` for details.\n|   0 scenario(s): . Use `scenarios(platform)` for details.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/#Creating-scenarios","page":"Quick start","title":"Creating scenarios","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Scenario in HetaSimulator is an object which stores a model together with additional settings and options. It sets the time point, ranges, updates parameter values, activate or inactivate events, etc.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The scenario-based approach is used to store pre-defined model's options: dose values, experimental scenarios, data saving options, initial values and others which can be applied for one or multiple models. The Scenario also stores Measurement points which is used for parameters identification and visualization.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Scenario is created from default options passed from its model and user defined options from table row or set manually.","category":"page"},{"location":"basics/overview/#Import-from-CSV-tables","page":"Quick start","title":"Import from CSV tables","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The most simple way to populate a platform by scenarios is to create a separate file with Scenario in tabular CSV format.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Create file scenarios.csv file inside my_example with the following content.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"id parameters.dose events_active.sw1 events_active.sw2\ndose_1 1 true false\ndose_10 10 true false\ndose_100 100 true false\nmultiple_15 15 false true","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The table can be loaded with the read_scenarios function.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"scn_df = read_scenarios(\"./my_example/scenarios.csv\")","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"4×4 DataFrame\n Row │ id           parameters.dose  events_active.sw1  events_active.sw2 \n     │ Symbol       Int64            Bool               Bool\n─────┼────────────────────────────────────────────────────────────────────\n   1 │ dose_1                     1               true              false\n   2 │ dose_10                   10               true              false\n   3 │ dose_100                 100               true              false\n   4 │ multiple_15               15              false               true","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The function reads the content of CSV file, checks components and stores in scn_df variable of DataFrame format.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"This should be loaded into Platform object.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"add_scenarios!(p, scn_df)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"As we can see all 4 scenarios from the table were added.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"p\n+---------------------------------------------------------------------------\n| Platform contains:\n|   1 model(s): nameless. Use `models(platform)` for details.\n|   4 scenario(s): multiple_15, dose_1, dose_10, dose_100. Use `scenarios(platform)` for details.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To get the particular scenario you can use the following syntax.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"scenario1 = scenarios(p)[:dose_1]\n+---------------------------------------------------------------------------\n| Scenario contains:\n|   0 saveat values: Float64[]. Use `saveat(scenario)` for details.\n|   tspan: (0.0, 48.0). Use `tspan(scenario)` for details.\n|   4 parameters(s). Use `parameters(scenario)` for details.\n|   0 measurement(s). Use `measurements(scenario)` for details.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"See more about scenario tables in tabular CSV format.","category":"page"},{"location":"basics/overview/#Import-from-Excel-tables","page":"Quick start","title":"Import from Excel tables","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Instead of using CSV tables one can fill the XSLT file and load scenario table in the same manner.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"scn_df = read_scenarios(\"./my_example/scenarios.xlsx\")","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"4×4 DataFrame\n Row │ id           parameters.dose  events_active.sw1  events_active.sw2 \n     │ Symbol       Int64            Bool               Bool\n─────┼────────────────────────────────────────────────────────────────────\n   1 │ dose_1                     1               true              false\n   2 │ dose_10                   10               true              false\n   3 │ dose_100                 100               true              false\n   4 │ multiple_15               15              false               true","category":"page"},{"location":"basics/overview/#Manual-creation","page":"Quick start","title":"Manual creation","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Scenario objects can be created and loaded without any tables.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"For example we need to create simulations with the default model ","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"dose = 100\nevent sw2 is active \nsimulation time is from 0 to 1000\nwe need to observe all species: A0, C1, C2, and all reactions: v_abs, v_el, v_distr","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Scenario can be created with the following code","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"# to get the default model\nmodel = models(p)[:nameless] \n# creating scenario\nnew_scenario = Scenario(\n    model,\n    parameters = [:dose=>100.],\n    events_active = [:sw1=>false, :sw1=>true],\n    tspan = (0.,1000.),\n    observables = [:A0, :C1, :C2, :v_abs, :v_el, :v_distr]\n    ) \n\n+---------------------------------------------------------------------------\n| Scenario contains:\n|   0 saveat values: Float64[]. Use `saveat(scenario)` for details.\n|   tspan: (0.0, 1000.0). Use `tspan(scenario)` for details.\n|   4 parameters(s). Use `parameters(scenario)` for details.\n|   0 measurement(s). Use `measurements(scenario)` for details.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"See more options in API docs for Scenario function.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To load it into Platform container use the following syntax.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"push!(scenarios(p), :multiple_100=>new_scenario)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"where multiple_100 is an identifier for the scenario in the dictionary.","category":"page"},{"location":"basics/overview/#Creating-measurements","page":"Quick start","title":"Creating measurements","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Measurement in HetaSimulator is representation of experimentally measured value for parameter identification. Each Measurement is associated with some particular scenario, observable value and fixed time point.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"All measurements in the platform are used to calculate the log-likelihood function when required. Measurements are stored inside Scenario objects.","category":"page"},{"location":"basics/overview/#Import-from-CSV-tables-2","page":"Quick start","title":"Import from CSV tables","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"User can load measurement points from one or several tables which follow table format.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Create file measurements.csv file inside my_example with the following structure.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Full file can be downloaded from here: measurements.csv","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"t measurement prob.mean prob.sigma scenario\n0.08333 0.0686283 C1 sigma1 dose_1\n0.08333 0.0684679 C1 sigma1 dose_1\n0.08333 0.0726338 C1 sigma1 dose_1\n0.25 0.119397 C1 sigma1 dose_1\n0.25 0.137662 C1 sigma1 dose_1\n0.25 0.120412 C1 sigma1 dose_1\n0.5 0.131784 C1 sigma1 dose_1\n... ... ... ... ...","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The table can be loaded with the read_measurements function.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"measurements_df = read_measurements(\"./cases/story_3/measurements.csv\")\n90×5 DataFrame\n Row │ t         measurement  prob.mean  prob.sigma  scenario \n     │ Float64   Float64      String     String      Symbol    \n─────┼─────────────────────────────────────────────────────────\n   1 │  0.08333    0.0686283  C1         sigma1      dose_1\n   2 │  0.08333    0.0684679  C1         sigma1      dose_1\n   3 │  0.08333    0.0726338  C1         sigma1      dose_1\n   4 │  0.25       0.119397   C1         sigma1      dose_1\n   5 │  0.25       0.137662   C1         sigma1      dose_1\n  ⋮  │    ⋮           ⋮           ⋮          ⋮           ⋮\n  87 │ 12.0        2.189      C1         sigma3      dose_100\n  88 │ 24.0        0.877502   C1         sigma3      dose_100\n  89 │ 24.0        1.036      C1         sigma3      dose_100\n  90 │ 24.0        0.724612   C1         sigma3      dose_100\n                                                81 rows omitted","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The function reads the content of CSV file, checks components and stores in measurements_df variable of DataFrame format.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To load measurements into Platform function add_measurements! can be used. The function converts all rows into a series of Measurements and associate them with scenario declared in scenario value.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"add_measurements!(p, measurements_df)","category":"page"},{"location":"basics/overview/#Import-from-Excel-tables-2","page":"Quick start","title":"Import from Excel tables","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Instead of using CSV tables one can fill the XSLT file and load measurements table in the same manner.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"measurements_df = read_measurements(\"./my_example/measurements.xlsx\")","category":"page"},{"location":"basics/overview/#Solving-problems","page":"Quick start","title":"Solving problems","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"There are three main problem types that can currently be solved with HetaSimulator:","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Simulation of time-dependence for selected observables for one or several scenarios using sim method.\nMonte-Carlo type simulations that performs repeated simulations based on pre-set parameters distributions with mc method.\nFitting or parameter identification problem that optimizes values of selected model constants to reach the minimal discrepancy between simulations and experimental values which is solved by fit method.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Each method returns the solution of its specific type: SimResults, MCResults and FitResults or other types that include them.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The methods can be applied on different levels: Platform, Scenario or Model to allow applying all scenarios in the platform, some of them or the default one. Some important \"target vs method\" variants are shown in the next table.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Target Method Results Comments\nPlatform sim Vector{Pair{Symbol,SimResults}} All or selected list of scenarios in model will run\nScenario sim SimResults Only target scenario will run\nModel sim SimResults The scenario created from default model's options will run\nPlatform mc Vector{Pair{Symbol,MCResults}} All or selected list of scenarios in model will run multiple times.\nScenario mc MCResults Target scenario will run multiple times\nModel mc SimResults The default scenario will run multiple times\nPlatform fit FitResults All or selected list of scenarios together their measurements will be used to optimize parameters.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"This page provides the example of applying methods on the Platform level only","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"See more information for each method in extended description: sim explanations, mc explanations, fit explanations.","category":"page"},{"location":"basics/overview/#Simulation","page":"Quick start","title":"Simulation","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"See more details about sim method in sim method chapter.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"On the previous steps we created the platform p and populated it with 4 scenarios and measurement points.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Without additional preparations we can simulate the platform which means running all 4 scenarios and combining all results into one object.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"res = sim(p)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"+---------------------------------------------------------------------------\n| Simulation results for 4 scenario(s).\n| [:multiple_15 => ..., :dose_1 => ..., :dose_10 => ..., :dose_100 => ...]\n| Use `sol[id]` to get component by id.\n| Use `sol[i]` to get component by number.\n| Use `DataFrame(sol)` to transform.\n| Use `plot(sol)` to plot results.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The whole solution consists of parts which corresponds to number of scenarios in Platform.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The results can be plotted using default plot method.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"plot(res)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"(Image: sim1)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The whole solution can also be translated into DataFrame.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"res_df = DataFrame(res)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"1031×6 DataFrame\n  Row │ t             A0            C1           C2           scope   scenario   \n      │ Float64       Float64       Float64      Float64      Symbol  Symbol      \n──────┼───────────────────────────────────────────────────────────────────────────\n    1 │  0.0           0.0          0.0          0.0          ode_    multiple_15\n    2 │  0.0          15.0          0.0          0.0          sw2     multiple_15\n    3 │  3.33311e-6   14.999        0.000158714  2.49537e-11  ode_    multiple_15\n    4 │  3.66642e-5   14.989        0.00174525   3.0187e-9    ode_    multiple_15\n  ⋮   │      ⋮             ⋮             ⋮            ⋮         ⋮          ⋮\n 1029 │ 45.1252       -3.9532e-26   0.0292381    0.108637     ode_    dose_100\n 1030 │ 47.5238        3.29325e-27  0.0247767    0.0920607    ode_    dose_100\n 1031 │ 48.0          -6.75365e-28  0.0239764    0.089087     ode_    dose_100\n                                                                 1024 rows omitted","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"User can work with the solution component by using indexing by component number, like here res[1] or by scenario id res[:dose_1].","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Any component can also be transformed into DataFrame.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"res_df1 = DataFrame(res[1])","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"702×6 DataFrame\n Row │ t              A0            C1           C2           scope   scenario   \n     │ Float64        Float64       Float64      Float64      Symbol  Symbol      \n─────┼────────────────────────────────────────────────────────────────────────────\n   1 │   0.0           0.0          0.0          0.0          ode_    multiple_15\n   2 │   0.0          15.0          0.0          0.0          sw2     multiple_15\n   3 │   3.33311e-6   14.999        0.000158714  2.49537e-11  ode_    multiple_15\n   4 │   3.66642e-5   14.989        0.00174525   3.0187e-9    ode_    multiple_15\n  ⋮  │       ⋮             ⋮             ⋮            ⋮         ⋮          ⋮\n 700 │ 168.0           2.79899e-18  0.0232934    0.0865488    ode_    multiple_15\n 701 │ 168.0           2.79899e-18  0.0232934    0.0865488    ode_    multiple_15\n 702 │ 168.0          15.0          0.0232934    0.0865488    sw2     multiple_15\n                                                                  695 rows omitted","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"The component can also be plotted.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"plot(res[1])","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"(Image: sim2)","category":"page"},{"location":"basics/overview/#Monte-Carlo","page":"Quick start","title":"Monte-Carlo","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Monte-Carlo method runs simulation many times combining all simulations into single object MCResults. You should clarify here the distribution of random parameters and number of iterations.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"mc_res = mc(p, [:kabs=>Normal(10.,1e-1), :kel=>Normal(0.2,1e-3)], 1000)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"+---------------------------------------------------------------------------\n| Monte-Carlo results for 4 scenario(s).\n| [:multiple_15 => ..., :dose_1 => ..., :dose_10 => ..., :dose_100 => ...]\n| Use `sol[id]` to get component by id.\n| Use `sol[i]` to get component by number.\n| Use `DataFrame(sol)` to transform.\n| Use `plot(sol)` to plot results.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To transform everything into DataFrame","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"mc_df = DataFrame(mc_res)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"946000×7 DataFrame\n    Row │ iter   t             A0           C1           C2           scope   scenario   \n        │ Int64  Float64       Float64      Float64      Float64      Symbol  Symbol      \n────────┼─────────────────────────────────────────────────────────────────────────────────\n      1 │     1   0.0           0.0         0.0          0.0          ode_    multiple_15 \n      2 │     1   0.0          15.0         0.0          0.0          sw2     multiple_15\n      3 │     1   6.67001e-6   14.999       0.000158714  4.99357e-11  ode_    multiple_15\n      4 │     1   7.33701e-5   14.989       0.00174525   6.04082e-9   ode_    multiple_15\n      5 │     1   0.000740371  14.8894      0.0175505    6.13689e-7   ode_    multiple_15\n      6 │     1   0.00602741   14.1231      0.139042     3.99353e-5   ode_    multiple_15\n   ⋮    │   ⋮         ⋮             ⋮            ⋮            ⋮         ⋮          ⋮\n 945996 │  1000  46.6664        4.55058e-7  0.247023     0.484307     ode_    dose_100\n 945997 │  1000  47.0172        4.55058e-7  0.243049     0.476516     ode_    dose_100\n 945998 │  1000  47.3681        4.55059e-7  0.239139     0.46885      ode_    dose_100\n 945999 │  1000  47.719         4.55058e-7  0.235292     0.461307     ode_    dose_100\n 946000 │  1000  48.0           1.28404e-7  0.232256     0.455355     ode_    dose_100\n                                                                       945989 rows omitted","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To plot everything use plot","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"plot(mc_res)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"(Image: fig3)","category":"page"},{"location":"basics/overview/#Fitting","page":"Quick start","title":"Fitting","text":"","category":"section"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To run optimization problem you need to do three steps:","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Be sure that you measurement points are loaded in a proper way: referred Scenarios exists, proper error model is chosen\nIf required add parameters responsible for noise distribution into a model code, like sigma etc.\nselect a set of constants which will be fitted and set initial values for them.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"For the presented example we uses normal distribution of measurement error with unknown variance parameter sigma1, sigma2, sigma3 for doses 1, 10 and 100.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"We need to add this unknown parameters into the Heta code updating the initial model:","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"...\nA0 [sw2]= dose;\n\n// parameters for fitting\nsigma1 @Const = 0.1;\nsigma2 @Const = 0.1;\nsigma3 @Const = 0.1;","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Take a note that the model compilation and loading Scenarios  and Measurements should be repeated because p object was rebuild.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"p = load_platform(\"$HetaSimulatorDir/cases/story_3\")\n\nscn_df = read_scenarios(\"$HetaSimulatorDir/cases/story_3/scenarios.csv\")\nadd_scenarios!(p, scn_df)\n\nmeasurements_df = read_measurements(\"$HetaSimulatorDir/cases/story_3/measurements.csv\")\nadd_measurements!(p, measurements_df)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To check the initial simulated vs measured results the standard plot method can be used.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"res0 = sim(p)\nplot(res0, yscale=:log, ylims=(1e-3,1e2))","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"(Image: sim4)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"Now let's run fitting.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"to_fit = [\n    :kabs => 8.0,\n    :Q => 4.0,\n    :kel => 2.2,\n    :sigma1 => 0.1,\n    :sigma2 => 0.1,\n    :sigma3 => 0.1,\n]\nfit_res = fit(p, to_fit)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"+---------------------------------------------------------------------------\n| Fitting results:\n|   status: FTOL_REACHED\n|   optim: [:kabs => 9.664612290142436, :Q => 3.182280353785782, :kel => 0.20333675237278281, :sigma1 => 0.20073592014870978, :sigma2 => 0.15748031874469834, :sigma3 => 0.11672689231044918]. Access optim estimate with `optim(f::FitResults)`\n|   objective function value: 4164.493819852298. Access objective value with `obj(f::FitResults)`\n|   number of objective function evaluations: 134\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"To get the list of optimal parameters values we should use optim function.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"optim(fit_res)","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"6-element Vector{Pair{Symbol, Float64}}:\n   :kabs => 9.664612290142436\n      :Q => 3.182280353785782\n    :kel => 0.20333675237278281\n :sigma1 => 0.20073592014870978\n :sigma2 => 0.15748031874469834\n :sigma3 => 0.11672689231044918","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"You can simulate and plot results with the following code.","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"res_optim = sim(p, parameters_upd = optim(fit_res))\nplot(res_optim, yscale=:log, ylims=(1e-3,1e2))","category":"page"},{"location":"basics/overview/","page":"Quick start","title":"Quick start","text":"(Image: sim5)","category":"page"},{"location":"tutorial/mc/#Monte-Carlo.-Statistics-calculation","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Monte-Carlo simulations in HetaSimulator can be run using the mc method. It can be applied for: single scenario, series of scenarios and the whole platform.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"_Before start be sure you have the latest HetaSimulator.jl version. If you don't have it reinstall using the Julia environment.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"] # switch to Pkg mode\nadd https://github.com/hetalang/HetaSimulator.jl","category":"page"},{"location":"tutorial/mc/#Working-example","page":"Monte-Carlo. Statistics calculation","title":"Working example","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"This lesson uses the following modeling code. ","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"comp1 @Compartment .= 1.1;\ncomp2 @Compartment .= 2.2;\n\na @Species { compartment: comp1, output: true } .= 10;\nb @Species { compartment: comp1, output: true } .= 0;\nc @Species { compartment: comp1, output: true } .= 1;\nd @Species { compartment: comp2 } .= 0;\n\nr1 @Reaction { actors: a => b };\nr2 @Reaction { actors: b + c <=> d };\nr1 := k1 * a;\nr2 := k2 * b * c - k3 * d;\n\nk1 @Const = 1e-3;\nk2 @Const = 1e-4;\nk3 @const = 2.2e-2;\n\n// test\nsw1 @TimeSwitcher {start: 50};\na [sw1]= a + 1;\n\n//sw2 @TimeSwitcher {start: 100};\n//b [sw2]= 0;\n\n//sw3 @DSwitcher {trigger: a <= 9};\n//a [sw3]= a + 2;\n\n//ss1 @StopSwitcher {trigger: t > 10};","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Create index.heta file with the contend and place it into the monte_carlo directory.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Load the platform into the Julia environment. You should clarify the path to the modeling platform as the first argument.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"using HetaSimulator, Plots\nusing Distributed # to use parallel simulations\n\nplatform = load_platform(\"./monte_carlo\")\nmodel = platform.models[:nameless]","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Model containing 3 constants, 8 records, 1 switchers.\n    Use `constants(model)` to get the constants.\n    Use `records(model)` to get the records.\n    Use `switchers(model)` to get the switchers.\n  Use the following methods to get the default options:\n    - parameters(model)\n    - events_active(model)\n    - events_save(model)\n    - observables(model)","category":"page"},{"location":"tutorial/mc/#Single-scenario-simulations","page":"Monte-Carlo. Statistics calculation","title":"Single scenario simulations","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Create two scenarios as follows. ","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcscn1 = Scenario(\n  model;\n  tspan = (0., 200.),\n  parameters = [:k1=>0.01],\n  saveat = [50., 80., 150.]\n)\n\nmcscn2 = Scenario(\n  model;\n  tspan = (0., 200.),\n  parameters = [:k1=>0.02],\n  saveat = [50., 100., 200.]\n)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"The scenarios updates the parameter k1 value (@Const component in model) and clarify time points to save using saveat argument. The observables vector is not set, so outputs will be taken from default set: a, b, c.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Monte-Carlo simulations mc can be used to simulate single scenario mcscn1 and plot results. The second argument in mc is the distribution for all independent parameters. The format of the argument is the vector of pairs where the first element is parameter id and the second one is the distribution rule. You can also set the Float64 value of a parameter here and this rewrites the value in a model without putting variability. The third argument is the number of Monte-Carlo simulations to do.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcsim1 = mc(mcscn1, [:k1=>Uniform(1e-3,1e-2), :k2=>Normal(1e-3,1e-4), :k3=>Normal(1e-4,1e-5)], 100)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"We can limit the components for visualization with vars argument in plot.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"plot(mcsim1, vars=[:b])","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig01)","category":"page"},{"location":"tutorial/mc/#Multiple-scenarios-simulations","page":"Monte-Carlo. Statistics calculation","title":"Multiple scenarios simulations","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"In the same way as it was done for sim method we can also run mc for multiple scenarios. The returned object will be of type MCResults.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcsim2 = mc(\n    [:mc1=>mcscn1,:mc2=>mcscn2],\n    [:k1=>0.01, :k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)],\n    100\n  )\nplot(mcsim2)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig02)","category":"page"},{"location":"tutorial/mc/#Monte-Carlo-for-whole-platform","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo for whole platform","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Scenarios for mc can also be loaded from CSV file.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Create file scenarios.csv in the same directory and fill it with the data.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig03)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Load it as a scenarios table.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"scn_csv = read_scenarios(\"./scenarios.csv\")\nadd_scenarios!(platform, scn_csv)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Apply mc for the platform which is the same as simulations for all Scenarios of the platform.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcplat = mc(\n    platform,\n    [:k1=>0.01, :k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)],\n    100\n  )\nplot(mcplat)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig04)","category":"page"},{"location":"tutorial/mc/#Using-pre-generated-parameter-set","page":"Monte-Carlo. Statistics calculation","title":"Using pre-generated parameter set","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"In many practical cases it will be more useful to generate random parameters and run simulations in two steps. It is possible to do (1) creating DataFrame with parameter sets and (2) using it as an argument for mc method.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Parameter set can be created using the base DataFrame constructor.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcvecs0 = DataFrame(k1=0.01, k2=rand(Normal(1e-3,1e-4), 50), k3=rand(Uniform(1e-4,1e-2), 50))","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Or it can be loaded from CSV file.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig05)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcvecs = read_mcvecs(\"./params.csv\")","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"100×3 DataFrame\n Row │ k1          k2           k3\n     │ Float64     Float64      Float64     \n─────┼──────────────────────────────────────\n   1 │ 0.00904655  0.00109494   0.00938817\n   2 │ 0.00342413  0.000952441  0.00274764\n  ⋮  │     ⋮            ⋮            ⋮\n 100 │ 0.00318838  0.00106162   0.000996487\n                             97 rows omitted","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"This DataFrame can be used as the second argument in mc.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"mcv1 = mc(\n  mcscn1,\n  mcvecs\n)\nplot(mc1)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig06)","category":"page"},{"location":"tutorial/mc/#Monte-Carlo-statistics","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo statistics","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Monte-Carlo results can be used to calculate some characteristics which will be called \"statistics\".","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"There are some standard methods borrowed from DiffEq.jl package (see more here https://diffeq.sciml.ai/stable/features/ensemble/#Summary-Statistics).","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"See below several methods that calculates statistics for some particular time point.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"timestep_mean(mcv1,2)\ntimepoint_mean(mcv1,80)\n\n# median\ntimestep_median(mcv1,2)\ntimepoint_median(mcv1,80)\n\n# meanvar\ntimestep_meanvar(mcv1,2)\ntimepoint_meanvar(mcv1,80)\n\n# meancov\ntimestep_meancov(mcv1,2,3)\ntimepoint_meancov(mcv1,80.,150.)\n\n# meancor\ntimestep_meancor(mcv1,2,3)\ntimepoint_meancor(mcv1,80.,150.)\n\n# quantile\ntimestep_quantile(mcv1,0.95,2)\ntimepoint_quantile(mcv1,0.95,80.)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"The next methods calculates statistics for all time points.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"timeseries_steps_mean(mcv1) # Computes the mean at each time step\ntimeseries_steps_median(mcv1) # Computes the median at each time step\ntimeseries_steps_quantile(mcv1,0.95) # Computes the quantile q at each time step\ntimeseries_steps_meanvar(mcv1) # Computes the mean and variance at each time step\ntimeseries_steps_meancov(mcv1) # Computes the covariance matrix and means at each time step\ntimeseries_steps_meancor(mcv1) # Computes the correlation matrix and means at each time step","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"And finally there is an example of statistics summary and visualization.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"# Ensemble Summary\nens = EnsembleSummary(mcsim1;quantiles=[0.05,0.95])\nplot(ens)","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"(Image: mc-fig07)","category":"page"},{"location":"tutorial/mc/#Final-remarks","page":"Monte-Carlo. Statistics calculation","title":"Final remarks","text":"","category":"section"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"Monte-Carlo simulations can be done for both tspan and saveat approaches. ","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"If you set saveat the another argument tspan will be ignored.   In case of tspan approach time points in results will be selected automatically.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"If you are going to use \"statistics\" methods you should always set the saveat argument.\nIf you run mc with parameters generated online, i.e. without pre-generated set currently you cannot obtain the input parameters values directly.","category":"page"},{"location":"tutorial/mc/","page":"Monte-Carlo. Statistics calculation","title":"Monte-Carlo. Statistics calculation","text":"This will be fixed in one of future releases. Before that if you need them use pre-generation.","category":"page"},{"location":"basics/loading-platform/#Loading-platforms","page":"Loading platforms","title":"Loading platforms","text":"","category":"section"},{"location":"table-formats/scenario/#Scenarios-tables","page":"Scenarios tables","title":"Scenarios tables","text":"","category":"section"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"Scenarios tables are CSV or XLSX files which store Scenario objects in tabular format. The content of the table can be loaded into Julia environment as a DataFrame to be included into Platform object.","category":"page"},{"location":"table-formats/scenario/#Format","page":"Scenarios tables","title":"Format","text":"","category":"section"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"The structure of the tables corresponds to Scenario properties. The first row is intended for headers which clarify the columns meaning. The sequence of columns is not important.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"id : a String representing unique identifier of Scenario if you load into Platform object. The string should be unique within the scenario set and must follow the common identifier rules: no blank spaces, no digit at the first symbol, etc.\nmodel : a String identifier of model which will be used for simulations. The default value is nameless.\nparameters.<id> (optional) : a Float64 value which updates and fixes the value of model's Const with the corresponding id. Missing value does not updates the parameter's value and is ignored.\nsaveat[] (* optional) : a set of Float64 values separated by semicolons. The values states the time points for simulated output.\ntspan (* optional) : a Float64 value which are maximal simulation time point. BTW the initial time point is always 0.\nobservables[] (optional) : a set of String separated by semicolon. They state the model records that will be saved as simulation results. If not set the default observables will be used (output: true property in Heta notation).\nevents_active.<id> (optional) : a Bool value which updates turns on and off events in model. The id is switcher identifier in the Heta. If it is not set the switcher.active state from Heta model will be used.\nevents_save.<id> (optional, experimental) : a pair of Bool values divided by semicolon. This value set if it is required to save the output value before and after the event. If not set both: before and after values will be saved.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"* saveat[] or tspan must be set for the particular Scenario. If you set both only saveat[] will be used.","category":"page"},{"location":"table-formats/scenario/#Loading-to-Platform","page":"Scenarios tables","title":"Loading to Platform","text":"","category":"section"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"Scenario table can be loaded into Julia environment as a DataFrame using HetaSimulator.read_scenarios method. This method reads the file, checks the content and formats the data to be used inside Platform object.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"scn_csv = read_scenarios(\"./scenarios.csv\")\n\n4×7 DataFrame\n Row │ id         parameters.k1  parameters.k2  parameters.k3  saveat[]           tspan      observables[] \n     │ Symbol     Float64?       Float64?       Float64?       String?            Float64?   String?       \n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ dataone     missing               0.001           0.02  0;12;24;48;72;120      150.0  missing       \n   2 │ withdata2         0.001     missing         missing     0;12;24;48;72;120  missing    missing       \n   3 │ three             0.001           0.1       missing     missing                250.0  missing       ","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"The data frame can be loaded into platform using the HetaSimulator.add_scenarios! method.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"add_scenarios!(platform, scn_csv)\n\nscenarios(platform)\nDict{Symbol, Scenario} with 4 entries:\n  :three     => Scenario{...}\n  :withdata2 => Scenario{...} \n  :dataone   => Scenario{...}","category":"page"},{"location":"table-formats/scenario/#Example","page":"Scenarios tables","title":"Example","text":"","category":"section"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"Loading file scenarios.csv with the following content.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"id model parameters.k1 parameters.k2 parameters.k3 saveat[] tspan observables[] events_active.sw1 events_active.sw2 events_save.sw1\nscn1   0.001 0.02 0;12;24;48;72;120;150   true false true;false\nscn2 nameless 0.001    1000   true \nscn3 another_model  0.001  0;12;24;48;72;120   false  ","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"Read as DataFrame object.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"scenarios = read_scenarios(\"./scenarios.csv\")","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"Add all scenarios to Platform","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"add_scenarios!(platform, scenarios)","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"As a result the Platform will contain three scenarios: scn1, scn2, scn3.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"These operations are equivalent of manually created Scenario objects.","category":"page"},{"location":"table-formats/scenario/","page":"Scenarios tables","title":"Scenarios tables","text":"scn1 = Scenario(\n  platform.models[:nameless];\n  parameters = [:k2=>0.001, :k3=>0.02],\n  saveat = [0, 12, 24, 48, 72, 120, 150],\n  events_active = [:sw1=>true, :sw2=>false],\n  events_save = [:sw1=>(true,false)]\n)\npush!(platform.scenarios, :scn1=>scn1)\n\nscn2 = Scenario(\n  platform.models[:nameless];\n  parameters = [:k1=>0.001],\n  tspan = (0., 1000.),\n  events_active = [:sw2=>true]\n)\npush!(platform.scenarios, :scn2=>scn2)\n\nscn3 = Scenario(\n  platform.models[:another_model];\n  parameters = [:k2=>0.001],\n  saveat = [0, 12, 24, 48, 72, 120],\n  events_active = [:sw1=>false]\n)\npush!(platform.scenarios, :scn3=>scn3)\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"HetaSimulator is an OpenSource simulation and parameters estimation (fitting) platform for the Heta modeling language.  The main purpose of the package is to establish the linkage between emerging QSP frameworks and fast computational methods (parallel simulations, automatic differentiation, etc.).","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Heta language is a domain-specific modeling language (DSL) for dynamic quantitative models used in quantitative systems pharmacology (QSP) and systems biology (SB). The Heta code and the tabular formats can be translated into variety of formats like Simbiology, Matlab, mrgsolve, DBSolve and many others.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides the simulation engines for the Heta-based models and modeling platforms to be run in Julia. A QSP model can be directly run using the HetaSimulator without additional tools. The ODE system in general form can also be run with HetaSimulator.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main features of the package are","category":"page"},{"location":"","page":"Home","title":"Home","text":"reach capabilities for estimating parameters' values based on experimental datasets\nsupport for working with multiple models including simultaneous fitting\nparallel simulations\nstorage of data and scenarios the unified formats\nimport of datasets and scenarios from CSV/Excel tables \nfull Heta standard support\nstoring models, scenarios and data in the Platform object for easy management of platform components\nutilizing the facilities of OpenSource projects like Julia and SciML ecosystem.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"It is assumed that you have Julia v1.6 installed. The latest Julia release can be downloaded from julialang.org","category":"page"},{"location":"","page":"Home","title":"Home","text":"To install or update HetaSimulator and Heta compiler run the code below in Julia environment:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\n(@v1.6) pkg> add https://github.com/hetalang/HetaSimulator.jl.git\njulia> using HetaSimulator\njulia> heta_update() # installs \"Heta compiler\" in NodeJS","category":"page"},{"location":"","page":"Home","title":"Home","text":"Internally HetaSimulator uses Heta compiler which must be installed inside the package. If you want to update it to the last version just run.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> heta_update() # updates to the latest stable version","category":"page"},{"location":"#Basic-usage","page":"Home","title":"Basic usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Create a model in Heta format or use your Heta-based platform. Here we will use the example with a simple model with two species and one reaction.","category":"page"},{"location":"","page":"Home","title":"Home","text":"// index.heta file in directory \"my_project\"\ncomp1 @Compartment .= 1.5;\n\ns1 @Species {compartment: comp1, output: true} .= 12;\ns2 @Species {compartment: comp1, output: true} .= 0;\n\nr1 @Reaction {actors: s1 => s2, output: true} := k1 * s1 * comp1;\n\nk1 @Const = 1e-3;","category":"page"},{"location":"","page":"Home","title":"Home","text":"To read more about Heta read Heta specifications","category":"page"},{"location":"","page":"Home","title":"Home","text":"using HetaSimulator, Plots\n\n# set the absolute or relative path to the project directory\nplatform = load_platform(\"./my_project\")\n# wait for the platform compilation...\n\n# get the default Heta model\nmodel = platform.models[:nameless]\n\n# single simulation and plot\nresults = Scenario(model; tspan = (0., 1200.)) |> sim\nplot(results)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Plot)","category":"page"},{"location":"","page":"Home","title":"Home","text":"# transform results to data frame\ndf = DataFrame(results)\n...\n9×4 DataFrame\n Row │ t             s1        s2           scope  \n     │ Float64       Float64   Float64      Symbol \n─────┼─────────────────────────────────────────────\n   1 │    0.0555525  11.9993   0.000666611  ode_\n   2 │    0.611077   11.9927   0.00733069   ode_","category":"page"},{"location":"#Architecture","page":"Home","title":"Architecture","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The user of HetaSimulator typically deals with the following three types:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Model - an ODE model, containing rhs, rules, initial parameters and vector of events.\nScenario - scenario representing a special model's setup for simulations or fitting. This setup can include initial parameters and events settings, output variables etc. In case of fitting Scenario should also include experimental data. A common usage of Scenario can be model's simulation with different drugs (parameters and events setup). Different Scenario's can be united to run multi-scenarios simulations and fitting.\nPlatform - container for different Models and Scenarios.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The user can perform the following three operations with both Model, Scenario and Platform","category":"page"},{"location":"","page":"Home","title":"Home","text":"sim - run a single or multi-scenarios simulations. \nfit - fit a model to experimental data. \nmc - run Monte-Carlo or virtual patients simulations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See documentation for detailed overview of HetaSimulator types and functions' arguments.","category":"page"},{"location":"#Known-issues-and-limitations","page":"Home","title":"Known issues and limitations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Currently the HetaSimulator package is not published on Julia repository, use the direct link to install   julia  ] add https://github.com/hetalang/HetaSimulator.jl","category":"page"},{"location":"#Getting-help","page":"Home","title":"Getting help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Read the docs\nUse Gitter Chatroom.\nUse Issue Tracker","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is distributed under the terms of the MIT License.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copyright 2020-2021, InSysBio LLC","category":"page"},{"location":"#Authors-and-history","page":"Home","title":"Authors and history","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Ivan Borisov\nEvgeny Metelkin","category":"page"},{"location":"tutorial/sim/#Scenario.-Simulation","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"","category":"section"},{"location":"tutorial/sim/#Working-example","page":"Scenario. Simulation","title":"Working example","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"As an example we will use a model describing a simple two-compartment pharmacokinetic model stored in single .heta file. It is expected that the model code will be placed into \"index.heta\" file located in a directory my_example or something like that.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"// Compartments\nVol0 @Compartment .= 1;\nVol1 @Compartment .= 6.3;\nVol2 @Compartment .= 10.6;\n\n// Species\nA0 @Species {compartment: Vol0, isAmount: true, output: true} .= 0;\nC1 @Species {compartment: Vol1, output: true} .= 0;\nC2 @Species {compartment: Vol2, output: true} .= 0;\n\n// Reactions\nv_abs @Reaction {actors: A0 = C1} := kabs * A0;\nv_el @Reaction {actors: C1 =} := Vol1 * (kel * C1); // Vol1 * (kmax * C1 / (Km + C1));\nv_distr @Reaction {actors: C1 = C2} := Q * (C1 - C2);\n\n// Parameters\ndose @Const = 20;\nkabs @Const = 20;\nkel @Const = 0.5;\nQ @Const = 1.0;\n\n// single dose event\nsw1 @TimeSwitcher {start: 0};\nA0 [sw1]= dose;\n\n// multiple dose event, default off\nsw2 @TimeSwitcher {start: 0, period: 24, active: false};\nA0 [sw2]= dose;","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The modeling platform includes only one namespace nameless which is the default one. After loading into HetaSimulator the single Model with id :nameless will be available.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"using HetaSimulator, Plots\n\n# create Platform from the project files\n# \"index.heta\" file inside is the default entry point\np = load_platform(\"./my_example\");\n\n# get the default model\nmodel = models(p)[:nameless]","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"No declaration file, running with defaults...\n[info] Builder initialized in directory \"Y:\\my_example\".\n[info] Compilation of module \"index.heta\" of type \"heta\"...\n[info] Reading module of type \"heta\" from file \"Y:\\my_example\\index.heta\"...\n[info] Setting references in elements, total length 52\n[info] Checking for circular references in Records.\n[warn] Units checking skipped. To turn it on set \"unitsCheck: true\" in declaration.\n[info] Checking unit's terms.\n[warn] \"Julia only\" mode\n[info] Exporting to \"Y:\\my_example\\_julia\" of format \"Julia\"...\nCompilation OK!\nLoading platform... OK!\n\nModel containing 4 constants, 9 records, 2 switchers.\n   Use `constants(model)` to get the constants.\n   Use `records(model)` to get the records.\n   Use `switchers(model)` to get the switchers.\n Use the following methods to get the default options:\n   - parameters(model)\n   - events_active(model)\n   - events_save(model)\n   - observables(model)","category":"page"},{"location":"tutorial/sim/#Creating-scenarios","page":"Scenario. Simulation","title":"Creating scenarios","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Scenario in HetaSimulator is a type storing a model together with conditions and simulation settings like time-range, output variable, updated parameter values, activate or inactivate events, etc.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The scenario-based approach is used to store pre-defined model's options: dose values, experimental scenarios, data saving options, initial values and others which can be applied for one or multiple models. The Scenario also stores Measurement points which is used for parameters identification and visualization.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Scenario is created from default options passed from its model and user defined options from tables or set manually.","category":"page"},{"location":"tutorial/sim/#Manual-creation-of-Scenario","page":"Scenario. Simulation","title":"Manual creation of Scenario","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Scenario objects can be created and loaded directly from Julia environment.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The minimal set of properties to create a scenario is the tspan or saveat arguments in Scenario constructor. The next code will create a Scenario for simulating the default model with time range from 0 to 10. The rest of options will be taken from default :nameless model:","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"output records (observables) will be taken from records marked with {output: true} in heta code.\nall switchers (events) will be active if {active: true} is not set.\nconstant values (parameters) will be the same as they stated in the heta file.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# minimal scenario\nscenario0 = Scenario(model, tspan = (0, 10))","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Scenario for tspan=(0.0, 10.0)\n   tspan: (0.0, 10.0).\n   saveat: Float64[].\n   4 parameters. Use `parameters(scenario)` for details.\n   0 measurements. Use `measurements(scenario)` for details.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The scenario can be simulated from the scenario and plotted.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"res0 = sim(scenario0)\nplot(res0)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"(Image: fig01)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Creating scenario we can also update some of the model default options. The next example is the case when we want to update the simulation conditions:","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Update value of constant dose = 100.\nUse multiple dose event sw2 instead of single dose.\nsimulation time is from 0 to 1000.\nwe need to observe all species: C1, C2, and reactions v_el.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The Scenario can be created with the following code:","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# creating scenario\nscenario1 = Scenario(\n    model,\n    parameters = [:dose=>100.],\n    events_active = [:sw1=>false, :sw2=>true],\n    tspan = (0.,50.),\n    observables = [:C1, :C2, :v_el]\n)\nres1 = sim(scenario1)\nplot(res1)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"(Image: fig02)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"To read more about available options see API docs for Scenario function.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"It is necessary to mention that scenario0 and scenario1 after creation are not parts of p platform. To add them into storage we can use the following syntax.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# push all into `scenarios` dictionary\nadd_scenarios!(p, [:scn0 => scenario0, :scn1 => scenario1])","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"where :scn0 and :scn are identifiers for the scenarios in the dictionary.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"As it can be seen now the model include them.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Platform with 1 models, 2 scenarios, 0 measurements\n   Models: nameless. Use `models(platform)` for details.\n   Scenarios: scn1, scn0. Use `scenarios(platform)` for details.","category":"page"},{"location":"tutorial/sim/#Import-scenarios-from-CSV-tables","page":"Scenario. Simulation","title":"Import scenarios from CSV tables","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The most simple way to populate a platform by scenarios is to create a file with Scenario in tabular CSV format.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Create file scenarios.csv file inside my_example with the following content.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"(Image: fig03)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The table can be created in Excel, saved as a CSV file and then loaded with the read_scenarios function as a DataFrame.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"scenarios_df = read_scenarios(\"./my_example/scenarios.csv\")","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"4×4 DataFrame\n Row │ id           parameters.dose  events_active.sw1  events_active.sw2 \n     │ Symbol       Int64            Bool               Bool\n─────┼────────────────────────────────────────────────────────────────────\n   1 │ dose_1                     1               true              false\n   2 │ dose_10                   10               true              false\n   3 │ dose_100                 100               true              false\n   4 │ multiple_15               15              false               true","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The function reads the content of CSV file, checks components and stores in scenarios_df variable of DataFrame format. CSV files can be created with any other tools. User can also load tables from XLSX files using the same syntax.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The content of the DataFrame should be loaded into Platform object.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"add_scenarios!(p, scenarios_df)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"As we can see all 4 scenarios from the table were added.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"p","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Platform with 1 models, 6 scenarios, 0 measurements\n   Models: nameless. Use `models(platform)` for details.\n   Scenarios: multiple_15, dose_1, dose_10, scn1, dose_100, scn0. Use `scenarios(platform)` for details.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The particular scenario loaded directly into Platform can be obtained using the syntax.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"scenario2 = scenarios(p)[:dose_1]","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Scenario for tspan=(0.0, 50.0)\n   tspan: (0.0, 50.0).\n   saveat: Float64[].\n   4 parameters. Use `parameters(scenario)` for details.\n   0 measurements. Use `measurements(scenario)` for details.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"See more about scenario tables in tabular CSV format.","category":"page"},{"location":"tutorial/sim/#Single-scenario-simulations","page":"Scenario. Simulation","title":"Single scenario simulations","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The base sim method is applied for a Scenario object. This object can be created directly using Scenario constructor or taken from Platform object.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The result of sim function execution is solution of ODE with parameters passed from (1) Model content and default settings, (2) settings passed from created Scenario object and (3) additional settings from sim function. ","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"res2 = sim(scenario2)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"91x3 SimResults with status :Success.\n    Use `DataFrame(res)` to convert results to DataFrame.\n    Use `plot(res)` to plot results.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"sim method applied for a single Scenario returns object of type HetaSimulator.SimResults.  The method has the additional arguments which can set the integration methods and other options. For more information see sim","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The results can be visualized using plot recipe which create the default representation of SimResults content. ","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# plot all\nplot(res2)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"(Image: fig04)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The figure displays all simulated points and all output variables declared in observables of the scenario. A user can select chosen observables for displaying. The other general plot arguments like yscale, ylim and others can be used.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# plot C1, C2\nplot(res2, vars = [:C1, :C2])","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"(Image: fig05)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The results can be transformed into DataFrame object for further modifications and saving.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# for all observables\nres_df = DataFrame(res1)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"91×5 DataFrame\n Row │ t            A0            C1           C2           scope  \n     │ Float64      Float64       Float64      Float64      Symbol \n─────┼─────────────────────────────────────────────────────────────\n   1 │  0.0          0.0          0.0          0.0          ode_\n   2 │  0.0          1.0          0.0          0.0          sw1\n  ⋮  │      ⋮            ⋮             ⋮            ⋮         ⋮\n  90 │ 48.7368      -3.03066e-34  0.00022778   0.000846342  ode_\n  91 │ 50.0          4.06546e-35  0.000208774  0.000775723  ode_\n                                                    87 rows omitted","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"As in plot method the observables can be selected by the optional vars argument.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# for C1, C2\nres_df = DataFrame(res1, vars = [:C1, :C2])","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"To save the table into a file the CSV file format can be used.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"using CSV\n\n# save to file\nCSV.write(\"export_df.csv\", res_df)","category":"page"},{"location":"tutorial/sim/#Multiple-scenario-simulations","page":"Scenario. Simulation","title":"Multiple scenario simulations","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"There is an approach to simulate multiple conditions simultaneously.  sim can be applied for all or selected Scenarios in a platform.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# all scenarios\nres_mult = sim(p)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"Progress: 100%[==================================================] Time: 0:00:06\n6-element Vector{Pair{Symbol, SimResults}}\n        :multiple_15 => 237x3 SimResults with status :Success.\n        :dose_1 => 91x3 SimResults with status :Success.\n        :dose_10 => 109x3 SimResults with status :Success.\n        :scn1 => 320x3 SimResults with status :Success.\n        :dose_100 => 132x3 SimResults with status :Success.\n        :scn0 => 83x3 SimResults with status :Success.\n    Use `DataFrame(sol)` to transform.\n    Use `plot(sol)` to plot results.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The result of the method applied for a platform will be a vector of pairs Symbol identifier vs SimResults. To obtain the particular sim result a user can use numerical or symbol indexing.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# to get 2d result\nres_mult[2][2]","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"91x3 SimResults with status :Success.\n    Use `DataFrame(res)` to convert results to DataFrame.\n    Use `plot(res)` to plot results.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# get results for multiple_15 Scenario\nres_mult[:multiple_15][2]","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"237x3 SimResults with status :Success.\n    Use `DataFrame(res)` to convert results to DataFrame.\n    Use `plot(res)` to plot results.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"To simulate the selected scenarios one can use scenarios argument.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"res_selected = sim(p, scenarios = [:dose_1, :dose_10, :dose_100])","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The results of multiple simulations can be visualized all together using plot method.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# plot everything\nplot(res_selected, yscale=:log10, ylims=(1e-3,1e2))","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"(Image: fig07)","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The generated figure includes all condition simulations titled with scenario identifier. The additional arguments as vars and plot options can be used as well.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"sim results applied for multiple scenario can be translated into DataFrame.","category":"page"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"# convert everything into DataFrame\nres_selected_df = DataFrame(res_selected)\nCSV.write(\"res_selected_df.csv\", res_selected_df)","category":"page"},{"location":"tutorial/sim/#Final-remarks","page":"Scenario. Simulation","title":"Final remarks","text":"","category":"section"},{"location":"tutorial/sim/","page":"Scenario. Simulation","title":"Scenario. Simulation","text":"The typical workflow for simulation of modeling platforms in HetaSimulator.jl consists of the following steps: (1) loading Heta-based models into a Platform object; (2) creating and addition scenarios using Scenario constructor or from CSV tables; (3) run sim method for the whole platform or for selected scenarios; (4) display results using plot or transform into DataFrame.\nModel and Scenario objects are \"un-mutable\". This means a user cannot update their parts directly. User can only create new Scenario and use add_scenarios! method using the same identifiers. This replaces the previous scenarios with selected ids.\nTo update a model structure one should include changes into source Heta-based model and repeat all the steps.\nIn many cased the chain Julia syntax can be useful. The following code creates the default scenario, simulate and plot with one line.  julia  Scenario(models(p)[:nameless], tspan = (0,100)) |> sim |> plot\nplot method for SimResults gives only a simple default representation. For extended graphics a user can transform everything into a DataFrame and plot manually.\nFor multiple simulations of the Monte-Carlo type one should use mc method instead of sim method. Scenario is not the same as single simulation task in Monte-Carlo.","category":"page"}]
}
