var documenterSearchIndex = {"docs":
[{"location":"api/#API-references","page":"API","title":"API references","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [HetaSimulator]\nOrder   = [:type, :function]","category":"page"},{"location":"api/#HetaSimulator.Cond-Tuple{Model}","page":"API","title":"HetaSimulator.Cond","text":"Cond(model::Model;\n  measurements::Vector{AbstractMeasurementPoint}=AbstractMeasurementPoint[],\n  observables::Union{Nothing,Vector{Symbol}}=nothing,\n  parameters::Vector{Pair{Symbol,Float64}} = Pair{Symbol,Float64}[],\n  events_active::Union{Nothing, Vector{Pair{Symbol,Bool}}} = Pair{Symbol,Bool}[],\n  events_save::Union{Tuple,Vector{Pair{Symbol, Tuple{Bool, Bool}}}} = (true,true), \n  saveat::Union{Nothing,AbstractVector} = nothing,\n  tspan::Union{Nothing,Tuple} = nothing,\n  save_scope::Bool = true,\n)\n\nBuilds simulation condition of type Cond Example: Cond(model; tspan = (0., 200.), saveat = [0.0, 150., 250.])\n\nArguments:\n\nmodel : model of type Model\nmeasurements : Vector of measurements. Default is empty Vector{AbstractMeasurementPoint}\nobservables : names of output observables. Overwrites default model's values. Default is nothing\nparameters : parameters variation setup. Default is empty Vector{Pair}\nevents_active : Vector of Pairs containing events' names and true/false values. Overwrites default model's values. Default is empty Vector{Pair}\nevents_save : Tuple or Vector{Tuple} marking whether to save solution before and after event. Default is (true,true) for all events\nsaveat : time points, where solution should be saved. Default nothing values stands for saving solution at timepoints reached by the solver \ntspan : time span for the ODE problem\nsave_scope : should scope be saved together with solution. Default is true\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.fit-Tuple{Platform, Vector{Pair{Symbol, Float64}}}","page":"API","title":"HetaSimulator.fit","text":"fit(platform::Platform,\n  params::Vector{Pair{Symbol,Float64}};\n  conditions::Union{AbstractVector{Symbol}, Nothing} = nothing,\n  kwargs...\n) where C<:AbstractCond\n\nFit parameters to experimental measurements. Returns FitResults type. Example: fit(platform, [:k1=>0.1,:k2=>0.2,:k3=>0.3];conditions=[:cond2,:cond3])\n\nArguments:\n\nplatform : platform of Platform type\nparams : optimization parameters and their initial values\nconditions : vector of conditions of type Cond or nothing to fit all conditions. Default is nothing\nkwargs : other solver related arguments supported by fit(condition_pairs::Vector{<:Pair}, params::Vector{<:Pair}\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.fit-Union{Tuple{C}, Tuple{AbstractArray{Pair{Symbol, C}, 1}, Vector{Pair{Symbol, Float64}}}} where C<:HetaSimulator.AbstractCond","page":"API","title":"HetaSimulator.fit","text":"fit(condition_pairs::AbstractVector{Pair{Symbol, C}},\n  params::Vector{Pair{Symbol,Float64}};\n  alg=DEFAULT_ALG,\n  reltol=DEFAULT_FITTING_RELTOL,\n  abstol=DEFAULT_FITTING_ABSTOL,\n  parallel_type=EnsembleSerial(),\n  ftol_abs = 0.0,\n  ftol_rel = 1e-4, \n  xtol_rel = 0.0,\n  xtol_abs = 0.0, \n  fit_alg = :LN_NELDERMEAD,\n  maxeval = 10000,\n  maxtime = 0.0,\n  lbounds = fill(0.0, length(params)),\n  ubounds = fill(Inf, length(params)),\n  kwargs... \n) where C<:AbstractCond\n\nFit parameters to experimental measurements. Returns FitResults type. Example: fit([:x=>cond2, :y=>cond3, :z=>cond4], [:k1=>0.1,:k2=>0.2,:k3=>0.3])\n\nArguments:\n\ncondition_pairs : vector of pairs containing names and conditions of type Cond\nparams : optimization parameters and their initial values\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-6\nabstol : relative tolerance. Default is 1e-8\nparallel_type : parallel setup. See SciML docs for details. Default is no parallelism: EnsembleSerial()\nftol_abs : absolute tolerance on function value. See NLopt.jl docs for details. Default is 0.0\nftol_rel : relative tolerance on function value. See NLopt.jl docs for details. Default is 1e-4\nxtol_rel : relative tolerance on optimization parameters. See NLopt.jl docs for details. Default is 0.0\nxtol_rel : absolute tolerance on optimization parameters. See NLopt.jl docs for details. Default is 0.0\nfit_alg : fitting algorithm. See NLopt.jl docs for details. Default is :LN_NELDERMEAD\nmaxeval : maximum number of function evaluations. See NLopt.jl docs for details. Default is 1e4\nmaxtime : maximum optimization time (in seconds). See NLopt.jl docs for details. Default is 0\nlbounds : lower parameters bounds. See NLopt.jl docs for details. Default is fill(0.0, length(params))\nubounds : upper parameters bounds. See NLopt.jl docs for details. Default is fill(Inf, length(params))\nkwargs : other solver related arguments supported by DiffEqBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.fit-Union{Tuple{C}, Tuple{AbstractVector{C}, Vector{Pair{Symbol, Float64}}}} where C<:HetaSimulator.AbstractCond","page":"API","title":"HetaSimulator.fit","text":"fit(conditions::AbstractVector{C},\n  params::Vector{Pair{Symbol,Float64}};\n  kwargs...\n) where C<:AbstractCond\n\nFit parameters to experimental measurements. Returns FitResults type. Example: fit([cond2, cond3, cond4], [:k1=>0.1,:k2=>0.2,:k3=>0.3])\n\nArguments:\n\nconditions : vector of conditions of type Cond\nparams : optimization parameters and their initial values\nkwargs : other solver related arguments supported by fit(condition_pairs::Vector{<:Pair}, params::Vector{<:Pair}\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.heta_build-Tuple{AbstractString}","page":"API","title":"HetaSimulator.heta_build","text":"heta_build(\n  heta_index::AbstractString;\n  declaration::String = \"platform\",\n  skip_export::Bool = false,\n  log_mode::String = \"error\",\n  debug::Bool = false,\n  julia_only::Bool = false,\n  dist_dir::String = \"dist\",\n  meta_dir::String = \"meta\",\n  source::String = \"index.heta\",\n  type::String = \"heta\"\n)\n\nBuilds the model from Heta-based reactions\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.heta_update-Tuple{}","page":"API","title":"HetaSimulator.heta_update","text":"heta_update(version::String)\n\nInstalls heta-compiler from NPM.\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.load_jlplatform-Tuple{AbstractString}","page":"API","title":"HetaSimulator.load_jlplatform","text":"load_jlplatform(  \n  model_jl::AbstractString; \n  rm_out::Bool = false\n)\n\nLoads prebuild julia model as part of platform\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.load_platform-Tuple{AbstractString}","page":"API","title":"HetaSimulator.load_platform","text":"load_platform(  \n  heta_index::AbstractString;\n  rm_out::Bool = true,\n  julia_only::Bool = true, \n  dist_dir::String = \".\",\n  source::String = \"index.heta\",\n  type::String = \"heta\",\n  kwargs...\n)\n\nConverts heta model to Julia and outputs platform type\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Tuple{Cond, DataFrame}","page":"API","title":"HetaSimulator.mc","text":"mc(cond::Cond,\n  params::DataFrame,\n  num_iter::Int64;\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single condition cond. Returns MCResults type. Example: mc(cond1, DataFrame(k2=rand(3),k3=rand(3)), 1000)\n\nArguments:\n\ncond : simulation condition of type Cond\nparams : DataFrame with pre-generated parameters.\nnum_iter : number of Monte-Carlo iterations \nkwargs : other solver related arguments supported by mc(cond::Cond, params::Vector, num_iter::Int64)\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{PP}, Tuple{CP}, Tuple{Vector{CP}, Vector{PP}, Int64}} where {CP<:Pair, PP<:Pair}","page":"API","title":"HetaSimulator.mc","text":"mc(cond_pairs::Vector{<:Pair},\n  params::Vector{<:Pair},\n  num_iter::Int64;\n  verbose=false,\n  alg=DEFAULT_ALG,\n  reltol=DEFAULT_SIMULATION_RELTOL,\n  abstol=DEFAULT_SIMULATION_ABSTOL,\n  parallel_type=EnsembleSerial(),\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single condition cond. Returns Vector{MCResults} type. Example: mc([:c1=>cond1,:c2=>cond2], [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\ncond_pairs : vector of pairs containing names and conditions of type Cond\nparams : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nverbose : print iteration progress. Default is false\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-3\nabstol : relative tolerance. Default is 1e-6\nparallel_type : parallel setup. See SciML docs for details. Default is no parallelism: EnsembleSerial()\nkwargs : other solver related arguments supported by DiffEqBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{P}, Tuple{Cond, Vector{P}, Int64}} where P<:Pair","page":"API","title":"HetaSimulator.mc","text":"mc(cond::Cond,\n  params::Vector{<:Pair},\n  num_iter::Int64;\n  verbose=false,\n  alg=DEFAULT_ALG,\n  reltol=DEFAULT_SIMULATION_RELTOL,\n  abstol=DEFAULT_SIMULATION_ABSTOL,\n  parallel_type=EnsembleSerial(),\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single condition cond. Returns MCResults type. Example: mc(cond, [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\ncond : simulation condition of type Cond\nparams : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nverbose : print iteration progress. Default is false\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-3\nabstol : relative tolerance. Default is 1e-6\nparallel_type : parallel setup. See SciML docs for details. Default is no parallelism: EnsembleSerial()\nkwargs : other solver related arguments supported by DiffEqBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{P}, Tuple{C}, Tuple{Vector{C}, Vector{P}, Int64}} where {C<:HetaSimulator.AbstractCond, P<:Pair}","page":"API","title":"HetaSimulator.mc","text":"mc(conds::Vector{<:AbstractCond},\n  params::Vector{<:Pair},\n  num_iter::Int64;\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single condition cond. Returns Vector{MCResults} type. Example: mc([cond1,cond2], [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\ncond_pairs : vector of conditions of type Cond\nparams : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nkwargs : other solver related arguments supported by mc(cond_pairs::Vector{<:Pair}, params::Vector, num_iter::Int64)\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{P}, Tuple{Model, Vector{P}, Int64}} where P<:Pair","page":"API","title":"HetaSimulator.mc","text":"mc(model::Model,\n  params::Vector{<:Pair},\n  num_iter::Int64;\n  measurements::Vector{AbstractMeasurementPoint} = AbstractMeasurementPoint[],\n  events_active::Union{Nothing, Vector{Pair{Symbol,Bool}}} = Pair{Symbol,Bool}[],\n  events_save::Union{Tuple,Vector{Pair{Symbol, Tuple{Bool, Bool}}}}=(true,true), \n  observables::Union{Nothing,Vector{Symbol}} = nothing,\n  saveat::Union{Nothing,AbstractVector} = nothing,\n  tspan::Union{Nothing,Tuple} = nothing,\n  save_scope::Bool=false,\n  time_type::DataType=Float64,\n  kwargs...\n)\n\nRun Monte-Carlo simulations with Model. Returns MCResults type. Example: mc(model, [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\nmodel : model of type Model\nparams : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nmeasurements : Vector of measurements. Default is empty vector \nevents_active : Vector of Pairs containing events' names and true/false values. Overwrites default model's values. Default is empty vector \nevents_save : Tuple or Vector{Tuple} marking whether to save solution before and after event. Default is (true,true) for all events\nobservables : names of output observables. Overwrites default model's values. Default is empty vector\nsaveat : time points, where solution should be saved. Default nothing values stands for saving solution at timepoints reached by the solver \ntspan : time span for the ODE problem\nsave_scope : should scope be saved together with solution. Default is false\nkwargs : other solver related arguments supported by mc(cond::Cond, params::Vector, num_iter::Int64)\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.mc-Union{Tuple{P}, Tuple{Platform, Vector{P}, Int64}} where P<:Pair","page":"API","title":"HetaSimulator.mc","text":"mc(platform::Platform, \n  params::Vector{<:Pair},\n  num_iter::Int64;\n  kwargs...\n)\n\nRun Monte-Carlo simulations with single condition cond. Returns Vector{MCResults} type. Example: mc(platform, [:k2=>Normal(1e-3,1e-4), :k3=>Uniform(1e-4,1e-2)], 1000)\n\nArguments:\n\nplatform : platform of Platform type\nparams : parameters variation setup\nnum_iter : number of Monte-Carlo iterations\nkwargs : other solver related arguments supported by mc(cond_pairs::Vector{<:Pair}, params::Vector, num_iter::Int64)\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.sim-Tuple{Model}","page":"API","title":"HetaSimulator.sim","text":"sim(model::Model; \n  parameters::Vector{Pair{Symbol,Float64}} = Pair{Symbol,Float64}[],\n  measurements::Vector{AbstractMeasurementPoint} = AbstractMeasurementPoint[],\n  events_active::Union{Nothing, Vector{Pair{Symbol,Bool}}} = Pair{Symbol,Bool}[],\n  events_save::Union{Tuple,Vector{Pair{Symbol, Tuple{Bool, Bool}}}}=(true,true), \n  observables::Union{Nothing,Vector{Symbol}} = nothing,\n  saveat::Union{Nothing,AbstractVector} = nothing,\n  tspan::Union{Nothing,Tuple} = nothing,\n  save_scope::Bool=true,\n  time_type::DataType=Float64,\n  kwargs...)\n\nSimulate model of type Model. Returns SimResults type. Example: sim(model; tspan = (0., 200.), parameters_upd = [:k1=>0.01])\n\nArguments:\n\nmodel : model of type Model\nparameters : Vector of Pairs containing constants' names and values. Overwrites default model's values. Default is empty vector \nmeasurements : Vector of measurements. Default is empty vector \nevents_active : Vector of Pairs containing events' names and true/false values. Overwrites default model's values. Default is empty vector \nevents_save : Tuple or Vector{Tuple} marking whether to save solution before and after event. Default is (true,true) for all events\nobservables : names of output observables. Overwrites default model's values. Default is empty vector\nsaveat : time points, where solution should be saved. Default nothing values stands for saving solution at timepoints reached by the solver \ntspan : time span for the ODE problem\nsave_scope : should scope be saved together with solution. Default is true\nkwargs : other solver related arguments supported by sim(cond::Cond)\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.sim-Tuple{Platform}","page":"API","title":"HetaSimulator.sim","text":"sim(platform::Platform; \n  conditions::Union{AbstractVector{Symbol}, Nothing} = nothing,\n  kwargs...) where {C<:AbstractCond}\n\nSimulate conditions included in platform. Returns Vector{Pair}. Example: sim(platform)\n\nArguments:\n\nplatform : platform of Platform type\nconditions : Vector containing names of conditions included in platform. Default value nothing stands for all conditions in the platform \nkwargs : other kwargs supported by sim(condition_pairs::Vector{Pair})\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.sim-Union{Tuple{AbstractVector{C}}, Tuple{C}} where C<:HetaSimulator.AbstractCond","page":"API","title":"HetaSimulator.sim","text":"sim(conditions::AbstractVector{C}; kwargs...) where {C<:AbstractCond}\n\nSimulate multiple conditions. Returns Vector{Pair}. Example: sim([cond1, cond2, cond3])\n\nArguments:\n\nconditions : Vector containing names and conditions of type Cond\nkwargs : other kwargs supported by sim(condition_pairs::Vector{Pair})\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.sim-Union{Tuple{Cond}, Tuple{P}} where P<:Pair","page":"API","title":"HetaSimulator.sim","text":"sim(cond::Cond; \n  parameters_upd::Union{Nothing, Vector{P}}=nothing,\n  alg=DEFAULT_ALG, \n  reltol=DEFAULT_SIMULATION_RELTOL, \n  abstol=DEFAULT_SIMULATION_ABSTOL,\n  kwargs...)\n\nSimulate single condition cond. Returns SimResults type. Example: Cond(model; tspan = (0., 200.), saveat = [0.0, 150., 250.]) |> sim\n\nArguments:\n\ncond : simulation condition of type Cond\nparameters_upd : constants, which overwrite both Model and Cond constants. Default is nothing\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-3\nabstol : relative tolerance. Default is 1e-6\nkwargs : other solver related arguments supported by DiffEqBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"api/#HetaSimulator.sim-Union{Tuple{Vector{P}}, Tuple{P}} where P<:Pair","page":"API","title":"HetaSimulator.sim","text":"sim(condition_pairs::Vector{P}; \n  parameters_upd::Union{Nothing, Vector}=nothing,\n  alg=DEFAULT_ALG, \n  reltol=DEFAULT_SIMULATION_RELTOL, \n  abstol=DEFAULT_SIMULATION_ABSTOL,\n  parallel_type=EnsembleSerial(),\n  kwargs...) where P<:Pair\n\nSimulate multiple conditions. Returns Vector{Pair}. Example: sim([:x => cond1, :y=>cond2, :z=>cond3])\n\nArguments:\n\ncondition_pairs : vector of pairs containing names and conditions of type Cond\nparameters_upd : constants, which overwrite both Model and Cond constants. Default is nothing\nalg : ODE solver. See SciML docs for details. Default is AutoTsit5(Rosenbrock23())\nreltol : relative tolerance. Default is 1e-3\nabstol : relative tolerance. Default is 1e-6\nparallel_type : type of multiple simulations parallelism. Default is no parallelism. See SciML docs for details\nkwargs : other solver related arguments supported by DiffEqBase.solve. See SciML docs for details\n\n\n\n\n\n","category":"method"},{"location":"table-formats/measurement/#Measurements-tables","page":"Measurements tables","title":"Measurements tables","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Measurements tables are CSV or XLSX files which store Measurement objects in tabular format. The content of the table can be loaded into Julia environment as a DataFrame to be included into Platform object.","category":"page"},{"location":"table-formats/measurement/#Format","page":"Measurements tables","title":"Format","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"The structure of tables corresponds to Measurements properties. The first row is intended for headers which clarify the columns meaning. The sequence of columns is not important.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"condition : a String value representing identifier of Cond.\nt : a Float64 value equal to time point of measured value\nmeasurement : a Float64 measured value\nscope (optional): a String value which states a scope of simulation to be compared with measurements. Default value is ode_\nprob.<id> : a set of options to characterize the probability distribution. The supported ids depend on distribution type. For normal distribution the available headers are following:\nprob.type (optional) : a String declaring probability type. normal is default.\nprob.mean : Float64 value or String representing @Const or @Record id in model. The value represents parameter mean in normal distribution.\nprob.sigma : Float64 value or String representing @Const or @Record id in model. The value represents parameter sigma (standard deviation) in normal distribution.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Each row in the table will be transformed into a component of log-likelihood function -2ln(L).","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Lambda = sum_i left( ln(probsigma_i^2) + frac(probmean_i - measurement_i)^2probsigma_i^2right)","category":"page"},{"location":"table-formats/measurement/#Loading-to-Platform","page":"Measurements tables","title":"Loading to Platform","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Measurement table can be loaded into Julia environment as a DataFrame using HetaSimulator.read_measurements method. This method reads the file, checks the content and formats the data to be used inside Platform object.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"measurements = read_measurements(\"measurements.csv\")\n\n32×7 DataFrame\n Row │ t        measurement  scope   prob.mean  prob.sigma  condition  prob.type \n     │ Float64  Float64      Symbol  String     Float64     Symbol     Symbol    \n─────┼───────────────────────────────────────────────────────────────────────────\n   1 │     2.0     8.46154   ode_    a                1.0   dataone    normal\n   2 │     4.0     7.33333   ode_    a                1.2   dataone    normal\n   3 │     6.0     6.47059   ode_    a                2.2   dataone    normal\n  ⋮  │    ⋮          ⋮         ⋮         ⋮          ⋮           ⋮          ⋮","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"The data frame can be loaded into platform using the HetaSimulator.add_measurements! method.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"add_measurements!(platform, measurements)","category":"page"},{"location":"table-formats/measurement/#Example","page":"Measurements tables","title":"Example","text":"","category":"section"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Loading file measurements.csv with the following content.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"t measurement scope prob.mean prob.sigma condition\n2 8.461539334 ode_ a 1 dataone\n4 7.333333812 ode_ a 1.2 dataone\n6 6.470591567 ode_ a 2.2 dataone","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Read as DataFrame object.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"measurements = read_measurements(\"./measurements.csv\")","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"Add all measurements to Platform","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"add_measurements!(platform, measurements)","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"As a result the Platform will contain three measurements.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"These operations are equivalent of manually created Measurement objects.","category":"page"},{"location":"table-formats/measurement/","page":"Measurements tables","title":"Measurements tables","text":"# dataone = Cond(...)\n\nm1 = NormalMeasurementPoint(2, 8.461539334, :ode, :a, 1)\nm2 = NormalMeasurementPoint(4, 7.333333812, :ode, :a, 1.2)\nm3 = NormalMeasurementPoint(6, 6.470591567, :ode, :a, 2.2)\n\npush!(dataone.measurements, m1)\npush!(dataone.measurements, m2)\npush!(dataone.measurements, m3)","category":"page"},{"location":"basics/overview/#Overview-of-HetaSimulator.jl","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The general workflow for HetaSimulator is","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Writing a modeling platform in the Heta format\nLoading platform into Julia environment\nCreating model's settings and data adding conditions and measurements\nSolve problems using the methods: sim, mc, fit\nAnalyze the results","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The particular workflow may be iterative, i.e. include updates to the model and re-simulation based on estimated parameters or model structure updates. It depend on the user's needs.","category":"page"},{"location":"basics/overview/#Writing-model-in-the-Heta-format","page":"Overview of HetaSimulator.jl","title":"Writing model in the Heta format","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Heta is a modeling language for quantitative systems pharmacology and systems biology. It is a DSL (domain-specific language) describing dynamic model or models in process-description format. Heta compiler converts it into variety of files including \"Julia\" format which can be loaded to Julia/HetaSimulator environment.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"HetaSimulator supports all features of the Heta language. So one can organize modeling project as re-used modules (files), include any number of models into single platform with the namespaces mechanism. The platform can use the declaration file platform.json or can be loaded from single file.  All Heta modules: Heta code, tables, SBML and JSON can be loaded as a modeling platform and compiled into ODE-based mathematical representation.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"To read more about Heta-based modeling platforms and Heta compiler visit the homepage https://hetalang.github.io/#/.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"As an example we will use a model describing a simple pharmacokinetic model stored in single .heta file. It is expected that the model code will be placed into \"index.heta\" file located in a directory my_example or something like that.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"// Compartments\nVol0 @Compartment .= 1;\nVol1 @Compartment .= 6.3;\nVol2 @Compartment .= 10.6;\n\n// Species\nA0 @Species {compartment: Vol0, isAmount: true, output: true} .= 0;\nC1 @Species {compartment: Vol1, output: true} .= 0;\nC2 @Species {compartment: Vol2, output: true} .= 0;\n\n// Reactions\nv_abs @Reaction {actors: A0 = C1} := kabs * A0;\nv_el @Reaction {actors: C1 =} := Vol1 * (kel * C1); // Vol1 * (kmax * C1 / (Km + C1));\nv_distr @Reaction {actors: C1 = C2} := Q * (C1 - C2);\n\n// Parameters\ndose @Const = 20;\nkabs @Const = 10;\nkel @Const = 0.2;\nQ @Const = 3.2;\n\n// single dose event\nsw1 @TimeSwitcher {start: 0};\nA0 [sw1]= dose;\n\n// multiple dose event, default off\nsw2 @TimeSwitcher {start: 0, period: 24, active: false};\nA0 [sw2]= dose;","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The model describes a typical two-compartment model with single or multiple dose depending on which event is active. Take a note that the component of the model is create without any namespace statement. This means they have the default namespace attribute nameless. This code is equivalent to the following system of ODE.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"beginaligned\nfracddtA_0 = - v_abs\nfracddt(C_1 cdot Vol_1) = v_abs - v_el - v_distr\nfracddt(C_2 cdot Vol_2) = v_distr\n\nA_0(0) = 0\nC_1(0) = 0\nC_2(0) = 0\nv_abs(t) = kabs cdot A_0\nv_el(t) = Vol_1 cdot (kel cdot C_1)\nv_distr(t) = Q cdot (C_1 - C_2)\nendaligned\n\ntextevent at  t = 0\n\nA_0 = dose","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Where parameters are","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"beginaligned\ndose = 20\nkabs = 10\nkel = 02\nQ  = 32\nVol_1 = 63\nVol_2 = 106\nendaligned","category":"page"},{"location":"basics/overview/#Loading-platform-from-the-Heta-format","page":"Overview of HetaSimulator.jl","title":"Loading platform from the Heta format","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"HetaSimulator loads modeling platform into Platform type object that is a container for all models simulation settings and experimental data. When you load a platform from Heta it includes only models converted from concrete namespaces. The condition storage is empty and will be populated manually or imported from tables.","category":"page"},{"location":"basics/overview/#Loading-with-internal-compiler","page":"Overview of HetaSimulator.jl","title":"Loading with internal compiler","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"When HetaSimulator is installed and internal Heta compiler is installed the platform can be loaded with the method load_platform.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"using HetaSimulator, Plots\n\np = load_platform(\"./my_example\")","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"No declaration file, running with defaults...\n[info] Builder initialized in directory \"Y:\\HetaSimulator.jl\\cases\\story_3\".\n[info] Compilation of module \"index.heta\" of type \"heta\"...\n[info] Reading module of type \"heta\" from file \"Y:\\HetaSimulator.jl\\cases\\story_3\\index.heta\"...\n[info] Setting references in elements, total length 50\n[info] Checking for circular references in Records.\n[warn] Units checking skipped. To turn it on set \"unitsCheck: true\" in declaration.\n[info] Checking unit's terms.\n[warn] \"Julia only\" mode\n[info] Exporting to \"Y:\\HetaSimulator.jl\\cases\\story_3\\_julia\" of format \"Julia\"...\nCompilation OK!\nLoading platform... OK!\n+---------------------------------------------------------------------------\n| Platform contains:\n|   1 model(s): nameless. Use `models(platform)` for details.\n|   0 condition(s): . Use `conditions(platform)` for details.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The first argument of load_platform declares the absolute or relative path to the platform directory. If you use another file name (not index.heta) you can declare it with source argument.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"p = load_platform(\"./my_example\", source = \"another_name.heta\")","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"You can also load the model from another formats like SBML.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"p = load_platform(\"./another_project\", source = \"model.xml\", type = \"SBML\")","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The list of additional arguments is approximately the same as CLI options of heta build command of Heta compilers. For the full list see load_platform references.","category":"page"},{"location":"basics/overview/#Loading-pre-compiled-platform","page":"Overview of HetaSimulator.jl","title":"Loading pre-compiled platform","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Alternatively you can use files generated with stand-alone Heta compiler.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"To do so the model code should be updated with the following statement.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"...\nsw2 @TimeSwitcher {start: 0, period: 24, active: false};\nA0 [sw2]= dose;\n\n#export {format: Julia, filepath: julia_platform};","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Running the code with the console command heta build my_project produces the file myproject/dist/juliaplatform/model.jl which can be loaded with load_jlplatform method.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"p = load_jlplatform(\"./my_example/dist/julia_platform/model.jl\")","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Loading platform... OK!\n+---------------------------------------------------------------------------\n| Platform contains:\n|   1 model(s): nameless. Use `models(platform)` for details.\n|   0 condition(s): . Use `conditions(platform)` for details.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/#Creating-conditions","page":"Overview of HetaSimulator.jl","title":"Creating conditions","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Cond (condition) in HetaSimulator is an object which stores a model together with additional settings and options. It sets the time point, ranges, updates parameter values, activate or inactivate events, etc.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The condition-based approach is used to store pre-defined model's options: dose values, experimental conditions, data saving options, initial values and others which can be applied for one or multiple models. The Cond also stores Measurement points which is used for parameters identification and visualization.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Cond is created from default options passed from its model and user defined options from table row or set manually.","category":"page"},{"location":"basics/overview/#Import-from-CSV-tables","page":"Overview of HetaSimulator.jl","title":"Import from CSV tables","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The most simple way to populate a platform by conditions is to create a separate file with Cond in tabular CSV format.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Create file conditions.csv file inside my_example with the following content.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"id|parameters.dose|eventsactive.sw1|eventsactive.sw2 –|–|–|– dose1|1|true|false dose10|10|true|false dose100|100|true|false multiple15|15|false|true","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The table can be loaded with the read_conditions function.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"cond_df = read_conditions(\"./my_example/conditions.csv\")","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"4×4 DataFrame\n Row │ id           parameters.dose  events_active.sw1  events_active.sw2 \n     │ Symbol       Int64            Bool               Bool\n─────┼────────────────────────────────────────────────────────────────────\n   1 │ dose_1                     1               true              false\n   2 │ dose_10                   10               true              false\n   3 │ dose_100                 100               true              false\n   4 │ multiple_15               15              false               true","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The function reads the content of CSV file, checks components and stores in cond_df variable of DataFrame format.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"This should be loaded into Platform object.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"add_conditions!(p, cond_df)","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"As we can see all 4 conditions from the table were added.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"p\n+---------------------------------------------------------------------------\n| Platform contains:\n|   1 model(s): nameless. Use `models(platform)` for details.\n|   4 condition(s): multiple_15, dose_1, dose_10, dose_100. Use `conditions(platform)` for details.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"To get the particular condition you can use the following syntax.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"condition1 = conditions(p)[:dose_1]\n+---------------------------------------------------------------------------\n| Cond contains:\n|   0 saveat values: Float64[]. Use `saveat(cond)` for details.\n|   tspan: (0.0, 48.0). Use `tspan(cond)` for details.\n|   4 parameters(s). Use `parameters(cond)` for details.\n|   0 measurement(s). Use `measurements(cond)` for details.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"See more about condition tables in tabular CSV format.","category":"page"},{"location":"basics/overview/#Import-from-Excel-tables","page":"Overview of HetaSimulator.jl","title":"Import from Excel tables","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Instead of using CSV tables one can fill the XSLT file and load condition table in the same manner.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"cond_df = read_conditions(\"./my_example/conditions.xlsx\")","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"4×4 DataFrame\n Row │ id           parameters.dose  events_active.sw1  events_active.sw2 \n     │ Symbol       Int64            Bool               Bool\n─────┼────────────────────────────────────────────────────────────────────\n   1 │ dose_1                     1               true              false\n   2 │ dose_10                   10               true              false\n   3 │ dose_100                 100               true              false\n   4 │ multiple_15               15              false               true","category":"page"},{"location":"basics/overview/#Manual-creation","page":"Overview of HetaSimulator.jl","title":"Manual creation","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Cond objects can be created and loaded without any tables.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"For example we need to create simulations with the default model ","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"dose = 100\nevent sw2 is active \nsimulation time is from 0 to 1000\nwe need to observe all species: A0, C1, C2, and all reactions: v_abs, v_el, v_distr","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Condition can be created with the following code","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"# to get the default model\nmodel = models(p)[:nameless] \n# creating condition\nnew_condition = Cond(\n    model,\n    parameters = [:dose=>100.],\n    events_active = [:sw1=>false, :sw1=>true],\n    tspan = (0.,1000.),\n    observables = [:A0, :C1, :C2, :v_abs, :v_el, :v_distr]\n    ) \n\n+---------------------------------------------------------------------------\n| Cond contains:\n|   0 saveat values: Float64[]. Use `saveat(cond)` for details.\n|   tspan: (0.0, 1000.0). Use `tspan(cond)` for details.\n|   4 parameters(s). Use `parameters(cond)` for details.\n|   0 measurement(s). Use `measurements(cond)` for details.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"See more options in API docs for Cond function.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"To load it into Platform container use the following syntax.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"push!(conditions(p), :multiple_100=>new_condition)","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"where multiple_100 is an identifier for the condition in the dictionary.","category":"page"},{"location":"basics/overview/#Creating-measurements","page":"Overview of HetaSimulator.jl","title":"Creating measurements","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Measurement in HetaSimulator is representation of experimentally measured value for parameter identification. Each Measurement is associated with some particular condition, observable value and fixed time point.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"All measurements in the platform are used to calculate the log-likelihood function when required. Measurements are stored inside Cond objects.","category":"page"},{"location":"basics/overview/#Import-from-CSV-tables-2","page":"Overview of HetaSimulator.jl","title":"Import from CSV tables","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"User can load measurement points from one or several tables which follow table format.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Create file measurements.csv file inside my_example with the following structure.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Full file can be downloaded from here: [measurements.csv](https://raw.githubusercontent.com/hetalang/hetasimulator/master/case/story3/measurements.csv)_","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"t|measurement|prob.mean|prob.sigma|condition –|–|–|–|– 0.08333|0.0686283|C1|sigma1|dose1 0.08333|0.0684679|C1|sigma1|dose1 0.08333|0.0726338|C1|sigma1|dose1 0.25|0.119397|C1|sigma1|dose1 0.25|0.137662|C1|sigma1|dose1 0.25|0.120412|C1|sigma1|dose1 0.5|0.131784|C1|sigma1|dose_1 ...|...|...|...|...","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The table can be loaded with the read_measurements function.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"measurements_df = read_measurements(\"./cases/story_3/measurements.csv\")\n90×5 DataFrame\n Row │ t         measurement  prob.mean  prob.sigma  condition \n     │ Float64   Float64      String     String      Symbol    \n─────┼─────────────────────────────────────────────────────────\n   1 │  0.08333    0.0686283  C1         sigma1      dose_1\n   2 │  0.08333    0.0684679  C1         sigma1      dose_1\n   3 │  0.08333    0.0726338  C1         sigma1      dose_1\n   4 │  0.25       0.119397   C1         sigma1      dose_1\n   5 │  0.25       0.137662   C1         sigma1      dose_1\n  ⋮  │    ⋮           ⋮           ⋮          ⋮           ⋮\n  87 │ 12.0        2.189      C1         sigma3      dose_100\n  88 │ 24.0        0.877502   C1         sigma3      dose_100\n  89 │ 24.0        1.036      C1         sigma3      dose_100\n  90 │ 24.0        0.724612   C1         sigma3      dose_100\n                                                81 rows omitted","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The function reads the content of CSV file, checks components and stores in measurements_df variable of DataFrame format.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"To load measurements into Platform function add_measurements can be used. The function converts all rows into a series of Measurements and associate them with condition declared in condition value.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"add_measurements!(p, measurements_df)","category":"page"},{"location":"basics/overview/#Import-from-Excel-tables-2","page":"Overview of HetaSimulator.jl","title":"Import from Excel tables","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Instead of using CSV tables one can fill the XSLT file and load measurements table in the same manner.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"measurements_df = read_measurements(\"./my_example/measurements.xlsx\")","category":"page"},{"location":"basics/overview/#Solving-problems","page":"Overview of HetaSimulator.jl","title":"Solving problems","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"There are three main problem types that can currently be solved with HetaSimulator:","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Simulation of time-dependence for selected observables for one or several conditions using sim method.\nMonte-Carlo type simulations that performs repeated simulations based on pre-set parameters distributions with mc method.\nFitting or parameter identification problem that optimizes values of selected model constants to reach the minimal discrepancy between simulations and experimental values which is solved by fit method.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Each method returns the solution of its specific type: SimResults, MCResults and FitResults or other types that include them.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The methods can be applied on different levels: Platform, Cond or Model to allow applying all conditions in the platform, some of them or the default one. Some important \"target vs method\" variants are shown in the next table.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Target | Method | Results | Comments – | – | – | – Platform | sim | Vector{Pair{Symbol,SimResults}} | All or selected list of conditions in model will run Cond | sim | SimResults | Only target condition will run Model | sim | SimResults | The condition created from default model's options will run Platform | mc | Vector{Pair{Symbol,MCResults}} | All or selected list of conditions in model will run multiple times. Cond | mc | MCResults | Target condition will run multiple times Model | mc | SimResults | The default condition will run multiple times Platform | fit | FitResults | All or selected list of conditions together their measurements will be used to optimize parameters.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"This page provides the example of applying methods on the Platform level only","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"See more information for each method in extended description: sim explanations, mc explanations, fit explanations.","category":"page"},{"location":"basics/overview/#Simulation","page":"Overview of HetaSimulator.jl","title":"Simulation","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"On the previous steps we created the platform p and populated it with 4 conditions and measurement points.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Without additional preparations we can simulate the platform which means running all 4 conditions and combining all results into one object.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"res = sim(p)","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"+---------------------------------------------------------------------------\n| Simulation results for 4 condition(s).\n| [:multiple_15 => ..., :dose_1 => ..., :dose_10 => ..., :dose_100 => ...]\n| Use `sol[id]` to get component by id.\n| Use `sol[i]` to get component by number.\n| Use `DataFrame(sol)` to transform.\n| Use `plot(sol)` to plot results.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The whole solution consists of parts which corresponds to number of conditions in Platform.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The results can be plotted using default plot method.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"plot(res)","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"(Image: sim1)","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The whole solution can also be translated into DataFrame.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"res_df = DataFrame(res)","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"964×6 DataFrame\n Row │ t             A0           C1           C2           scope   condition   \n     │ Float64       Float64      Float64      Float64      Symbol  Symbol      \n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │  0.0           0.0         0.0          0.0          ode_    multiple_15\n   2 │  0.0          15.0         0.0          0.0          sw2     multiple_15\n  ⋮  │      ⋮             ⋮            ⋮            ⋮         ⋮          ⋮\n 963 │ 47.9581        4.55058e-7  0.201956     0.2561       ode_    dose_100\n 964 │ 48.0           2.99302e-7  0.201417     0.255416     ode_    dose_100\n                                                                960 rows omitted","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"User can work with the solution component by using indexing by component number, like here res[1] or by condition id res[:dose_1].","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Any component can also be transformed into DataFrame.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"res_df1 = DataFrame(res[1])","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"626×5 DataFrame\n Row │ t              A0           C1           C2           scope  \n     │ Float64        Float64      Float64      Float64      Symbol \n─────┼──────────────────────────────────────────────────────────────\n   1 │   0.0           0.0         0.0          0.0          ode_\n   2 │   0.0          15.0         0.0          0.0          sw2\n   3 │   6.66622e-6   14.999       0.000158714  1.59703e-10  ode_\n   4 │   7.33284e-5   14.989       0.00174523   1.93194e-8   ode_\n   5 │   0.000739951  14.8894      0.0175482    1.96242e-6   ode_\n   6 │   0.00527893   14.2287      0.122199     9.82366e-5   ode_\n   7 │   0.0141793    13.017       0.313149     0.000686265  ode_\n   8 │   0.027481     11.3957      0.566335     0.00245837   ode_\n  ⋮  │       ⋮             ⋮            ⋮            ⋮         ⋮\n 620 │ 166.734         4.55058e-7  0.193317     0.245144     ode_\n 621 │ 167.085         4.55058e-7  0.189038     0.239719     ode_\n 622 │ 167.436         4.55058e-7  0.184854     0.234413     ode_\n 623 │ 167.786         4.55058e-7  0.180762     0.229224     ode_\n 624 │ 168.0           7.00046e-8  0.178314     0.22612      ode_\n 625 │ 168.0           7.00046e-8  0.178314     0.22612      ode_\n 626 │ 168.0          15.0         0.178314     0.22612      sw2\n                                                    611 rows omitted","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"The component can also be plotted.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"plot(res[1])","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"(Image: sim2)","category":"page"},{"location":"basics/overview/#Monte-Carlo","page":"Overview of HetaSimulator.jl","title":"Monte-Carlo","text":"","category":"section"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"Monte-Carlo method runs simulation many times combining all simulations into single object MCResults. You should clarify here the distribution of random parameters and number of iterations.","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"mc_res = mc(p, [:kabs=>Normal(10.,1e-1), :kel=>Normal(0.2,1e-3)], 1000)","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"+---------------------------------------------------------------------------\n| Monte-Carlo results for 4 condition(s).\n| [:multiple_15 => ..., :dose_1 => ..., :dose_10 => ..., :dose_100 => ...]\n| Use `sol[id]` to get component by id.\n| Use `sol[i]` to get component by number.\n| Use `DataFrame(sol)` to transform.\n| Use `plot(sol)` to plot results.\n+---------------------------------------------------------------------------","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"To transform everything into DataFrame","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"mc_df = DataFrame(mc_res)","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"To plot everything use plot","category":"page"},{"location":"basics/overview/","page":"Overview of HetaSimulator.jl","title":"Overview of HetaSimulator.jl","text":"plot(mc_res)","category":"page"},{"location":"table-formats/cond/#Conditions-tables","page":"Conditions tables","title":"Conditions tables","text":"","category":"section"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"Conditions tables are CSV or XLSX files which store Cond objects in tabular format. The content of the table can be loaded into Julia environment as a DataFrame to be included into Platform object.","category":"page"},{"location":"table-formats/cond/#Format","page":"Conditions tables","title":"Format","text":"","category":"section"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"The structure of the tables corresponds to Cond properties. The first row is intended for headers which clarify the columns meaning. The sequence of columns is not important.","category":"page"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"id : a String representing unique identifier of Cond if you load into Platform object. The string should be unique within the condition set and must follow the common identifier rules: no blank spaces, no digit at the first symbol, etc.\nmodel : a String identifier of model which will be used for simulations. The default value is nameless.\nparameter.<id> (optional) : a Float64 value which updates and fixes the value of model's Const with the corresponding id. Missing value does not updates the parameter's value and is ignored.\nsaveat[] (* optional) : a set of Float64 values separated by semicolons. The values states the time points for simulated output.\ntspan (* optional) : a Float64 value which are maximal simulation time point. BTW the initial time point is always 0.\nobservables[] (optional) : a set of String separated by semicolon. They state the model records that will be saved as simulation results. If not set the default observables will be used (output: true property in Heta notation).\nevents_active.<id> (optional) : a Bool value which updates turns on and off events in model. The id is switcher identifier in the Heta. If it is not set the switcher.active state from Heta model will be used.\nevents_save.<id> (optional, experimental) : a pair of Bool values divided by semicolon. This value set if it is required to save the output value before and after the event. If not set both: before and after values will be saved.","category":"page"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"* saveat[] or tspan must be set for the particular Cond. If you set both only saveat[] will be used.","category":"page"},{"location":"table-formats/cond/#Loading-to-Platform","page":"Conditions tables","title":"Loading to Platform","text":"","category":"section"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"Condition table can be loaded into Julia environment as a DataFrame using HetaSimulator.read_conditions method. This method reads the file, checks the content and formats the data to be used inside Platform object.","category":"page"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"conditions_csv = read_conditions(\"./conditions.csv\")\n\n4×7 DataFrame\n Row │ id         parameters.k1  parameters.k2  parameters.k3  saveat[]           tspan      observables[] \n     │ Symbol     Float64?       Float64?       Float64?       String?            Float64?   String?       \n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ dataone     missing               0.001           0.02  0;12;24;48;72;120      150.0  missing       \n   2 │ withdata2         0.001     missing         missing     0;12;24;48;72;120  missing    missing       \n   3 │ three             0.001           0.1       missing     missing                250.0  missing       ","category":"page"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"The data frame can be loaded into platform using the HetaSimulator.add_conditions! method.","category":"page"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"add_conditions!(platform, conditions_csv)\n\nconditions(platform)\nDict{Symbol, Cond} with 4 entries:\n  :three     => Cond{...}\n  :withdata2 => Cond{...} \n  :dataone   => Cond{...}","category":"page"},{"location":"table-formats/cond/#Example","page":"Conditions tables","title":"Example","text":"","category":"section"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"Loading file conditions.csv with the following content.","category":"page"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"id model parameters.k1 parameters.k2 parameters.k3 saveat[] tspan observables[] events_active.sw1 events_active.sw2 events_save.sw1\ncond1   0.001 0.02 0;12;24;48;72;120;150   true false true;false\ncond2 nameless 0.001    1000   true \ncond3 another_model  0.001  0;12;24;48;72;120   false  ","category":"page"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"Read as DataFrame object.","category":"page"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"conditions = read_conditions(\"./conditions.csv\")","category":"page"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"Add all conditions to Platform","category":"page"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"add_conditions!(platform, conditions)","category":"page"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"As a result the Platform will contain three conditions: cond1, cond2, cond3.","category":"page"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"These operations are equivalent of manually created Cond objects.","category":"page"},{"location":"table-formats/cond/","page":"Conditions tables","title":"Conditions tables","text":"cond1 = Cond(\n  platform.models[:nameless];\n  parameters = [:k2=>0.001, :k3=>0.02],\n  saveat = [0, 12, 24, 48, 72, 120, 150],\n  events_active = [:sw1=>true, :sw2=>false],\n  events_save = [:sw1=>(true,false)]\n)\npush!(platform.conditions, :cond1=>cond1)\n\ncond2 = Cond(\n  platform.models[:nameless];\n  parameters = [:k1=>0.001],\n  tspan = (0., 1000.),\n  events_active = [:sw2=>true]\n)\npush!(platform.conditions, :cond2=>cond2)\n\ncond3 = Cond(\n  platform.models[:another_model];\n  parameters = [:k2=>0.001],\n  saveat = [0, 12, 24, 48, 72, 120],\n  events_active = [:sw1=>false]\n)\npush!(platform.conditions, :cond3=>cond3)\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"HetaSimulator is an OpenSource simulation and parameters estimation (fitting) platform for the Heta modeling language.  The main purpose of the package is to establish the linkage between emerging QSP frameworks and fast computational methods (parallel simulations, automatic differentiation, etc.).","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Heta language is a domain-specific modeling language (DSL) for dynamic quantitative models used in quantitative systems pharmacology (QSP) and systems biology (SB). Heta code and tabular formats can be translated into variety of formats like Simbiology, Matlab, mrgsolve, DBSolve and many others.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides the simulation engines for the Heta-based models and modeling platforms to be run in Julia. A QSP model can be directly run using the HetaSimulator without additional tools. The ODE system in general form can also be run with HetaSimulator.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main features of the package are","category":"page"},{"location":"","page":"Home","title":"Home","text":"reach capabilities for finding parameters based on experimental datasets\nsupport for working with multiple models including simultaneous fitting\nparallel simulations\nstorage of components in unified format\nimport of datasets and conditions from CSV/Excell tables \nfull Heta standard support\nstoring models, conditions and data in the Platform object for easy management of platform components\nutilizing the facilities of OpenSource projects like Julia and SciML ecosystem.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"It is assumed that you have Julia v1.6 installed. The latest Julia release can be downloaded from julialang.org","category":"page"},{"location":"","page":"Home","title":"Home","text":"To install or update HetaSimulator and Heta compiler run the code below in Julia environment:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\n(@v1.6) pkg> add https://github.com/hetalang/HetaSimulator.jl.git\njulia> using HetaSimulator\njulia> heta_update() # installs \"Heta compiler\" in NodeJS","category":"page"},{"location":"","page":"Home","title":"Home","text":"Internally HetaSimulator uses Heta compiler which must be installed inside the package. If you want to update it to the last version just run.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> heta_update() # updates to the latest stable version","category":"page"},{"location":"#Basic-usage","page":"Home","title":"Basic usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Create a model in Heta format or use your Heta-based platform. Here we will use the example with a simple model with two species and one reaction.","category":"page"},{"location":"","page":"Home","title":"Home","text":"// index.heta file in directory \"my_project\"\ncomp1 @Compartment .= 1.5;\n\ns1 @Species {compartment: comp1, output: true} .= 12;\ns2 @Species {compartment: comp1, output: true} .= 0;\n\nr1 @Reaction {actors: s1 => s2, output: true} := k1 * s1 * comp1;\n\nk1 @Const = 1e-3;","category":"page"},{"location":"","page":"Home","title":"Home","text":"To read more about Heta read Heta specifications","category":"page"},{"location":"","page":"Home","title":"Home","text":"using HetaSimulator, Plots\n\n# set the absolute or relative path to the project directory\nplatform = load_platform(\"./my_project\")\n# wait for the platform compilation...\n\n# get the default Heta model\nmodel = platform.models[:nameless]\n\n# single simulation and plot\nresults = sim(model; tspan = (0., 1200.))\nplot(results)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Plot)","category":"page"},{"location":"","page":"Home","title":"Home","text":"# transform results to data frame\ndf = DataFrame(results)\n...\n9×4 DataFrame\n Row │ t             s1        s2           scope  \n     │ Float64       Float64   Float64      Symbol \n─────┼─────────────────────────────────────────────\n   1 │    0.0555525  11.9993   0.000666611  ode_\n   2 │    0.611077   11.9927   0.00733069   ode_","category":"page"},{"location":"#Architecture","page":"Home","title":"Architecture","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The user of HetaSimulator typically deals with the following three types:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Model - an ODE model, containing rhs, rules, initial parameters and vector of events.\nCond - condition representing a special model's setup for simulations or fitting. This setup can include initial parameters and events settings, output variables etc. In case of fitting Cond should also include experimental data. A common usage of Cond can be model's simulation with different drugs (parameters and events setup). Different Cond's can be united to run multi-conditional simulations and fitting.\nPlatform - container for different Models and Conds.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The user can perform the following three operations with both Model, Cond and Platform","category":"page"},{"location":"","page":"Home","title":"Home","text":"sim - run a single or multi-conditional simulations. \nfit - fit a model to experimental data. \nmc - run Monte-Carlo or virtual patients simulations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See documentation for detailed overview of HetaSimulator types and functions' arguments.","category":"page"},{"location":"#Known-issues-and-limitations","page":"Home","title":"Known issues and limitations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Currently the HetaSimulator package is not published on Julia repository, use the direct link to install   julia  ] add https://github.com/hetalang/HetaSimulator.jl","category":"page"},{"location":"#Getting-help","page":"Home","title":"Getting help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Read the docs\nUse Gitter Chatroom.\nUse Issue Tracker","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is distributed under the terms of the MIT License.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copyright 2020-2021, InSysBio LLC","category":"page"},{"location":"#Authors-and-history","page":"Home","title":"Authors and history","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Ivan Borisov\nEvgeny Metelkin","category":"page"},{"location":"","page":"Home","title":"Home","text":"HetaSimulator is inspired by the user experience of the software packages like SBMLToolbox, mrgsolve, DBSolve, dMod.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package utilizes the unique features of Julia and SciML ecosystem.","category":"page"}]
}
